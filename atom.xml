<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sidney God</title>
  <icon>https://sidneygod.github.io/icon.png</icon>
  <subtitle>Keep quiet time for time</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sidneygod.github.io/"/>
  <updated>2021-04-26T14:54:54.898Z</updated>
  <id>https://sidneygod.github.io/</id>
  
  <author>
    <name>Sidney Ding</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Relearning C/Cpp] Initialization and Functions</title>
    <link href="https://sidneygod.github.io/posts/e4de57a8/"/>
    <id>https://sidneygod.github.io/posts/e4de57a8/</id>
    <published>2021-04-17T08:53:30.000Z</published>
    <updated>2021-04-26T14:54:54.898Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1 初始化"></a>1 初始化</h1><p>对象的声明可以通过初始化的过程获得初始值。主要就是见识一下C/Cpp里面几种初始化的形式，免得大惊小怪</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C语言的初始化还好，怎么着都得有个 =</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c = {<span class="number">1</span>};  <span class="comment">// scalar initialization</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span><span class="keyword">int</span> a[<span class="number">3</span>], b;} MyType;</span><br><span class="line">MyType mm = {{<span class="number">1</span>}, <span class="number">3</span>};</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* ptr = <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cpp多了一个花样</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line"><span class="keyword">int</span> b {<span class="number">0</span>};</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span><span class="keyword">int</span> a[<span class="number">3</span>], b;} MyType;</span><br><span class="line">MyType mm {{<span class="number">1</span>}, <span class="number">3</span>};</span><br><span class="line"><span class="keyword">auto</span> *m = <span class="keyword">new</span> MyType;</span><br><span class="line"><span class="keyword">auto</span> *m1 {<span class="keyword">new</span> MyType()};</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>对于C来说，有显示初始化(Explicit initialization)，隐式初始化(Implicit initialization)，零初始化(Zero initialization)</p><p>显示的比较好理解，<a href="https://en.cppreference.com/w/c/language/scalar_initialization" target="_blank" rel="noopener">scalar initialization</a>，<a href="https://en.cppreference.com/w/c/language/array_initialization" target="_blank" rel="noopener">array initialization</a>，<a href="https://en.cppreference.com/w/c/language/struct_initialization" target="_blank" rel="noopener">struct initialization</a>，基本都没啥好说的，经常用</p><p>隐式初始化就是你没给它显示初始化，这个时候有两种现象，一种是静态的和thread local <a href="https://en.cppreference.com/w/c/language/storage_duration" target="_blank" rel="noopener">storage duration</a>(这四个单词我的理解是整个线程生命周期都存在的对象，全局变量？)一般会置为零初始化；还有一种automatic <a href="https://en.cppreference.com/w/c/language/storage_duration" target="_blank" rel="noopener">storage duration</a>(auto和register修饰的，局部变量？)一般是个不确定值(野指针)</p><p>零初始化(在内存的表现形式是0？)</p><ul><li>pointers are initialized to null pointer values of their types</li><li>objects of integral types are initialized to unsigned zero</li><li>objects of floating types are initialized to positive zero</li><li>all elements of arrays, all members of structs, and the first members of unions are zero-initialized, recursively, plus all padding bits are initialized to zero</li></ul><p>对于Cpp来说呢，有静态初始化和动态初始化一说</p><p>Depending on context, the initializer may invoke:</p><ul><li><a href="https://en.cppreference.com/w/cpp/language/value_initialization" target="_blank" rel="noopener">Value initialization</a>, e.g. <a href="http://en.cppreference.com/w/cpp/string/basic_string" target="_blank" rel="noopener">std::string</a> s{};</li><li><a href="https://en.cppreference.com/w/cpp/language/direct_initialization" target="_blank" rel="noopener">Direct initialization</a>, e.g. <a href="http://en.cppreference.com/w/cpp/string/basic_string" target="_blank" rel="noopener">std::string</a> s(“hello”);</li><li><a href="https://en.cppreference.com/w/cpp/language/copy_initialization" target="_blank" rel="noopener">Copy initialization</a>, e.g. <a href="http://en.cppreference.com/w/cpp/string/basic_string" target="_blank" rel="noopener">std::string</a> s = “hello”;</li><li><a href="https://en.cppreference.com/w/cpp/language/list_initialization" target="_blank" rel="noopener">List initialization</a>, e.g. <a href="http://en.cppreference.com/w/cpp/string/basic_string" target="_blank" rel="noopener">std::string</a> s{‘a’, ‘b’, ‘c’};</li><li><a href="https://en.cppreference.com/w/cpp/language/aggregate_initialization" target="_blank" rel="noopener">Aggregate initialization</a>, e.g. char a[3] = {‘a’, ‘b’};</li><li><a href="https://en.cppreference.com/w/cpp/language/reference_initialization" target="_blank" rel="noopener">Reference initialization</a>, e.g. char& c = a[0];</li></ul><p>If no initializer is provided, the rules of <a href="https://en.cppreference.com/w/cpp/language/default_initialization" target="_blank" rel="noopener">default initialization</a> apply.</p><p>这里有个<a href="https://en.cppreference.com/w/cpp/language/default_initialization" target="_blank" rel="noopener">default initialization</a>，还有个<a href="https://en.cppreference.com/w/cpp/language/zero_initialization" target="_blank" rel="noopener">zero-initialized</a>和<a href="https://en.cppreference.com/w/cpp/language/constant_initialization" target="_blank" rel="noopener">constant initialization</a></p><p>默认初始化呢，就当时默认构造函数好了。常量初始化呢，编译时期的。</p><h1 id="2-函数"><a href="#2-函数" class="headerlink" title="2 函数"></a>2 函数</h1><p>了解函数之前，得先了解语句，毕竟函数不就是把语句打包一下吗？这也是所有编程语言核心之处啊，这里不说编程语言，就说计算机语言，还是蛮简单的。赋值，选择，循环，跳转。</p><p>简单不代表容易呀</p><p>C/Cpp中选择if和switch，循环for，while和do-while，跳转goto，还有continue，break，空语句，几乎每种编程语言都有，感觉也没啥要注意的，main函数不就是个函数，和<code>y=f(x)</code>很像啊</p><p>函数定义形式如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名() {</span><br><span class="line">    语句;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// C语言比较奔放 下面那就叫一个函数 CPP需要返回值类型</span></span><br><span class="line">tmp(){}  <span class="comment">// 适合C89，不适合C99</span></span><br></pre></td></tr></tbody></table></figure><p>Cpp的函数比较复杂一点</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> {</span></span><br><span class="line">    [[noreturn]] virtual inline auto f(const unsigned long int * const) -> void const noexcept;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看到了，一个破函数能有这么多修饰..</p><p><strong>返回值</strong></p><p>返回值这东西我们知道，一般写在函数名前面，然而Cpp总能给你来点不一样的</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">int</span> a)</span></span>;   <span class="comment">// 前置返回类型</span></span><br><span class="line">auto to_string(int a) -> string;  // 后置返回类型</span><br></pre></td></tr></tbody></table></figure><p>其中auto关键字就表示后置返回类型，后置返回类型的必要性来自于模板函数，因为返回类型依赖于参数</p><p><strong>inline和constexpr</strong></p><p>在函数声明或定义中函数返回类型前加上关键字inline即把函数指定为内联，函数固定为一个地址</p><p>关键字inline必须与函数定义体放在一起才能使函数成为内联，仅将inline 放在函数声明前面不起任何作用</p><p>定义在类声明之中的成员函数将自动地成为内联函数</p><p>如果函数体内的代码比较长，使用内联将导致内存消耗代价较高</p><p>如果函数体内出现循环，那么执行函数体内代码的时间要比函数调用的开销大</p><p>面对constexpr，胆子大一点，直接当成常量就ok了</p><p><strong>[[noreturn]]</strong></p><p>形如<code>[[...]]</code>被称为属性，属性可以置于Cpp语法的任何位置。<code>[[noreturn]]</code>放在函数声明语句开始位置，表示我们不希望函数返回任何结果</p><h2 id="2-1-参数传递"><a href="#2-1-参数传递" class="headerlink" title="2.1 参数传递"></a>2.1 参数传递</h2><p>当程序调用一个函数时，我们为该函数的形参申请内存空间，并用实参初始化形参。参数传递的语义与初始化的语义一致(严格来说是拷贝初始化)。<strong>C中，所有函数参数都是”值传递”；Cpp中，除非形参是引用，其他情况函数参数也都是”值传递”</strong>。所谓值传递，就是传入函数的是实参的副本，传递给被调用函数的参数值存放在临时变量中，而不是存放在原来的变量中，被调用函数不能直接修改主调函数中变量的值，而只能修改其私有的临时副本值。</p><p><strong>引用参数</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span>& ref)</span> </span>{</span><br><span class="line">    ++val;</span><br><span class="line">    ++ref;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当调用函数f时，<code>++val</code>递增的是实参的副本，<code>++ref</code>递增的是实参本身</p><p>单从拷贝的角度来考虑，如果遇到大对象时，引用传递比值传递更有效。但是此时最好将引用类型的参数声明成const的，表明只是为了效率，而非想修改对象的值</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(Large& arg)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>对于小对象使用值传递方式；</p><p>对于无需修改的大对象使用const引用传递；</p><p>如需要返回计算结果，最好使用return而非通过参数修改对象；</p><p>使用右值实现移动和转发；</p><p>如果找不到合适的对象则传递指针(用nullptr表示没有对象)；</p><p>除非万不得已，否则不要使用引用传递，传递指针它不香吗？</p><p><strong>数组参数</strong></p><p>当数组作为参数时，实际传入的是指向该数组首元素的指针。也就是说，当数组作为参数传入函数时，<code>T[]</code>会转换成<code>T*</code>，所以也就没有长度一说，如果此时对数组元素赋值，则会改变该数组元素实际值。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这叫复合字面量</span></span><br><span class="line">fun((<span class="keyword">int</span>[]) {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>});</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>};</span><br><span class="line">fun(arr);</span><br></pre></td></tr></tbody></table></figure><p><strong>列表参数</strong></p><p>一个由{}限定的列表可以作为下述形参的实参</p><p>1 类型<code>std::initializer_list<T></code>，其中列表的值能隐式地转换成T</p><p>2 能用列表中的值初始化的类型</p><p>3 T类型数组的引用，其中列表值能隐式地转换成T</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">f1</span>(<span class="title">std</span>:</span>:<span class="built_in">initializer_list</span><T>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> {</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(S)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">int</span> <span class="title">N</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">f3</span>(<span class="title">T</span> (&&<span class="title">r</span>)[<span class="title">N</span>]);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f4</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>{</span><br><span class="line">    f1({<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>});  <span class="comment">// T是int，initializer_list大小是4</span></span><br><span class="line">    f2({<span class="number">1</span>, <span class="string">"cpp"</span>});</span><br><span class="line">    f3({<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>});  <span class="comment">// T是int，N是4</span></span><br><span class="line">    f4({<span class="number">1</span>});</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果存在二义性，则initializer_list参数的函数被优先考虑</p><p><strong>数量未定参数</strong></p><p>对于某些函数，很难明确指出调用时期望的参数数量和类型，要实现这样的接口：</p><p>1 使用可变模板，安全</p><p>2 使用initializer_list作为参数类型，安全</p><p>3 使用省略号(…)结束参数列表，不安全</p><p><strong>默认参数</strong></p><p>只能给参数列表中位置靠后的参数提供默认值</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tp1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">// int tp2(int a = 1, int b);  // Missing default argument on parameter 'b'</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tp3</span><span class="params">(<span class="keyword">char</span>* = <span class="literal">nullptr</span>)</span></span>;  <span class="comment">// * 和 = 之间必须有空格，否则就是 *= 了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tp4</span><span class="params">(<span class="keyword">int</span> = <span class="number">9</span>)</span></span>;</span><br><span class="line"><span class="comment">// int tp4(int x = 8);  // Redefinition of default argument</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tp4</span><span class="params">(<span class="keyword">long</span> x = <span class="number">8</span>)</span></span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-函数重载"><a href="#2-2-函数重载" class="headerlink" title="2.2 函数重载"></a>2.2 函数重载</h2><p>为不同数据类型的同一种操作起同一种名字称为重载。这个概念是Cpp的，C没有。重载发生在一组重载函数集的成员内部，也就是说重载函数应该位于同一个作用域。</p><p><strong>自动重载</strong></p><p>由编译器决定使用一组函数中的某一个，主要依据实参和哪个函数形参类型最匹配</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">long</span> l)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">double</span> d)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>{</span><br><span class="line">    print(<span class="number">1L</span>);</span><br><span class="line">    print(<span class="number">1.0</span>);</span><br><span class="line">    <span class="comment">// print(1);  // Call to 'print' is ambiguous</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>1 精确匹配，无须类型转换或者仅需简单类型转换即可实现匹配</p><p>2 执行提升后匹配，执行了整数提升(bool转int，char转int..)</p><p>3 执行标准类型转换后实现匹配，比如int转double，double转int，<code>T*</code>转<code>void*</code></p><p>4 执行用户自定义类型的转换后实现匹配</p><p>5 使用函数声明中的省略号进行匹配</p><p><strong>手动重载</strong></p><p>为了解决自动重载的二义性，方案一，增加一个函数版本；方案二，static_cast</p><p><strong>C的重载</strong></p><p>C语言真的没法重载了？不过是不能声明同样名字的函数罢了。参考：<a href="http://locklessinc.com/articles/overloading/" target="_blank" rel="noopener">http://locklessinc.com/articles/overloading/</a></p><blockquote><p>为什么Cpp可以重载而C不可以，从汇编的角度来看，Cpp汇编完了，总会在函数名字上加点什么，而C就不会</p></blockquote><p>省略号</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, ...)</span></span>;  <span class="comment">// 着实有点僵硬，但也重载了一点，个数</span></span><br></pre></td></tr></tbody></table></figure><p>你说要重载参数类型，我觉得划不来，多写太多代码了</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="keyword">int</span> param1;</span><br><span class="line">    <span class="keyword">int</span> param2;</span><br><span class="line">} INT_PARAM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="keyword">double</span> param1;</span><br><span class="line">    <span class="keyword">double</span> param2;</span><br><span class="line">} DOUBLE_PARAM;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(ADDFUNC)</span><span class="params">(<span class="keyword">void</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">int_add_func</span><span class="params">(<span class="keyword">void</span> *wParam)</span> </span>{</span><br><span class="line">    INT_PARAM *lParam = (INT_PARAM *) wParam;</span><br><span class="line">    <span class="keyword">int</span> res = lParam->param1 + lParam->param2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"result = %d\n"</span>, res);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">double_add_func</span><span class="params">(<span class="keyword">void</span> *wParam)</span> </span>{</span><br><span class="line">    DOUBLE_PARAM *lParam = (DOUBLE_PARAM *) wParam;</span><br><span class="line">    <span class="keyword">double</span> res = lParam->param1 + lParam->param2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"result = %f\n"</span>, res);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_func</span><span class="params">(ADDFUNC f, <span class="keyword">void</span> *wParam)</span> </span>{</span><br><span class="line">    f(wParam);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    INT_PARAM val1 = {<span class="number">10</span>, <span class="number">20</span>};</span><br><span class="line">    DOUBLE_PARAM val2 = {<span class="number">30.5</span>, <span class="number">40.5</span>};</span><br><span class="line"></span><br><span class="line">    add_func(int_add_func, &val1);</span><br><span class="line">    add_func(double_add_func, &val2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>还有</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">overload_float</span><span class="params">(<span class="keyword">float</span> f)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">/* Use f */</span></span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">overload_double</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">/* Use d */</span></span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> overload(A)\</span></span><br><span class="line">    ((<span class="keyword">sizeof</span>(A) == <span class="keyword">sizeof</span>(<span class="keyword">float</span>))?overload_float(A):\</span><br><span class="line">    (<span class="keyword">sizeof</span>(A) == <span class="keyword">sizeof</span>(<span class="keyword">double</span>))?overload_double(A):(<span class="keyword">void</span>)<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpp_overload1</span><span class="params">(<span class="keyword">int</span> p1)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"CPP One param: %d\n"</span>, p1);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpp_overload2</span><span class="params">(<span class="keyword">double</span> *p1, <span class="keyword">const</span> <span class="keyword">char</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"CPP Two params: %p (%f) %s\n"</span>, p1, *p1, p2);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpp_overload3</span><span class="params">(<span class="keyword">int</span> p1, <span class="keyword">int</span> p2, <span class="keyword">int</span> p3)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"CPP Three params: %c %d %d\n"</span>, p1, p2, p3);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CAT(A, B) CAT2(A, B)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CAT2(A, B) A ## B</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cpp_overload(...)\</span></span><br><span class="line">    CAT(cpp_overload, COUNT_PARMS(__VA_ARGS__))(__VA_ARGS__)</span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-指针函数"><a href="#2-3-指针函数" class="headerlink" title="2.3 指针函数"></a>2.3 指针函数</h2><p>看完参数，就该瞅瞅返回值了。基础类型的返回值没啥好看的，如果函数返回值是指针，数组，结构体..</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int[] getArr();  // Function cannot return array type 'int []'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">} MY_POINT;</span><br><span class="line"></span><br><span class="line"><span class="function">MY_POINT <span class="title">pointFun</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">    <span class="comment">//return (MY_POINT) {x, y};  // 直接返回的话 就不会为这个函数分配栈空间了</span></span><br><span class="line">    MY_POINT mp = {x + <span class="number">1</span>, y + <span class="number">2</span>};</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pointFun: %p, %p\n"</span>, &(mp.x), &(mp.y));</span><br><span class="line">    <span class="keyword">return</span> mp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">getIntP</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// return (int[]) {1, 2, 3};  // 可不能返回一个局部数组 会出大事的</span></span><br><span class="line">    <span class="keyword">int</span> *p = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">3</span>);</span><br><span class="line">    *p = <span class="number">10</span>;</span><br><span class="line">    *(p + <span class="number">1</span>) = <span class="number">11</span>;</span><br><span class="line">    *(p + <span class="number">2</span>) = <span class="number">12</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"getIntP: %p, %p, %p, %p\n"</span>, &p, p, p + <span class="number">1</span>, p + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    MY_POINT point = pointFun(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">int</span> *p = getIntP();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"point: %d, %d\n"</span>, point.x, point.y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"intP: %d, %d, %d\n"</span>, *p, *(p + <span class="number">1</span>), *(p + <span class="number">2</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p, %p, %p, %p\n"</span>, &p, p, p + <span class="number">1</span>, p + <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p, %d\n"</span>, (&p + <span class="number">1</span>), (<span class="keyword">int</span>) *(&p + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p, %d\n"</span>, &(point.x), point.x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pointFun: 000000000062FDC8, 000000000062FDCC</span></span><br><span class="line"><span class="comment">getIntP: 000000000062FDC8, 0000000000E72CA0, 0000000000E72CA4, 0000000000E72CA8</span></span><br><span class="line"><span class="comment">point: 6, 8</span></span><br><span class="line"><span class="comment">intP: 10, 11, 12</span></span><br><span class="line"><span class="comment">000000000062FE10, 0000000000E72CA0, 0000000000E72CA4, 0000000000E72CA8</span></span><br><span class="line"><span class="comment">000000000062FE18, 6</span></span><br><span class="line"><span class="comment">000000000062FE18, 6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>首先，C/Cpp函数不能直接返回一个<code>int[]</code>，或许是因为不知道大小吧。返回一个结构体似乎是没有问题的，而且貌似还能返回个局部变量。返回指针自然不必说，先不说有个指针函数的概念，我返回个地址咋不行了？</p><p>汇编瞅瞅，这次为了搞得更清楚一点呢，换一个新指令<code>gcc -S -fverbose-asm -O0 -m64 RetTest.c</code>，以”.”开头指令基本是伪指令，可以删了，不用看</p><p>汇编的函数跳转过程，参考：<a href="https://blog.csdn.net/ww188/article/details/82841617" target="_blank" rel="noopener">linux进程运行空间分析_ww188的专栏-CSDN博客</a></p><p>内存布局参考：<a href="https://www.kernel.org/doc/Documentation/x86/x86_64/mm.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/x86/x86_64/mm.txt</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">.LC0:</span><br><span class="line">    .ascii "pointFun: %p, %p\12\0"</span><br><span class="line">pointFun:</span><br><span class="line">    # 函数建立栈空间 start</span><br><span class="line">    pushq    %rbp     #</span><br><span class="line">    movq    %rsp, %rbp     #,</span><br><span class="line">    subq    $48, %rsp     #,</span><br><span class="line">    # 函数建立栈空间 end</span><br><span class="line">    movl    %ecx, 16(%rbp)     # 把参数拿出来 x</span><br><span class="line">    movl    %edx, 24(%rbp)     # y</span><br><span class="line"> # RetTest.c:16:     MY_POINT mp = {x + 1, y + 2};</span><br><span class="line">    movl    16(%rbp), %eax     # x, tmp91</span><br><span class="line">    addl    $1, %eax     #, _1</span><br><span class="line"> # RetTest.c:16:     MY_POINT mp = {x + 1, y + 2};</span><br><span class="line">    movl    %eax, -8(%rbp)     # _1, mp.x</span><br><span class="line"> # RetTest.c:16:     MY_POINT mp = {x + 1, y + 2};</span><br><span class="line">    movl    24(%rbp), %eax     # y, tmp92</span><br><span class="line">    addl    $2, %eax     #, _2</span><br><span class="line"> # RetTest.c:16:     MY_POINT mp = {x + 1, y + 2};</span><br><span class="line">    movl    %eax, -4(%rbp)     # _2, mp.y</span><br><span class="line"> # RetTest.c:17:     printf("pointFun: %p, %p\n", &(mp.x), &(mp.y));</span><br><span class="line">    leaq    -8(%rbp), %rax     #, tmp93</span><br><span class="line">    leaq    4(%rax), %rdx     #, tmp94</span><br><span class="line">    leaq    -8(%rbp), %rax     #, tmp95</span><br><span class="line">    movq    %rdx, %r8     # tmp94,</span><br><span class="line">    movq    %rax, %rdx     # tmp95,</span><br><span class="line">    leaq    .LC0(%rip), %rcx     #,</span><br><span class="line">    call    printf     #</span><br><span class="line"> # RetTest.c:18:     return mp;</span><br><span class="line">    movq    -8(%rbp), %rax     # 把返回值放到rax中</span><br><span class="line"> # RetTest.c:19: }</span><br><span class="line">    addq    $48, %rsp     # 上面为这个函数开辟了48字节 现在收回去</span><br><span class="line">    popq    %rbp     # 把当前rsp的值给rbp，此时rbp就是main的了，rsp再回去一个单位，还不是main的样子</span><br><span class="line">    ret     # 先把rsp的值给rip，rip就指向了main调用函数的那块了，rsp再回去一个单位，是main的样子了</span><br><span class="line">.LC1:</span><br><span class="line">    .ascii "getIntP: %p, %p, %p, %p\12\0"</span><br><span class="line">getIntP:</span><br><span class="line">    pushq    %rbp     #</span><br><span class="line">    movq    %rsp, %rbp     #,</span><br><span class="line">    subq    $64, %rsp     #,</span><br><span class="line"> # RetTest.c:23:     int *p = (int *) malloc(sizeof(int) * 3);</span><br><span class="line">    movl    $12, %ecx     #,</span><br><span class="line">    call    malloc     #</span><br><span class="line"> # RetTest.c:23:     int *p = (int *) malloc(sizeof(int) * 3);</span><br><span class="line">    movq    %rax, -8(%rbp)     # _1, p</span><br><span class="line"> # RetTest.c:24:     *p = 10;</span><br><span class="line">    movq    -8(%rbp), %rax     # p, p.0_2</span><br><span class="line"> # RetTest.c:24:     *p = 10;</span><br><span class="line">    movl    $10, (%rax)     #, *p.0_2</span><br><span class="line"> # RetTest.c:25:     *(p + 1) = 11;</span><br><span class="line">    movq    -8(%rbp), %rax     # p, p.1_3</span><br><span class="line">    addq    $4, %rax     #, _4</span><br><span class="line"> # RetTest.c:25:     *(p + 1) = 11;</span><br><span class="line">    movl    $11, (%rax)     #, *_4</span><br><span class="line"> # RetTest.c:26:     *(p + 2) = 12;</span><br><span class="line">    movq    -8(%rbp), %rax     # p, p.2_5</span><br><span class="line">    addq    $8, %rax     #, _6</span><br><span class="line"> # RetTest.c:26:     *(p + 2) = 12;</span><br><span class="line">    movl    $12, (%rax)     #, *_6</span><br><span class="line"> # RetTest.c:27:     printf("getIntP: %p, %p, %p, %p\n", &p, p, p + 1, p + 2);</span><br><span class="line">    movq    -8(%rbp), %rax     # p, p.3_7</span><br><span class="line">    leaq    8(%rax), %rdx     #, _8</span><br><span class="line">    movq    -8(%rbp), %rax     # p, p.4_9</span><br><span class="line">    leaq    4(%rax), %r8     #, _10</span><br><span class="line">    movq    -8(%rbp), %rcx     # p, p.5_11</span><br><span class="line">    leaq    -8(%rbp), %rax     #, tmp101</span><br><span class="line">    movq    %rdx, 32(%rsp)     # _8,</span><br><span class="line">    movq    %r8, %r9     # _10,</span><br><span class="line">    movq    %rcx, %r8     # p.5_11,</span><br><span class="line">    movq    %rax, %rdx     # tmp101,</span><br><span class="line">    leaq    .LC1(%rip), %rcx     #,</span><br><span class="line">    call    printf     #</span><br><span class="line"> # RetTest.c:28:     return p;</span><br><span class="line">    movq    -8(%rbp), %rax     # p, _19</span><br><span class="line"> # RetTest.c:29: }</span><br><span class="line">    addq    $64, %rsp     #,</span><br><span class="line">    popq    %rbp     #</span><br><span class="line">    ret    </span><br><span class="line">.LC2:</span><br><span class="line">    .ascii "point: %d, %d\12\0"</span><br><span class="line">.LC3:</span><br><span class="line">    .ascii "intP: %d, %d, %d\12\0"</span><br><span class="line">.LC4:</span><br><span class="line">    .ascii "%p, %p, %p, %p\12\0"</span><br><span class="line">.LC5:</span><br><span class="line">    .ascii "%p, %d\12\0"</span><br><span class="line">main:</span><br><span class="line">    # 给函数建立栈空间 start</span><br><span class="line">    pushq    %rbp     # 先将rsp向下增长一个单位(8bit)，把rbp压到栈中</span><br><span class="line">    movq    %rsp, %rbp     # 让rbp指向当前的rsp</span><br><span class="line">    subq    $64, %rsp     # rsp开辟64bit空间</span><br><span class="line">    # 给函数建立栈空间</span><br><span class="line"> # RetTest.c:31: int main() {</span><br><span class="line">    call    __main     # 这个有时间再搞明白</span><br><span class="line"> # RetTest.c:32:     MY_POINT point = pointFun(5, 6);</span><br><span class="line">    movl    $6, %edx     # 参数2</span><br><span class="line">    movl    $5, %ecx     # 参数1</span><br><span class="line">    call    pointFun     # 先把rsp再增长一个单位，把rip的值压进栈，然后把pointFun值给rip 那么下一条指令就是pointFun的了</span><br><span class="line">    movq    %rax, -8(%rbp)     # rax是pointFun的返回值</span><br><span class="line"> # RetTest.c:33:     int *p = getIntP();</span><br><span class="line">    call    getIntP     #</span><br><span class="line"> # RetTest.c:33:     int *p = getIntP();</span><br><span class="line">    movq    %rax, -16(%rbp)     # _1, p</span><br><span class="line"> # RetTest.c:35:     printf("point: %d, %d\n", point.x, point.y);</span><br><span class="line">    movl    -4(%rbp), %edx     # point.y, _2</span><br><span class="line">    movl    -8(%rbp), %eax     # point.x, _3</span><br><span class="line">    movl    %edx, %r8d     # _2,</span><br><span class="line">    movl    %eax, %edx     # _3,</span><br><span class="line">    leaq    .LC2(%rip), %rcx     #,</span><br><span class="line">    call    printf     #</span><br><span class="line"> # RetTest.c:36:     printf("intP: %d, %d, %d\n", *p, *(p + 1), *(p + 2));</span><br><span class="line">    movq    -16(%rbp), %rax     # p, p.6_4</span><br><span class="line">    addq    $8, %rax     #, _5</span><br><span class="line"> # RetTest.c:36:     printf("intP: %d, %d, %d\n", *p, *(p + 1), *(p + 2));</span><br><span class="line">    movl    (%rax), %ecx     # *_5, _6</span><br><span class="line"> # RetTest.c:36:     printf("intP: %d, %d, %d\n", *p, *(p + 1), *(p + 2));</span><br><span class="line">    movq    -16(%rbp), %rax     # p, p.7_7</span><br><span class="line">    addq    $4, %rax     #, _8</span><br><span class="line"> # RetTest.c:36:     printf("intP: %d, %d, %d\n", *p, *(p + 1), *(p + 2));</span><br><span class="line">    movl    (%rax), %edx     # *_8, _9</span><br><span class="line">    movq    -16(%rbp), %rax     # p, p.8_10</span><br><span class="line">    movl    (%rax), %eax     # *p.8_10, _11</span><br><span class="line">    movl    %ecx, %r9d     # _6,</span><br><span class="line">    movl    %edx, %r8d     # _9,</span><br><span class="line">    movl    %eax, %edx     # _11,</span><br><span class="line">    leaq    .LC3(%rip), %rcx     #,</span><br><span class="line">    call    printf     #</span><br><span class="line"> # RetTest.c:37:     printf("%p, %p, %p, %p\n", &p, p, p + 1, p + 2);</span><br><span class="line">    movq    -16(%rbp), %rax     # p, p.9_12</span><br><span class="line">    leaq    8(%rax), %rdx     #, _13</span><br><span class="line">    movq    -16(%rbp), %rax     # p, p.10_14</span><br><span class="line">    leaq    4(%rax), %r8     #, _15</span><br><span class="line">    movq    -16(%rbp), %rcx     # p, p.11_16</span><br><span class="line">    leaq    -16(%rbp), %rax     #, tmp113</span><br><span class="line">    movq    %rdx, 32(%rsp)     # _13,</span><br><span class="line">    movq    %r8, %r9     # _15,</span><br><span class="line">    movq    %rcx, %r8     # p.11_16,</span><br><span class="line">    movq    %rax, %rdx     # tmp113,</span><br><span class="line">    leaq    .LC4(%rip), %rcx     #,</span><br><span class="line">    call    printf     #</span><br><span class="line"> # RetTest.c:38:     printf("%p, %d\n", (&p + 1), (int) *(&p + 1));</span><br><span class="line">    leaq    -16(%rbp), %rax     #, _17</span><br><span class="line">    addq    $8, %rax     #, _17</span><br><span class="line"> # RetTest.c:38:     printf("%p, %d\n", (&p + 1), (int) *(&p + 1));</span><br><span class="line">    movq    (%rax), %rax     # *_17, _18</span><br><span class="line"> # RetTest.c:38:     printf("%p, %d\n", (&p + 1), (int) *(&p + 1));</span><br><span class="line">    movl    %eax, %edx     # _19, _20</span><br><span class="line">    leaq    -16(%rbp), %rax     #, _21</span><br><span class="line">    addq    $8, %rax     #, _21</span><br><span class="line">    movl    %edx, %r8d     # _20,</span><br><span class="line">    movq    %rax, %rdx     # _21,</span><br><span class="line">    leaq    .LC5(%rip), %rcx     #,</span><br><span class="line">    call    printf     #</span><br><span class="line"> # RetTest.c:39:     printf("%p, %d\n", &(point.x), point.x);</span><br><span class="line">    movl    -8(%rbp), %edx     # point.x, _22</span><br><span class="line">    leaq    -8(%rbp), %rax     #, tmp114</span><br><span class="line">    movl    %edx, %r8d     # _22,</span><br><span class="line">    movq    %rax, %rdx     # tmp114,</span><br><span class="line">    leaq    .LC5(%rip), %rcx     #,</span><br><span class="line">    call    printf     #</span><br><span class="line"> # RetTest.c:41:     return 0;</span><br><span class="line">    movl    $0, %eax     #, _32</span><br><span class="line"> # RetTest.c:42: }</span><br><span class="line">    addq    $64, %rsp     #,</span><br><span class="line">    popq    %rbp     #</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>这个鬼程序还是蛮长的，用张图翻译一下</p><img data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/20210425212120_ret_value.svg"><p>基本上每个颜色就是一个步骤，还是比较容易理解的，所以说，指针函数就这样，没啥难度</p><p>再看看，为啥不能返回局部变量</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">getArr</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// int arr[] = {1, 2, 3};</span></span><br><span class="line">    <span class="comment">// printf("getArr: %p, %p, %p\n", arr, arr + 1, arr + 2);</span></span><br><span class="line">    <span class="comment">// return arr;  // Address of stack memory associated with local variable 'arr' returned</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>[]) {<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>};  <span class="comment">// 这仍然是个局部变量哦</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nothing</span><span class="params">()</span> </span>{  <span class="comment">// 真的就是nothing</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"nothing: %p, %p, %p\n"</span>, &a, &b, &c);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> *arr = getArr();</span><br><span class="line">    nothing();</span><br><span class="line">    <span class="comment">// 猜猜值是多少</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main: %d, %d, %d\n"</span>, *arr, *(arr + <span class="number">1</span>), *(arr + <span class="number">2</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main: %p, %p, %p, %p\n"</span>, &arr, arr, arr + <span class="number">1</span>, arr + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">nothing: 000000000062FDCC, 000000000062FDC8, 000000000062FDC4</span></span><br><span class="line"><span class="comment">main: 10, 9, 8</span></span><br><span class="line"><span class="comment">main: 000000000062FE18, 000000000062FDC4, 000000000062FDC8, 000000000062FDCC</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>这个程序就不反汇编了，这种情况还是好的，能打印出来数据，更有甚者，程序可能会崩溃。所以<strong>永远不要返回局部变量的地址</strong></p><blockquote><p>指针和地址是一回事吗？通常是，但不完全是。我们这里都是用字节去划分内存，但是，如果是用字呢？</p></blockquote><h2 id="2-4-函数指针"><a href="#2-4-函数指针" class="headerlink" title="2.4 函数指针"></a>2.4 函数指针</h2><p>之前指针的应用都是指向数据，而函数指针不过就是把指针指向代码。这种指针可以被赋值，存放在数组中，传递给函数以及作为函数的返回值等等。简单的例子</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> (*pFun)(<span class="keyword">int</span>, <span class="keyword">int</span>) = add;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p, %p\n"</span>, &a, &b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %p\n"</span>, add(a, b), &add);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %p, %p\n"</span>, pFun(a, b), pFun, &pFun);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %p, %p\n"</span>, (*pFun)(a, b), pFun, &pFun);  <span class="comment">// *pFun的 () 不能少！！！</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">000000000062FE0C, 000000000062FE08</span></span><br><span class="line"><span class="comment">8, 0000000000401FF0</span></span><br><span class="line"><span class="comment">8, 0000000000401FF0, 000000000062FE00</span></span><br><span class="line"><span class="comment">8, 0000000000401FF0, 000000000062FE00</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>这个程序也没必要汇编了..函数add实际上存在text段的，指针pFun和a, b一样，都在栈中，只是存的值是add的地址，机制就是这么个机制。</p><p>还有就是有人喜欢把函数指针和typedef放一块看</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="keyword">typedef</span> (*FUN_POINT)(<span class="keyword">int</span>, <span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// FUN_POINT point;</span></span><br><span class="line"><span class="comment">// point = add;  // 为什么不能这么玩？</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    FUN_POINT funPoint;</span><br><span class="line">    funPoint = add;</span><br><span class="line"></span><br><span class="line">    funPoint(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    (*funPoint)(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>typedef就是重命名呀。好了，知道这么个机制，我们能做些什么？</p><p><strong>函数指针数组</strong></p><p>来看一个程序</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create_cmd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">retrieve_cmd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update_cmd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete_cmd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这就是函数指针数组</span></span><br><span class="line"><span class="keyword">int</span> (*crud_cmd[])(<span class="keyword">int</span>, <span class="keyword">int</span>) = {</span><br><span class="line">        create_cmd,</span><br><span class="line">        retrieve_cmd,</span><br><span class="line">        update_cmd,</span><br><span class="line">        delete_cmd</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> a = crud_cmd[<span class="number">1</span>](<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">int</span> b = (*crud_cmd + <span class="number">1</span>)(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>把函数，指针，数组，三个词放一块还是很有意思的，比如实现一个状态机？</p><p><strong>多态</strong></p><p>多态是面向对象的概念，C语言是面向过程的语言(我觉得这句话不正确)。C语言就不能实现多态了？且看下面一个没有实质作用的程序</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类 HUMANITY，基本特性 name，基本方法 intro</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HUMANITY</span> {</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">void</span> (*intro)(struct HUMANITY *);</span><br><span class="line">} HUMANITY;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HUMANITY的子类 TEACHER，多了一个属性 teachNo</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    HUMANITY humanity;</span><br><span class="line">    <span class="keyword">int</span> teachNo;</span><br><span class="line">} TEACHER;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TEACHER特有的 intro</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">teachIntro</span><span class="params">(HUMANITY *humanity)</span> </span>{</span><br><span class="line">    TEACHER *t = (TEACHER *) humanity;  <span class="comment">// 向下转型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I am a teacher. My name is %s and teachNo is %d\n"</span>, t->humanity.name, t->teachNo);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// HUMANITY的子类 STUDENT，多了一个属性 stuNo</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    HUMANITY humanity;</span><br><span class="line">    <span class="keyword">long</span> stuNo;</span><br><span class="line">} STUDENT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// STUDENT特有的 intro</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stuIntro</span><span class="params">(HUMANITY *humanity)</span> </span>{</span><br><span class="line">    STUDENT *s = (STUDENT *) humanity;  <span class="comment">// 向下转型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I am a student. My name is %s and stuNo is %ld\n"</span>, s->humanity.name, s->stuNo);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    TEACHER *t = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TEACHER));  <span class="comment">// 创建一个TEACHER对象</span></span><br><span class="line">    t->humanity.name = <span class="built_in">malloc</span>(<span class="number">12</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(t->humanity.name, <span class="string">"Wang"</span>);</span><br><span class="line">    t->humanity.intro = teachIntro;</span><br><span class="line">    t->teachNo = <span class="number">12</span>;</span><br><span class="line">    HUMANITY *teacher = (HUMANITY *) t;  <span class="comment">// 向上转型</span></span><br><span class="line">    (teacher->intro)(teacher);  <span class="comment">// 实际上是 TEACHER 特有方法</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(teacher->name);</span><br><span class="line">    <span class="built_in">free</span>(t);</span><br><span class="line"></span><br><span class="line">    STUDENT *s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(STUDENT));</span><br><span class="line">    s->humanity.name = <span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(s->humanity.name, <span class="string">"Sidney Ding"</span>);</span><br><span class="line">    s->humanity.intro = stuIntro;</span><br><span class="line">    s->stuNo = <span class="number">9999L</span>;</span><br><span class="line">    HUMANITY *student = (HUMANITY *) s;</span><br><span class="line">    (student->intro)(student);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(s->humanity.name);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">I am a teacher. My name is Wang and teachNo is 12</span></span><br><span class="line"><span class="comment">I am a student. My name is Sidney Ding and stuNo is 9999</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>此时是不是发现C语言变得有趣多了？面向对象而已，C语言这么强大的语言必拿下。在这个例子中，不免要思考一件事，向上转型和向下转型？因为子类多余的属性是放在父类后面的，所谓的转型，我们就当是内存截断好了，父类前面的内容必然是符合的，至于后面内容，也不会丢，毕竟还是占内存的。此时再将这个父类向下转型，不过就是扩张而已，恰巧后面的就是子类多出的属性占的内存。</p><h2 id="2-5-宏函数"><a href="#2-5-宏函数" class="headerlink" title="2.5 宏函数"></a>2.5 宏函数</h2><p>这个没啥好说，<code>#define</code>这玩意本省就是编译时替换，所以注意多加括号就好了，至于宏的一些技巧，例如拼接，之前也说过了</p><p>所以，就到这里了，以后想到啥好玩的，再加进来吧！</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;1-初始化&quot;&gt;&lt;a href=&quot;#1-初始化&quot; class=&quot;headerlink&quot; title=&quot;1 初始化&quot;&gt;&lt;/a&gt;1 初始化&lt;/h1&gt;&lt;p&gt;对象的声明可以通过初始化的过程获得初始值。主要就是见识一下C/Cpp里面几种初始化的形式，免得大惊小怪&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// C语言的初始化还好，怎么着都得有个 =&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = {&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c = {&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;};  &lt;span class=&quot;comment&quot;&gt;// scalar initialization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], b;} MyType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MyType mm = {{&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;}, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* ptr = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Cpp多了一个花样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] {&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b {&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], b;} MyType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MyType mm {{&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;}, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; *m = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; *m1 {&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyType()};&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C/Cpp" scheme="https://sidneygod.github.io/categories/C-Cpp/"/>
    
    
      <category term="C" scheme="https://sidneygod.github.io/tags/C/"/>
    
      <category term="Cpp" scheme="https://sidneygod.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>[Relearning C/Cpp] Array and Pointer</title>
    <link href="https://sidneygod.github.io/posts/61dcf29f/"/>
    <id>https://sidneygod.github.io/posts/61dcf29f/</id>
    <published>2021-04-17T07:47:30.000Z</published>
    <updated>2021-04-26T14:54:34.271Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>数组和指针一般不能分开，尤其是C语言里面，让人又爱又恨的东西..而一谈到这俩玩意就得画图..</p><h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1 数组"></a>1 数组</h1><p>对数组下定义，抱歉，我不会。但是我有词典，a way of organizing and storing related data in a computer memory。这么一看就清晰多了</p><p>元素类型为char的数组可以如下声明</p><p><code>int c[6];  // 可以存6个整数的数组</code></p><p>在声明中<code>[]</code>表示xxx的数组，所有数组下标都是从0开始，计算机中很多东西都是从0开始，为什么？搜索一下吧。数组的大小，就是那个6，必须得是个常量表达式，这么看，数组一旦定义好了大小就定下来了呀</p><p>数组名也是标识符，也要符合规则，不能和其他变量重名</p><p>数组初始化的时候可以部分初始化，也可以整体初始化；赋值的时候不能整体赋值，只能单个元素得赋值(数组拷贝，那个不算)</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>};  <span class="comment">// 这样就是整体初始化，可以不用写数组大小</span></span><br><span class="line"><span class="comment">// arr = {5, 4, 3, 2, 1};  // 不带这样的赋值</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">4</span>;  <span class="comment">// 只能单个赋值</span></span><br></pre></td></tr></tbody></table></figure><p>另外有一点就是大家常说的，数组是在内存里面开辟一块连续的空间</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>};</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < <span class="number">5</span>; ++i) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a[%d]'s addr is %p\n"</span>, i, &arr[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">a[0]'s addr is 000000000062FE00</span></span><br><span class="line"><span class="comment">a[1]'s addr is 000000000062FE04</span></span><br><span class="line"><span class="comment">a[2]'s addr is 000000000062FE08</span></span><br><span class="line"><span class="comment">a[3]'s addr is 000000000062FE0C</span></span><br><span class="line"><span class="comment">a[4]'s addr is 000000000062FE10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到都是4个4个往上加的连续地址</p><p>再说多维数组，多维数组给我们的直观感受是这样的</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如这是个二维的，那就应该是个平面</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] = {</span><br><span class="line">    {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>},</span><br><span class="line">    {<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>}</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>但是显然内存不是个平面，还是个线性的</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] = {</span><br><span class="line">            {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>},</span><br><span class="line">            {<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>}</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < <span class="number">2</span>; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j < <span class="number">3</span>; ++j) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"a[%d][%d]'s addr is %p\n"</span>, i, j, &arr[i][j]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">a[0][0]'s addr is 000000000062FE00</span></span><br><span class="line"><span class="comment">a[0][1]'s addr is 000000000062FE04</span></span><br><span class="line"><span class="comment">a[0][2]'s addr is 000000000062FE08</span></span><br><span class="line"><span class="comment">a[1][0]'s addr is 000000000062FE0C</span></span><br><span class="line"><span class="comment">a[1][1]'s addr is 000000000062FE10</span></span><br><span class="line"><span class="comment">a[1][2]'s addr is 000000000062FE14</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>汇编出来看看</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp</span><br><span class="line">    ...</span><br><span class="line">    .seh_endprologue</span><br><span class="line">    call    __main</span><br><span class="line">    movl    $1, -32(%rbp)</span><br><span class="line">    movl    $2, -28(%rbp)</span><br><span class="line">    movl    $3, -24(%rbp)</span><br><span class="line">    movl    $4, -20(%rbp)</span><br><span class="line">    movl    $5, -16(%rbp)</span><br><span class="line">    movl    $6, -12(%rbp)</span><br><span class="line">    movl    $0, -4(%rbp)</span><br><span class="line">    jmp    .L2</span><br><span class="line">...</span><br><span class="line">.L2:</span><br><span class="line">    cmpl    $1, -4(%rbp)</span><br><span class="line">    jle    .L5</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    addq    $64, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>现在对(%rbp)前面的数字就有那么点感觉了哈，<code>-8(%rbp)</code>去哪了？是j呀</p><p>数组里面还有一个特殊的，就是字符数组，在C语言里面就指望这个当字符串了</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"hello world!"</span>;</span><br><span class="line">    <span class="keyword">char</span> arr[] = {<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">' '</span>, <span class="string">'w'</span>, <span class="string">'o'</span>, <span class="string">'r'</span>, <span class="string">'l'</span>, <span class="string">'d'</span>, <span class="string">'!'</span>};</span><br><span class="line">    <span class="keyword">char</span> tmp[] = {<span class="string">'h'</span>, <span class="string">'\0'</span>};</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < <span class="keyword">sizeof</span>(str) / <span class="keyword">sizeof</span>(<span class="keyword">char</span>); ++i) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(%c)"</span>, str[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%s\n"</span>, str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">char</span>); ++i) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(%c)"</span>, arr[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%s\n"</span>, arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">(h)(e)(l)(l)(o)( )(w)(o)(r)(l)(d)(!)( )</span></span><br><span class="line"><span class="comment">hello world!</span></span><br><span class="line"><span class="comment">(h)(e)(l)(l)(o)( )(w)(o)(r)(l)(d)(!)</span></span><br><span class="line"><span class="comment">hello world!hello world!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>汇编出来瞅瞅</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp</span><br><span class="line">    ...</span><br><span class="line">    call    __main</span><br><span class="line">    movabsq    $8031924123371070824, %rax  # 8个字节</span><br><span class="line">    movq    %rax, -21(%rbp)</span><br><span class="line">    movl    $560229490, -13(%rbp)  # 4个字节 和前面8个加起来就是 hello world!</span><br><span class="line">    movb    $0, -9(%rbp)     # 最后面的\0 到这里为止应该是str的定义及声明</span><br><span class="line">    movb    $104, -33(%rbp)  # h</span><br><span class="line">    movb    $101, -32(%rbp)</span><br><span class="line">    movb    $108, -31(%rbp)</span><br><span class="line">    movb    $108, -30(%rbp)</span><br><span class="line">    movb    $111, -29(%rbp)</span><br><span class="line">    movb    $32, -28(%rbp)</span><br><span class="line">    movb    $119, -27(%rbp)</span><br><span class="line">    movb    $111, -26(%rbp)</span><br><span class="line">    movb    $114, -25(%rbp)</span><br><span class="line">    movb    $108, -24(%rbp)</span><br><span class="line">    movb    $100, -23(%rbp)</span><br><span class="line">    movb    $33, -22(%rbp)   # ! 到这里位置应该是arr的</span><br><span class="line">    movb    $104, -35(%rbp) # h</span><br><span class="line">    movb    $0, -34(%rbp)   # 这里就是tmp的了</span><br><span class="line">    movl    $0, -4(%rbp)</span><br><span class="line">    jmp    .L2</span><br><span class="line">.L3:</span><br></pre></td></tr></tbody></table></figure><p>从这段程序至少可以看出，字符数组要想编程字符串后面必须有<code>'\0'</code>，字符串不论何种形式，内存占的大小是一样的，但是用字符数组去初始化字符串通常会比较慢(好像每种指令执行速度不一样，这句话不一定对哦)</p><p>还有一个C和C++的字符串是不一样的，它们之间的转换</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">string</span> cppString = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="comment">//char* cString = "cstr";  // ISO C++ 11不允许这么干</span></span><br><span class="line">    <span class="keyword">char</span> cArr[] = <span class="string">"cArr"</span>;</span><br><span class="line">    <span class="keyword">char</span> *cString = cArr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *tmpStr = cppString.c_str();</span><br><span class="line">    <span class="built_in">string</span> aStr = cString;</span><br><span class="line">    <span class="built_in">string</span> bStr = cArr;</span><br><span class="line">    <span class="built_in">string</span> cStr = tmpStr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *tmpCStr = <span class="keyword">static_cast</span><<span class="keyword">char</span> *>(<span class="built_in">malloc</span>(<span class="number">10</span>));</span><br><span class="line">    cppString.copy(tmpCStr, cppString.length(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> tmpCArr[<span class="number">10</span>];</span><br><span class="line">    cppString.copy(tmpCArr, cppString.length(), <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> *cDataStr = cppString.data();  <span class="comment">// C++11报错 要const，C++17没事</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>数组单个玩没意思，还是需要结合指针玩</p><h1 id="2-指针"><a href="#2-指针" class="headerlink" title="2 指针"></a>2 指针</h1><p>先不要把这玩意想象成指针</p><img style="zoom: 33%;" data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/watch.webp"><p>就当成一个数据类型，这个数据类型是存地址的，地址是啥，就一串数字，说白了就是存了一串数字。从这里我们就知道了指针的大小了，地址是无符号数，那么32位的程序就是4个字节，64位的程序就是8个字节</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面三个输出都是8 我是64位的</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%llu\n"</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%llu\n"</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%llu\n"</span>, <span class="keyword">sizeof</span>(<span class="keyword">long</span>*));</span><br></pre></td></tr></tbody></table></figure><p>再看指针的声明定义啥的</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>* iP = &a;  <span class="comment">// 我们称iP为 "指向"a的指针；&取地址符号只能应用于内存中的对象，不能用作表达式，常量，register的变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, *iP);  <span class="comment">// 这里的*表示间接寻址或间接引用，访问指针所指向的对象</span></span><br></pre></td></tr></tbody></table></figure><p>指针只能指向某个特定数据类型的对象，但是void型指针比较特殊，可以指向任意数据类型的对象，但它不能间接引用自身。注意读法<font color="red"><strong>“aa指向bb的指针”</strong></font>(读法来自K&R的《C程序设计语言》)，读不好，后面就得绕进去</p><h2 id="2-1-指针和数组"><a href="#2-1-指针和数组" class="headerlink" title="2.1 指针和数组"></a>2.1 指针和数组</h2><p>通过数组下标所能完成的任何任务都能通过指针来实现。一般来说，用指针实现的程序比用数组下标实现的程序执行速度更快(现在优化得两者差不多了)</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> arr[] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>};</span><br><span class="line">    <span class="keyword">int</span>* pInt = &arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span>* pArr = arr;</span><br><span class="line"></span><br><span class="line">    pInt = pInt + <span class="number">1</span>;</span><br><span class="line">    pArr = pArr + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>汇编一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp</span><br><span class="line">    ...</span><br><span class="line">    .seh_endprologue</span><br><span class="line">    call    __main</span><br><span class="line">    movl    $1, -64(%rbp)  # arr[0]</span><br><span class="line">    movl    $2, -60(%rbp)</span><br><span class="line">    movl    $3, -56(%rbp)</span><br><span class="line">    movl    $4, -52(%rbp)</span><br><span class="line">    movl    $5, -48(%rbp)</span><br><span class="line">    movl    $6, -44(%rbp)</span><br><span class="line">    movl    $7, -40(%rbp)</span><br><span class="line">    movl    $8, -36(%rbp)</span><br><span class="line">    movl    $9, -32(%rbp)</span><br><span class="line">    leaq    -64(%rbp), %rax  # load effective address</span><br><span class="line">    movq    %rax, -8(%rbp)   # pInt</span><br><span class="line">    leaq    -64(%rbp), %rax</span><br><span class="line">    movq    %rax, -16(%rbp)  # pArr</span><br><span class="line">    addq    $4, -8(%rbp)     # 地址加立即数4，因为int是4字节的</span><br><span class="line">    addq    $8, -16(%rbp)    # 地址加立即数8，两个4呀</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    addq    $96, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>所以从汇编的角度来看arr就是指向arr[0]的地址，指针加n，实际上就是<code>指针的值(地址) + n * sizeof(数据类型)</code>，那么减法应当也是一样咯，地址往前往后的区别。</p><p>知道这层关系之后，再来讨论一下指针和多维数组之间的关系</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = {</span><br><span class="line">            {<span class="number">1</span>, <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>},</span><br><span class="line">            {<span class="number">5</span>, <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>},</span><br><span class="line">            {<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>}</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pArr是指向int的指针的数组 指针数组 pArr是个存放int型指针的一维数组</span></span><br><span class="line">    <span class="keyword">int</span> *pArr[<span class="number">3</span>] = {arr[<span class="number">0</span>], arr[<span class="number">1</span>] + <span class="number">1</span>, arr[<span class="number">2</span>] + <span class="number">2</span>};</span><br><span class="line">    <span class="comment">// int *(pArr[3]) = {arr[0], arr[1] + 1, arr[2] + 2};</span></span><br><span class="line">    <span class="comment">// p1是指向4 int数组的指针 数组指针 p1是个指针，指向的是一个数组，这样说，可能有点不明白，换个方式。</span></span><br><span class="line">    <span class="comment">// 把arr当作一维数组，存的就是4个数组的首地址，现在再看p1是个指针，指向存有4个数组首地址的数组的首地址</span></span><br><span class="line">    <span class="keyword">int</span> (*p1)[<span class="number">4</span>] = arr;</span><br><span class="line">    <span class="comment">// int (*p1)[] = arr;  // 4是可以去掉的，因为arr很明确</span></span><br><span class="line">    <span class="comment">// p2是指向指向3 int的指针的数组的指针 指向指针数组的指针</span></span><br><span class="line">    <span class="keyword">int</span> *(*p2)[<span class="number">3</span>] = &pArr;</span><br><span class="line">    <span class="comment">// int* (*p2)[] = &pArr;</span></span><br><span class="line">    <span class="comment">// p3是指向 指向4 int数组的指针 的指针，指向数组指针的指针，二级指针</span></span><br><span class="line">    <span class="keyword">int</span> (**p3)[<span class="number">4</span>] = &p1;</span><br><span class="line">    <span class="comment">// int (**p3)[] = &p1;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// p4是指向int的指针 arr == &arr[0][0]</span></span><br><span class="line">    <span class="keyword">int</span> *p4 = *arr;</span><br><span class="line">    <span class="comment">// int* p2 = arr;  这会有warning initialization of 'int *' from incompatible pointer type 'int (*)[4]'</span></span><br><span class="line"></span><br><span class="line">    printf(<span class="string">"%d\n"</span>, *(pArr[<span class="number">1</span>] + <span class="number">0</span>));       <span class="comment">// 6</span></span><br><span class="line">    printf(<span class="string">"%d\n"</span>, *(*(p1 + <span class="number">1</span>) + <span class="number">1</span>));     <span class="comment">// 6</span></span><br><span class="line">    printf(<span class="string">"%d\n"</span>, *(*(*(p2) + <span class="number">1</span>) + <span class="number">0</span>));  <span class="comment">// 6</span></span><br><span class="line">    printf(<span class="string">"%d\n"</span>, *(*(*p3 + <span class="number">1</span>) + <span class="number">1</span>));    <span class="comment">// 6</span></span><br><span class="line">    printf(<span class="string">"%d\n"</span>, *(p4 + <span class="number">5</span>));            <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>汇编一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp              # push当然是入栈的意思</span><br><span class="line">    .seh_pushreg    %rbp</span><br><span class="line">    movq    %rsp, %rbp        # rbp是堆栈基指针 rsp是栈顶指针 现在它俩对齐了</span><br><span class="line">    .seh_setframe    %rbp, 0</span><br><span class="line">    subq    $160, %rsp        # 给变量开辟空间 160个字节</span><br><span class="line">    .seh_stackalloc    160</span><br><span class="line">    .seh_endprologue</span><br><span class="line">    call    __main</span><br><span class="line">    movl    $1, -80(%rbp)     # arr[0][0]</span><br><span class="line">    movl    $2, -76(%rbp)</span><br><span class="line">    movl    $3, -72(%rbp)</span><br><span class="line">    movl    $4, -68(%rbp)</span><br><span class="line">    movl    $5, -64(%rbp)</span><br><span class="line">    movl    $6, -60(%rbp)</span><br><span class="line">    movl    $7, -56(%rbp)</span><br><span class="line">    movl    $8, -52(%rbp)</span><br><span class="line">    movl    $9, -48(%rbp)</span><br><span class="line">    movl    $10, -44(%rbp)</span><br><span class="line">    movl    $11, -40(%rbp)</span><br><span class="line">    movl    $12, -36(%rbp)    # arr[2][3]</span><br><span class="line">    leaq    -80(%rbp), %rax   # 将-80(%rbp)的地址存到%rax</span><br><span class="line">    movq    %rax, -112(%rbp)  # pArr[0] = -112(%rbp) = -80(%rbp)的地址</span><br><span class="line">    leaq    -80(%rbp), %rax</span><br><span class="line">    addq    $16, %rax</span><br><span class="line">    addq    $4, %rax</span><br><span class="line">    movq    %rax, -104(%rbp)  # pArr[1] = -104(%rbp) = (-80 + 16 + 4)(%rbp)的地址</span><br><span class="line">    leaq    -80(%rbp), %rax</span><br><span class="line">    addq    $32, %rax</span><br><span class="line">    addq    $8, %rax</span><br><span class="line">    movq    %rax, -96(%rbp)   # pArr[2] = -96(%rbp) = (-80 + 32 + 8)(%rbp)的地址</span><br><span class="line">    leaq    -80(%rbp), %rax</span><br><span class="line">    movq    %rax, -120(%rbp)  # p1 = -120(%rbp) = -80(%rbp)的地址</span><br><span class="line">    leaq    -112(%rbp), %rax</span><br><span class="line">    movq    %rax, -8(%rbp)    # p2 = -8(%rbp) =  -112(%rbp)的地址</span><br><span class="line">    leaq    -120(%rbp), %rax</span><br><span class="line">    movq    %rax, -16(%rbp)   # p3 = -16(%rbp) = -120(%rbp)的地址</span><br><span class="line">    leaq    -80(%rbp), %rax</span><br><span class="line">    movq    %rax, -24(%rbp)   # p4 = -24(%rbp) = -80(%rbp)的地址</span><br><span class="line">    movq    -104(%rbp), %rax</span><br><span class="line">    movl    (%rax), %eax</span><br><span class="line">    movl    %eax, %edx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    movq    -120(%rbp), %rax</span><br><span class="line">    addq    $16, %rax</span><br><span class="line">    addq    $4, %rax</span><br><span class="line">    movl    (%rax), %eax</span><br><span class="line">    movl    %eax, %edx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    movq    -8(%rbp), %rax</span><br><span class="line">    addq    $8, %rax</span><br><span class="line">    movq    (%rax), %rax</span><br><span class="line">    movl    (%rax), %eax</span><br><span class="line">    movl    %eax, %edx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    movq    -16(%rbp), %rax</span><br><span class="line">    addq    $8, %rax</span><br><span class="line">    movq    (%rax), %rax</span><br><span class="line">    addq    $16, %rax</span><br><span class="line">    movl    (%rax), %eax</span><br><span class="line">    movl    %eax, %edx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    addq    $160, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>再来一张图</p><img data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/pointer.svg"><p>这整个搞完，发现一个很重要的点，就是当前指针的步长是多少，当前指针存储地址是多少，这样就可以无限递归推算下去。</p><p>PS：没系统学过汇编，可能表述的有点问题..</p><h2 id="2-2-指针运算"><a href="#2-2-指针运算" class="headerlink" title="2.2 指针运算"></a>2.2 指针运算</h2><p>再探讨一下比较好玩的事，常量指针和指针常量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有const的话，我们读作 变量a；加了const，我们读作 常量a</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">char</span> <span class="keyword">const</span> b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量p1是指向 常量char 的指针，变量p1，那么p1的值可以变，但是p1指向的值不能变</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *p1;</span><br><span class="line"><span class="comment">// 变量p1是指向 char常量 的指针</span></span><br><span class="line"><span class="keyword">char</span> <span class="keyword">const</span> *p1;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 常量p2是指向 char变量 的指针，常量p2，那么p2的值不能变，但是p2指向的值可以变</span></span><br><span class="line"><span class="keyword">char</span>* <span class="keyword">const</span> p2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量p3是指向 常量char 的指针，都是常量，那就是都不能变</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> p3;</span><br><span class="line"><span class="keyword">char</span> <span class="keyword">const</span> * <span class="keyword">const</span> p3;  <span class="comment">// 看起来很奇怪对不对 但是能够读得通 那就没毛病</span></span><br><span class="line"></span><br><span class="line">p1 = &a;  <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// *p1 = 'a';   Read-only variable is not assignable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// p2 = &a;  Cannot assign to variable 'p3' with const-qualified type 'char *const'</span></span><br><span class="line">*p2 = <span class="string">'a'</span>;  <span class="comment">// OK</span></span><br></pre></td></tr></tbody></table></figure><p>啥常量指针，指针常量，那第三个咋读？常量指针常量？精简就容易带来误解</p><p>好了，那只是个题外话，接下来说说，指针相关的计算，就是加减乘除啥的</p><p><strong>指针和基本数据类型</strong></p><p>从上面我们了解到，指针和int可以做加减，实际就是指针存储的值做偏移，比如下面的程序，一点毛病没有</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> arr[] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line">    <span class="keyword">int</span> *pArr = arr;</span><br><span class="line">    pArr++;</span><br><span class="line">    pArr--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>问题1：那有个好玩的数据类型，void，这个呢？可以与int做加减吗？根据搜索得知</p><blockquote><p>void* pvoid;</p><p>pvoid++; // ANSI：错误</p><p>pvoid += 1; // ANSI：错误</p><p>pvoid++; //GNU：正确</p><p>pvoid += 1; //GNU：正确</p><p>(char *) pvoid++; // ANSI：正确；GNU：正确</p><p>(char *) pvoid += 1; // ANSI：错误；GNU：正确</p></blockquote><p>这么说，ANSI限制贼严格..切换成ANSI全报红了..还是GNU比较奔放。通过实验也可以发现，在GNU下，<code>sizeof(void)</code>的值是1</p><p>问题2：能和浮点数相加吗？能和char相加吗？能和long相加吗？</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>};</span><br><span class="line"><span class="keyword">int</span>* pInt = arr;</span><br><span class="line"><span class="comment">// pInt += 2.1;  // Invalid operands to binary expression ('int *' and 'double')</span></span><br><span class="line">pInt += <span class="string">'0'</span>;</span><br><span class="line">pInt += <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">short</span> s = <span class="number">1</span>;</span><br><span class="line">pInt += s;</span><br></pre></td></tr></tbody></table></figure><p>答案还是比较容易想到的</p><p>问题3：指针可以乘除吗？</p><p>Invalid operands to binary expression (‘int *’ and ‘int’)。我只能说隐式转换不成功</p><p><strong>指针和指针</strong></p><p>问题1：指针和指针相加会有什么特效？</p><p>Invalid operands to binary expression (‘int *’ and ‘int *’)</p><p>当然也不要想着乘除了，存在必合理，不存在那肯定就是不合理了</p><p>问题2：指针和指针相减会有什么特效？</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>};</span><br><span class="line"><span class="keyword">int</span>* pInt1 = arr;</span><br><span class="line"><span class="keyword">int</span>* pInt2 = arr + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> diff = pInt2 - pInt1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%llu\n"</span>, diff);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, pInt1 - pInt2);  <span class="comment">// 很容易想到吧</span></span><br></pre></td></tr></tbody></table></figure><p>这是同类型的，那不同类型的呢？</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">unsigned</span> u;</span><br><span class="line"><span class="keyword">char</span> b;</span><br><span class="line"><span class="keyword">long</span> c;</span><br><span class="line"><span class="keyword">double</span> d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* pa = &a;</span><br><span class="line"><span class="keyword">unsigned</span> *pu = &u;</span><br><span class="line"><span class="keyword">char</span>* pb = &b;</span><br><span class="line"><span class="keyword">long</span>* pc = &c;</span><br><span class="line"><span class="keyword">double</span>* pd = &d;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pa - pb;  'int *' and 'char *' are not pointers to compatible types</span></span><br><span class="line"><span class="comment">// pa - pu;</span></span><br><span class="line"><span class="comment">// pa - pc;</span></span><br><span class="line"><span class="comment">// pa - pd;</span></span><br></pre></td></tr></tbody></table></figure><p>这报的错叫aa和bb不是指向兼容的指针，难道还有类型不一样，但是类型兼容的指针？指针减一下就知道是不是同类型的了，不是编译都过不了</p><p><strong>指针逻辑运算</strong></p><p>不打算研究那么多了，指针能够比较大小吗？</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line"><span class="keyword">int</span> *pInt1 = arr;</span><br><span class="line"><span class="keyword">int</span> *pInt2 = arr + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pInt1 < pInt2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pInt1 < <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pInt1 < <span class="number">0xFFFFFFFFFF</span>);  <span class="comment">// Ordered comparison between pointer and integer ('int *' and 'long long')</span></span><br></pre></td></tr></tbody></table></figure><p>汇编一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp</span><br><span class="line">    .seh_pushreg    %rbp</span><br><span class="line">    movq    %rsp, %rbp</span><br><span class="line">    .seh_setframe    %rbp, 0</span><br><span class="line">    subq    $64, %rsp</span><br><span class="line">    .seh_stackalloc    64</span><br><span class="line">    .seh_endprologue</span><br><span class="line">    call    __main</span><br><span class="line">    movl    $10, -28(%rbp)    # arr[0]</span><br><span class="line">    movl    $2, -24(%rbp)     # arr[1]</span><br><span class="line">    movl    $3, -20(%rbp)     # arr[2]</span><br><span class="line">    leaq    -28(%rbp), %rax</span><br><span class="line">    movq    %rax, -8(%rbp)   # pInt1</span><br><span class="line">    leaq    -28(%rbp), %rax</span><br><span class="line">    addq    $4, %rax</span><br><span class="line">    movq    %rax, -16(%rbp)  # pInt2</span><br><span class="line">    movq    -8(%rbp), %rax</span><br><span class="line">    cmpq    -16(%rbp), %rax  # 直接拿存储的地址进行比较</span><br><span class="line">    setb    %al</span><br><span class="line">    movzbl    %al, %eax</span><br><span class="line">    movl    %eax, %edx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    movl    $0, %edx              # 这应该是被优化了 都不比较了</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    movabsq    $1099511627774, %rax</span><br><span class="line">    cmpq    %rax, -16(%rbp)       # 拿地址和数字进行比较</span><br><span class="line">    setbe    %al</span><br><span class="line">    movzbl    %al, %eax</span><br><span class="line">    movl    %eax, %edx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    addq    $64, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>总结一下</p><blockquote><p>有效的指针运算包括相同类型指针之间的赋值运算；指针同整数之间的加法或减法运算；指向相同数组中元素的两个指针间的减法或比较运算；将指针赋值为0或指针与0之间的比较运算。其他所有形式的指针运算都是非法的，指针之间加减乘除，移位或屏蔽运算；指针同float或double类型之间的加法；不经强制类型转换而直接将指向一种类型对象的指针赋值给指向另一种类型对象的指针运算(两个指针之一是void*类型的情况除外)</p></blockquote><p>至于函数指针，指针函数这俩玩意放到函数那块再讨论</p><h1 id="3-引用"><a href="#3-引用" class="headerlink" title="3 引用"></a>3 引用</h1><p>引用这个概念是Cpp的，C没有，在Cpp的世界里，指针与引用是分不开的</p><p>和指针类似，引用作为对象的别名存放的也是对象的机器地址，与指针相比，引用不会带来额外的开销，引用与指针的却别主要包括：</p><ul><li><p>访问引用与访问对象本身从语法形式上是一样的</p></li><li><p>引用所引的永远是一开始初始化的那个对象</p></li><li><p>不存在“空引用”，我们可以认为引用一定对应着某个对象</p></li></ul><p>引用实际上是对象的别名。引用最重要的用途是作为函数的实参或返回值，此外它也被用于重载运算符</p><p>左值引用：引用那些我们希望改变的对象</p><p>const引用：引用那些我们不希望改变值的对象(比如常量)</p><p>右值引用：所引对象的值在我们使用之后就无需保留了(比如临时变量)</p><p>前两种都叫做左值引用</p><h2 id="3-1-左值引用"><a href="#3-1-左值引用" class="headerlink" title="3.1 左值引用"></a>3.1 左值引用</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>& r = i;</span><br><span class="line">    <span class="keyword">int</span> ii = r;</span><br><span class="line">    r = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d, %d, %p\n"</span>, i, r, ii, &r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">4, 4, 1, 000000000064fe10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>说明引用是有地址的，引用和(*p)是很像的，但是引用这玩意比较智能一点，汇编一波</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp</span><br><span class="line">    ...</span><br><span class="line">    .seh_endprologue</span><br><span class="line">    call    __main</span><br><span class="line">    movl    $1, -16(%rbp)     # int i = 1;</span><br><span class="line">    leaq    -16(%rbp), %rax</span><br><span class="line">    movq    %rax, -8(%rbp)    # int& r = i;</span><br><span class="line">    movq    -8(%rbp), %rax</span><br><span class="line">    movl    (%rax), %eax</span><br><span class="line">    movl    %eax, -12(%rbp)   # int ii = r;</span><br><span class="line">    movq    -8(%rbp), %rax</span><br><span class="line">    movl    $4, (%rax)        # r = 4;</span><br><span class="line">    movq    -8(%rbp), %rax</span><br><span class="line">    movl    (%rax), %ecx      # i</span><br><span class="line">    movl    -16(%rbp), %eax   # r</span><br><span class="line">    movl    -12(%rbp), %r8d   # ii</span><br><span class="line">    movq    -8(%rbp), %rdx</span><br><span class="line">    movq    %rdx, 32(%rsp)    # &r</span><br><span class="line">    movl    %r8d, %r9d</span><br><span class="line">    movl    %ecx, %r8d</span><br><span class="line">    movl    %eax, %edx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    _ZL6printfPKcz</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    addq    $64, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>再把引用换成指针</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>* r = &i;</span><br><span class="line">    <span class="keyword">int</span> ii = *r;</span><br><span class="line">    *r = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d, %d, %p\n"</span>, i, *r, ii, &(*r));  <span class="comment">// 这才是引用的本质</span></span><br><span class="line">    <span class="comment">// printf("%d, %d, %d, %p\n", i, *r, ii, &r);  // 这样汇编会少一句 movl    %eax, %edx</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">4, 4, 1, 000000000064fe10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>汇编一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp</span><br><span class="line">    ...</span><br><span class="line">    .seh_endprologue</span><br><span class="line">    call    __main</span><br><span class="line">    movl    $1, -16(%rbp)</span><br><span class="line">    leaq    -16(%rbp), %rax</span><br><span class="line">    movq    %rax, -8(%rbp)</span><br><span class="line">    movq    -8(%rbp), %rax</span><br><span class="line">    movl    (%rax), %eax</span><br><span class="line">    movl    %eax, -12(%rbp)</span><br><span class="line">    movq    -8(%rbp), %rax</span><br><span class="line">    movl    $4, (%rax)</span><br><span class="line">    movq    -8(%rbp), %rax</span><br><span class="line">    movl    (%rax), %ecx</span><br><span class="line">    movl    -16(%rbp), %eax</span><br><span class="line">    movl    -12(%rbp), %r8d</span><br><span class="line">    movq    -8(%rbp), %rdx</span><br><span class="line">    movq    %rdx, 32(%rsp)</span><br><span class="line">    movl    %r8d, %r9d</span><br><span class="line">    movl    %ecx, %r8d</span><br><span class="line">    movl    %eax, %edx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    _ZL6printfPKcz</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    addq    $64, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>汇编出来的代码都一毛一样，所以，你懂我意思吧。</p><p><strong>为了确保引用对应某个对象，必须初始化引用</strong></p><p>再来看一个牛逼一点的常量引用</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 常量引用的本质 汇编代码是一样的</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span>& r = i;</span><br><span class="line">    <span class="keyword">int</span>* <span class="keyword">const</span> p = &i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// r = &i;  Cannot assign to variable 'r' with const-qualified type 'const int &'</span></span><br><span class="line">    <span class="comment">// p = &t;  Cannot assign to variable 'p' with const-qualified type 'int *const'</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span>& r1 = <span class="number">1</span>;  <span class="comment">// 这个稍微强一点 只不过是少写点代码而已</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-右值引用"><a href="#3-2-右值引用" class="headerlink" title="3.2 右值引用"></a>3.2 右值引用</h2><p>右值引用对应一个临时对象，用户可以修改这个对象，并且认定这个对象以后不会用到了</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// int a = 10;</span></span><br><span class="line">    <span class="comment">// int&& rr = a;  // Rvalue reference to type 'int' cannot bind to lvalue of type 'int'</span></span><br><span class="line">    <span class="keyword">int</span> && rr = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span>&& rr1 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>rr是个临时变量，不允许绑定左值，只允许绑定右值。虽然可以声明定义const右值引用，但是一般不用，因为右值引用就是用来修改的，加了const就不能改了</p><p>右值引用和const左值引用都能绑定右值，但是它们的目标完全不同</p><ul><li><p>右值引用实现了一种破坏性读取，某些数据本来需要拷贝，使用右值引用可以优化其性能</p></li><li><p>const左值引用的目的是保护参数内容不被修改</p></li></ul><p>为什么说提高性能</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">swap1</span>(<span class="title">T</span>& <span class="title">a</span>, <span class="title">T</span>& <span class="title">b</span>) {</span></span><br><span class="line">    T tmp = <span class="keyword">static_cast</span><T&&>(a);</span><br><span class="line">    a = <span class="keyword">static_cast</span><T&&>(b);</span><br><span class="line">    b = <span class="keyword">static_cast</span><T&&>(tmp);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">swap2</span>(<span class="title">T</span>& <span class="title">a</span>, <span class="title">T</span>& <span class="title">b</span>) {</span></span><br><span class="line">    T tmp = <span class="built_in">std</span>::move(a);</span><br><span class="line">    a = <span class="built_in">std</span>::move(b);</span><br><span class="line">    b = <span class="built_in">std</span>::move(tmp);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>move函数并没有移动，而是将左值强转为右值。这里需要插播一下，何为左值，何为右值</p><blockquote><p>右值是”不能作为左值的值”，比如像函数返回值一样的临时值。右值的定义多么清晰，只要知道什么是左值就行了。当考虑对象的寻址，拷贝，移动等操作时，有两种属性特别关键</p><ul><li>有身份，在程序中有对象的名字，或者指向该对象的指针，或该对象的引用，这样我们就能判断两个对象是否相等或对象值是否发生改变</li><li>可移动，能把对象的内容移出来(比如，能把它的值移动到其他某处，剩下的对象处于合法但未指定状态，与拷贝是有差别的)</li></ul><p>根据排列组合可知，有身份和可移动可以组合成四种形式，但是既没有身份又不可移动的对象不重要。</p><p>左值：有身份 && !可移动</p><p>特别值：有身份 && 可移动</p><p>纯右值：!有身份 && 可移动<br>其中左值和特别值又称泛左值(有身份)，纯右值和特别值又称右值(可移动)。在实际编程中考虑左值和右值就够了，一条表达式要么是左值，要么是右值，不可能两者都是</p></blockquote><p>程序一：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="keyword">static_cast</span><<span class="keyword">int</span>&&>(a);</span><br><span class="line">    a = <span class="keyword">static_cast</span><<span class="keyword">int</span>&&>(b);</span><br><span class="line">    b = <span class="keyword">static_cast</span><<span class="keyword">int</span>&&>(tmp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d, %d\n"</span>, a, b, tmp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">2, 1, 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>汇编一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp</span><br><span class="line">    movq    %rsp, %rbp</span><br><span class="line">    subq    $48, %rsp</span><br><span class="line">    call    __main</span><br><span class="line">    movl    $1, -4(%rbp)       # int a = 1;</span><br><span class="line">    movl    $2, -8(%rbp)       # int b = 2;</span><br><span class="line">    movl    -4(%rbp), %eax     # %eax临时变量的角色 1</span><br><span class="line">    movl    %eax, -12(%rbp)    # int tmp = 1;</span><br><span class="line">    movl    -8(%rbp), %eax     # %eax的值换成了2</span><br><span class="line">    movl    %eax, -4(%rbp)     # a = 2;</span><br><span class="line">    movl    -12(%rbp), %eax    # 临时变量又换成了 1</span><br><span class="line">    movl    %eax, -8(%rbp)     # b = 1;</span><br><span class="line">    movl    -12(%rbp), %ecx</span><br><span class="line">    movl    -8(%rbp), %edx</span><br><span class="line">    movl    -4(%rbp), %eax</span><br><span class="line">    movl    %ecx, %r9d</span><br><span class="line">    movl    %edx, %r8d</span><br><span class="line">    movl    %eax, %edx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    _ZL6printfPKcz</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    addq    $48, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>程序二：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d, %d\n"</span>, a, b, tmp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>汇编一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp</span><br><span class="line">    movq    %rsp, %rbp</span><br><span class="line">    subq    $48, %rsp</span><br><span class="line">    call    __main</span><br><span class="line">    movl    $1, -4(%rbp)</span><br><span class="line">    movl    $2, -8(%rbp)</span><br><span class="line">    movl    -4(%rbp), %eax</span><br><span class="line">    movl    %eax, -12(%rbp)</span><br><span class="line">    movl    -8(%rbp), %eax</span><br><span class="line">    movl    %eax, -4(%rbp)</span><br><span class="line">    movl    -12(%rbp), %eax</span><br><span class="line">    movl    %eax, -8(%rbp)</span><br><span class="line">    movl    -12(%rbp), %ecx</span><br><span class="line">    movl    -8(%rbp), %edx</span><br><span class="line">    movl    -4(%rbp), %eax</span><br><span class="line">    movl    %ecx, %r9d</span><br><span class="line">    movl    %edx, %r8d</span><br><span class="line">    movl    %eax, %edx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    _ZL6printfPKcz</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    addq    $48, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>和程序1的汇编代码是一毛一样的..难道右值引用只是个噱头？</p><p>程序三：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">"a"</span>;</span><br><span class="line">    <span class="built_in">string</span> s2 = <span class="string">"b"</span>;</span><br><span class="line">    <span class="built_in">string</span> tmp = s1;</span><br><span class="line">    s1 = s2;</span><br><span class="line">    s2 = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"s1: %s\n"</span>, s1.c_str());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"s2: %s\n"</span>, s2.c_str());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"tmp: %s\n"</span>, tmp.c_str());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">s1: b</span></span><br><span class="line"><span class="comment">s2: a</span></span><br><span class="line"><span class="comment">tmp: a</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>程序四：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">"a"</span>;</span><br><span class="line">    <span class="built_in">string</span> s2 = <span class="string">"b"</span>;</span><br><span class="line">    <span class="built_in">string</span> tmp = <span class="keyword">static_cast</span><<span class="built_in">string</span>&&>(s1);</span><br><span class="line">    s1 = <span class="keyword">static_cast</span><<span class="built_in">string</span>&&>(s2);</span><br><span class="line">    s2 = <span class="keyword">static_cast</span><<span class="built_in">string</span>&&>(tmp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"s1: %s\n"</span>, s1.c_str());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"s2: %s\n"</span>, s2.c_str());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"tmp: %s\n"</span>, tmp.c_str());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">s1: b</span></span><br><span class="line"><span class="comment">s2: a</span></span><br><span class="line"><span class="comment">tmp:</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>从结果来看，tmp里面的东西真的移走了，程序三个程序四的汇编代码很类似，只是程序四较程序三少一点东西</p><p>再来个程序看左引用和右引用</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span>&& rr = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span>& r = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>汇编一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp</span><br><span class="line">    ...</span><br><span class="line">    call    __main</span><br><span class="line">    movl    $11, %eax</span><br><span class="line">    movl    %eax, -20(%rbp)  # 11也是有地址的</span><br><span class="line">    leaq    -20(%rbp), %rax</span><br><span class="line">    movq    %rax, -8(%rbp)   # int&& rr = 10;</span><br><span class="line">    movl    $10, -24(%rbp)   # int i = 10</span><br><span class="line">    leaq    -24(%rbp), %rax</span><br><span class="line">    movq    %rax, -16(%rbp)  # r = &i;</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    addq    $64, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>事实上右值(临时变量)是有地址的，只是我们不知道存在哪罢了，并且这个右值与它的引用具有相同的生命周期。<strong>临时变量根本上来说就是一个没有名字的变量而已</strong>，有名字的10(i)和没名字的11的处理方式基本一致</p><h2 id="3-3-引用的引用"><a href="#3-3-引用的引用" class="headerlink" title="3.3 引用的引用"></a>3.3 引用的引用</h2><p>如果用引用指向某类型的引用，那么得到还是该类型的引用，而非特殊的引用的引用类型。就是传说中的引用折叠(reference collapse)问题。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> rr_i = <span class="keyword">int</span>&&;</span><br><span class="line"><span class="keyword">using</span> lr_i = <span class="keyword">int</span>&;</span><br><span class="line"><span class="keyword">using</span> rr_rr_i = rr_i&&;  <span class="comment">// int&& && 的类型是 int&&</span></span><br><span class="line"><span class="keyword">using</span> lr_rr_i = rr_i&;   <span class="comment">// int&& &  的类型是 int&</span></span><br><span class="line"><span class="keyword">using</span> rr_lr_i = lr_i&&;  <span class="comment">// int& &&  的类型是 int&</span></span><br><span class="line"><span class="keyword">using</span> lr_lr_i = lr_i&;   <span class="comment">// int& &   的类型是 int&</span></span><br></pre></td></tr></tbody></table></figure><p>永远是左值引用优先，不管怎么做都无法改变左值引用绑定左值的事实。</p><p>C++不允许<code>int&& &r = i;</code>的语法</p><h1 id="4-结构"><a href="#4-结构" class="headerlink" title="4 结构"></a>4 结构</h1><p>这个应该叫做自定义数据类型的，struct，enum，union，class等，这绝对是个大章节，想想就有很多知识点..</p><p>可别把结构体搞成这样</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declaration does not declare anything</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">};  <span class="comment">// 声明成这样 让人咋用？</span></span><br></pre></td></tr></tbody></table></figure><p>好歹给名字让人能叫出来名字</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 形式1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">POINT</span>{</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">POINT</span> <span class="title">p</span> = {</span><span class="number">0</span>, <span class="number">0</span>};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形式2</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">} P;</span><br><span class="line">P p1 = {<span class="number">1</span>,<span class="number">2</span>};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形式3</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">P2</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">} P1;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P2</span> <span class="title">p2</span>;</span></span><br><span class="line">P1 p3;</span><br></pre></td></tr></tbody></table></figure><p>我们来汇编一个结构，来看看在内存里面长啥样</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">POINT</span> {</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">char</span> y;</span><br><span class="line">        <span class="keyword">char</span> z;</span><br><span class="line">    };</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">POINT</span> <span class="title">p</span> = {</span><span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'b'</span>};</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &p.x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &p.y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &p.z);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>汇编一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp</span><br><span class="line">    ...</span><br><span class="line">    .seh_endprologue</span><br><span class="line">    call    __main</span><br><span class="line">    movl    $1, -8(%rbp)       # p.x</span><br><span class="line">    movb    $97, -4(%rbp)      # p.y</span><br><span class="line">    movb    $98, -3(%rbp)      # p.z</span><br><span class="line">    leaq    -8(%rbp), %rax     # 结构提名就是第一个元素的地址</span><br><span class="line">    movq    %rax, %rdx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    leaq    -8(%rbp), %rax     # 第一个元素的地址</span><br><span class="line">    movq    %rax, %rdx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    leaq    -8(%rbp), %rax</span><br><span class="line">    addq    $4, %rax           # 第二个元素地址</span><br><span class="line">    movq    %rax, %rdx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    leaq    -8(%rbp), %rax</span><br><span class="line">    addq    $5, %rax           # 第三个元素地址</span><br><span class="line">    movq    %rax, %rdx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    addq    $48, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>貌似和数组一样，结构体名字不占空间，顺着基地址往上顶就完了，那么这里就来了第一个问题，结构体在内存大小的问题，</p><h2 id="3-1-内存对齐"><a href="#3-1-内存对齐" class="headerlink" title="3.1 内存对齐"></a>3.1 内存对齐</h2><p>来看一个程序</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">P1</span> {</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">short</span> s;</span><br><span class="line">    } P1;</span><br><span class="line">    P1 p1 = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">P2</span> {</span></span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">short</span> s;</span><br><span class="line">    } P2;</span><br><span class="line">    P2 p2 = {<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>};</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof(P1): %lld\n"</span>, <span class="keyword">sizeof</span>(P1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof(P2): %lld\n"</span>, <span class="keyword">sizeof</span>(P2));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">sizeof(P1): 8</span></span><br><span class="line"><span class="comment">sizeof(P2): 12</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>汇编一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp</span><br><span class="line">    ...</span><br><span class="line">    .seh_endprologue</span><br><span class="line">    call    __main</span><br><span class="line">    movl    $1, -8(%rbp)    # p1.x</span><br><span class="line">    movb    $2, -4(%rbp)    # p1.c</span><br><span class="line">    movw    $3, -2(%rbp)    # p1.s</span><br><span class="line">    movb    $2, -20(%rbp)   # p2.c</span><br><span class="line">    movl    $1, -16(%rbp)   # p2.x</span><br><span class="line">    movw    $3, -12(%rbp)   # p2.s</span><br><span class="line">    movl    $8, %edx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    movl    $12, %edx</span><br><span class="line">    leaq    .LC1(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    addq    $64, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>多么有意思，调个位置，占得内存大小就不一样了，画个图，很容易就能搞明白</p><img data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/struct_mem_20210418183714.svg"><p>灰色的就是被浪费了，为啥呢，因为要内存对齐，很多语言都有的特性。尽管内存是以字节为单位，但是大部分处理器并不是按字节块来存取内存的。它一般会以2字节，4字节，8字节，16字节甚至32字节为单位来存取内存。每个特定平台上的编译器都有自己的默认“对齐系数”（也叫对齐模数）。gcc中默认<code>#pragma pack(4)</code>，可以通过预编译命令<code>#pragma pack(n), n = 1,2,4,8,16</code>来改变这一系数。</p><p>1 对齐值</p><p>数据类型自身对齐值：基本数据类型的自身所占空间大小</p><p>指定对齐值：使用<code>#pragam pack(value)</code>时，指定的对齐值value</p><p>结构体或类的自身对齐值：其中成员对齐值最大的那个值</p><p>结构体和类的<strong>有效对齐值</strong>：自身对其值和指定对其值中较小的那个值，有效对齐值也叫<strong>对齐单位</strong>。</p><p>2 结构体第一个成员的<strong>偏移量（offset）</strong>为0，以后每个成员相对于结构体首地址的offset都是<strong>该成员大小与有效对齐值中较小那个</strong>的整数倍，如有需要编译器会在成员之间加上填充字节。</p><p>3 <strong>结构体的总大小</strong>为 有效对齐值 的<strong>整数倍</strong>，如有需要编译器会在最末一个成员之后加上填充字节。</p><p>分别解释一下P1和P2</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// P1，最长的数据类型是 int x; 是4，我电脑默认指定对齐值是8，那么有效对齐值就是4</span></span><br><span class="line"><span class="comment">// 第一个数据类型是 int x; offset是0，直接放进去内存</span></span><br><span class="line"><span class="comment">// 第二个数据类型是 char c; offset是成员大小(1)与有效对齐值(4)较小的那个整数倍，5比8小，紧挨着放</span></span><br><span class="line"><span class="comment">// 第三个数据类型是 short s; offset是成员大小(2)与有效对齐值(4)较小的那个整数倍，6比8小，放在6的位置，中间补个空，浪费掉</span></span><br><span class="line"><span class="comment">// 结构体总大小是有效对齐值的整数倍，此时P1的大小已经是4(x) + 1(c) + 1(补充) + 2(s) = 8 = 4 * 2，所以不用补充</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// P2，最长的数据类型是 int x; 是4，我电脑默认指定对齐值是8，那么有效对齐值就是4</span></span><br><span class="line"><span class="comment">// 第一个数据是 short s; offset是0，直接放进去</span></span><br><span class="line"><span class="comment">// 第二个数据是 int x; offset是成员大小(4)与有效对齐值(4)较小的那个整数倍，那就是4，中间补2</span></span><br><span class="line"><span class="comment">// 第三个数据是 char c; offset是成员大小(1)与有效对齐值(4)较小的那个整数倍，5比8小，紧挨着放</span></span><br><span class="line"><span class="comment">// 结构体总大小是有效对齐值的整数倍，此时P2的大小是 2(s) + 2(补) + 4(x) + 1(c) = 9，对齐最小整数倍是 12 = 4 * 3，所以后面再补3</span></span><br></pre></td></tr></tbody></table></figure><p>在程序中加了那个宏就不一样了</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">P1</span> {</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">short</span> s;</span><br><span class="line">    } P1;</span><br><span class="line">    P1 p1 = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(2)  <span class="comment">// 按2字节对齐</span></span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">P2</span> {</span></span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">short</span> s;</span><br><span class="line">    } P2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()  <span class="comment">// 取消指定对齐，恢复默认对齐</span></span></span><br><span class="line">    P2 p2 = {<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>};</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof(P1): %lld\n"</span>, <span class="keyword">sizeof</span>(P1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof(P2): %lld\n"</span>, <span class="keyword">sizeof</span>(P2));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">sizeof(P1): 8</span></span><br><span class="line"><span class="comment">sizeof(P2): 8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>那么为啥要内存对齐？经过搜索我们知道了，和CPU读取数据的效率有关，假设CPU一次能读取4个字节的数据，这时候没有内存对齐，都揉在一起了，比如P2那种情况，想要获取中间的x值，先要读取前4个字节数据，并且还要把第一个字节数据剔除掉，因为那是char的，然后再读取后面的4个字节，完了还得把后面3个去掉，最后把前面3个和后面一个拼起来才是我们想要的x的值，这工作量太大了</p><p><strong>正确处理内存对齐</strong></p><p>数组：按照基本数据类型对齐，第一个对齐了后面的自然也就对齐了。<br>联合：按其包含的长度最大的数据类型对齐。<br>结构体：结构体中每个数据类型都要对齐。</p><p>建议非必要不修改默认对齐值</p><p><strong>什么时候需要设置对齐</strong></p><p>在设计不同CPU下的通信协议时，或者编写硬件驱动程序时寄存器的结构这两个地方都需要按一字节对齐。即使看起来本来就自然对齐的也要使其对齐，以免不同的编译器生成的代码不一样。</p><p><strong>针对字节对齐，我们在编程中如何考虑</strong></p><p>1 如果在编程的时候要考虑节约空间的话，那么基本的原则就是把结构中的变量按照类型大小从小到大声明，尽量减少中间的填补空间</p><p>2 以空间换取时间的效率，我们显示的进行填补空间进行对齐，比如：有一种使用空间换时间做法是显式的插入reserved成员</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>{</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">char</span> reserved[<span class="number">3</span>];  <span class="comment">// 使用空间换时间</span></span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>reserved成员对我们的程序没有什么意义，它只是起到填补空间以达到字节对齐的目的，当然即使不加这个成员通常编译器也会给我们自动填补对齐，我们自己加上它只是起到显式的提醒作用</p><p><strong>如何修改编译器的默认对齐值</strong></p><p>除了上面用的<code>#pragma pack(n)</code>，还有另外一种方式，<code>__attribute((aligned (n)))</code>，让所作用的结构成员对齐在n字节自然边界上。如果结构中有成员的长度大于n，则按照最大成员的长度来对齐。<code>__attribute__ ((packed))</code>，取消结构在编译过程中的优化对齐，按照实际占用字节数进行对齐</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">P1</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">short</span> s;</span><br><span class="line">} __attribute__ ((packed)) P1;</span><br></pre></td></tr></tbody></table></figure><p><strong>字节对齐可能带来的隐患</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0x12345678</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> *p1 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">p = &i;</span><br><span class="line">*p = <span class="number">0x00</span>;</span><br><span class="line">p1 = (<span class="keyword">unsigned</span> <span class="keyword">short</span> *) (p + <span class="number">1</span>);</span><br><span class="line">*p1 = <span class="number">0x0000</span>;</span><br></pre></td></tr></tbody></table></figure><p>最后两句代码，从奇数边界去访问unsignedshort型变量，显然不符合对齐的规定</p><p>在x86上，类似的操作只会影响效率，但是在MIPS或者sparc上，可能就是一个error，因为它们要求必须字节对齐</p><h2 id="3-2-位字段"><a href="#3-2-位字段" class="headerlink" title="3.2 位字段"></a>3.2 位字段</h2><p>位字段（bit-field）是一个由具有特定数量的位组成的整数变量</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="keyword">unsigned</span> x:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> y:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> z:<span class="number">1</span>;</span><br><span class="line">} flag;</span><br><span class="line"></span><br><span class="line">flag f = {<span class="number">0b1</span>, <span class="number">0b1</span>, <span class="number">0b1</span>};</span><br><span class="line"><span class="comment">// printf("%p", &(f.x));  error: Address of bit-field requested</span></span><br></pre></td></tr></tbody></table></figure><p>这里就限制了x,y,z只有两种取值方式，0 or 1</p><p>位字段的声明格式为：<code>类型[成员名称]：宽度;</code><br>各部分的详细描述如下：</p><p>(1) 类型<br>指定一个整数类型，用来决定该位字段值被解释的方式。类型可以是 _Bool、int、signed int、unsigned int，或者为所选实现版本所提供的类型。这里的类型也可以包含类型限定符。</p><p>具有 signed int 类型的位字段会被解释成有符号数；具有 unsigned int 类型的位字段会被解释成无符号数。具有 int 类型的位字段可以是有符号或无符号的类型，由编译器决定。</p><p>(2) 成员名称<br>成员名称是可选的（可以不写）。但是，如果声明了一个无名称的位字段，就没有办法获取它。没有名称的位字段只能用于填充（padding），以帮助后续的位字段在机器字中对齐到特定的地址边界。</p><p>(3) 宽度<br>位字段中位的数量。宽度必须是一个常量整数表达式，其值是非负的，并且必须小于或等于指定类型的位宽。无名称位字段的宽度可以是 0。在这种情况下，下一个声明的位字段就会从新的可寻址内存单元开始。</p><p>呃，感觉没啥好介绍的..</p><p><strong>字段不是数组，并且没有地址，因此不能对它们使用 & 运算符</strong></p><h2 id="3-3-零长数组"><a href="#3-3-零长数组" class="headerlink" title="3.3 零长数组"></a>3.3 零长数组</h2><p>看一个程序吧</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">char</span>* data;</span><br><span class="line">    } STR1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">char</span> data[<span class="number">0</span>];</span><br><span class="line">    } STR2;</span><br><span class="line"></span><br><span class="line">    STR1 str1 = {};</span><br><span class="line">    STR2 str2 = {};</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"STR1: %llu\n"</span>, <span class="keyword">sizeof</span>(STR1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"STR2: %llu\n"</span>, <span class="keyword">sizeof</span>(STR2));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">STR1: 16</span></span><br><span class="line"><span class="comment">STR2: 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>这么一看，差距还挺大的，对不对，汇编一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp</span><br><span class="line">    ...</span><br><span class="line">    .seh_endprologue</span><br><span class="line">    call    __main</span><br><span class="line">    movq    $0, -16(%rbp)  # STR1.len</span><br><span class="line">    movq    $0, -8(%rbp)   # STR1.data</span><br><span class="line">    movl    $0, -20(%rbp)  # STR2.len</span><br><span class="line">    movl    $16, %edx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    movl    $4, %edx</span><br><span class="line">    leaq    .LC1(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    addq    $64, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>为什么是16，能想得明白哈，中间补了4个。零长数组优点</p><p>第一，节省内存。从上面的例子中可以看出，零长度数组不占用内存空间，而指针却占用内存空间。</p><p>第二，方便内存释放。如果我们的代码是在一个给别人用的函数中，你在里面做了二次内存分配，并把整个结构体返回给用户。用户调用free可以释放结构体，但是用户并不知道这个结构体内的成员也需要free，所以你不能指望用户来发现这个事。所以，如果我们把结构体的内存以及其成员要的内存一次性分配好了，并返回给用户一个结构体指针，用户做一次free就可以把所有的内存也给释放掉。</p><p>第三，这样有利于访问速度。连续的内存有益于提高访问速度，也有益于减少内存碎片。</p><p>但是有个缺点，在结构体中，数组为0的数组必须在最后声明，使用上有一定限制。</p><p>我发现一个有意思的事情，下面这程序..</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">        <span class="keyword">char</span>* data;</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">    } STR1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">char</span> data[<span class="number">0</span>];</span><br><span class="line">    } STR2;</span><br><span class="line"></span><br><span class="line">    STR1 str1 = {};</span><br><span class="line">    STR2 str2 = {};</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(str1.data) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--before STR1--\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--%s\n"</span>, str1.data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--before STR1--\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!str2.data) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--before STR2--\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--%s\n"</span>, str2.data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--before STR2--\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">--before STR1--</span></span><br><span class="line"><span class="comment">--(null)</span></span><br><span class="line"><span class="comment">--before STR1--</span></span><br><span class="line"><span class="comment">--before STR2--</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">--before STR2--</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-4-结构体指针"><a href="#3-4-结构体指针" class="headerlink" title="3.4 结构体指针"></a>3.4 结构体指针</h2><p>这个其实没啥好说的，主要就是认识一下两个运算符”.”和”->”，正好使用一下0长数组</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">char</span> data[<span class="number">0</span>];</span><br><span class="line">    } STR;</span><br><span class="line"></span><br><span class="line">    STR *str = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 一次开辟</span></span><br><span class="line">    <span class="keyword">if</span> ((str = (STR *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(STR) + <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">10</span>)) != <span class="literal">NULL</span>) {</span><br><span class="line">        str->len = <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(str->data, <span class="string">"hello!"</span>, str->len);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 如果是结构体对象就用 . 如果是指针就用 -></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"len: %d, data: %s\n"</span>, (*str).len, str->data);</span><br><span class="line">    <span class="comment">// 一次销毁</span></span><br><span class="line">    <span class="built_in">free</span>(str);</span><br><span class="line">    str = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其他的，好像也没啥了</p><h1 id="5-联合与枚举"><a href="#5-联合与枚举" class="headerlink" title="5 联合与枚举"></a>5 联合与枚举</h1><p>union和enum，这俩</p><p>结构体和共用体的区别在于：结构体的各个成员会占用不同的内存，互相之间没有影响；而共用体的所有成员占用同一段内存，修改一个成员会影响其余所有成员。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">union</span> {</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">short</span> b;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">    } U;</span><br><span class="line"></span><br><span class="line">    U u = {<span class="number">1</span>};</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d, %d\n"</span>, u.a, u.b, u.c);</span><br><span class="line">    u.b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d, %d\n"</span>, u.a, u.b, u.c);</span><br><span class="line">    u.c = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d, %d\n"</span>, u.a, u.b, u.c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n%p\n%p\n%p\n"</span>, &u, &u.a, &u.b, &u.c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* output</span></span><br><span class="line"><span class="comment">1, 1, 1</span></span><br><span class="line"><span class="comment">2, 2, 2</span></span><br><span class="line"><span class="comment">3, 3, 3</span></span><br><span class="line"><span class="comment">000000000063FE1C</span></span><br><span class="line"><span class="comment">000000000063FE1C</span></span><br><span class="line"><span class="comment">000000000063FE1C</span></span><br><span class="line"><span class="comment">000000000063FE1C</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>汇编一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    pushq    %rbp</span><br><span class="line">    ...</span><br><span class="line">    .seh_endprologue</span><br><span class="line">    call    __main</span><br><span class="line">    movl    $1, -4(%rbp)    # u.a = 1</span><br><span class="line">    movzbl    -4(%rbp), %eax</span><br><span class="line">    movsbl    %al, %ecx</span><br><span class="line">    movzwl    -4(%rbp), %eax</span><br><span class="line">    movswl    %ax, %edx</span><br><span class="line">    movl    -4(%rbp), %eax</span><br><span class="line">    movl    %ecx, %r9d</span><br><span class="line">    movl    %edx, %r8d</span><br><span class="line">    movl    %eax, %edx</span><br><span class="line">    leaq    .LC0(%rip), %rcx</span><br><span class="line">    call    printf</span><br><span class="line">    movw    $2, -4(%rbp)     # u.b = 2</span><br><span class="line">    ...</span><br><span class="line">    movb    $3, -4(%rbp)      # u.c = 3</span><br><span class="line">    ...</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    addq    $48, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    ret</span><br></pre></td></tr></tbody></table></figure><p>实际上union就是struct，只不过union所有的成员相对于基地址的偏移量都是0</p><p>再看enum</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> week{ Mon, Tues, Wed, Thurs, Fri, Sat, Sun };</span><br></pre></td></tr></tbody></table></figure><p>仅仅给出了名字，却没有给出名字对应的值，这是因为枚举值默认从0开始，往后逐个加（递增）；也就是说，week中的Mon、Tues … Sun 对应的值分别为 0、1 … 6。</p><p>枚举和宏其实非常类似：宏在预处理阶段将名字替换成对应的值，枚举在编译阶段将名字替换成对应的值。我们可以将枚举理解为编译阶段的宏</p><p>枚举列表中的 Mon、Tues、Wed 这些标识符的作用范围是全局的（严格来说是 main() 函数内部），不能再定义与它们名字相同的变量</p><p>Mon、Tues、Wed 等都是常量，不能对它们赋值，只能将它们的值赋给其他的变量</p><p>Mon、Tues、Wed 这些名字都被替换成了对应的数字。这意味着，Mon、Tues、Wed 等都不是变量，它们不占用数据区（常量区、全局数据区、栈区和堆区）的内存，而是直接被编译到命令里面，放到代码区，所以不能用<code>&</code>取得它们的地址。这就是枚举的本质</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;数组和指针一般不能分开，尤其是C语言里面，让人又爱又恨的东西..而一谈到这俩玩意就得画图..&lt;/p&gt;
&lt;h1 id=&quot;1-数组&quot;&gt;&lt;a href=&quot;#1-数组&quot; class=&quot;headerlink&quot; title=&quot;1 数组&quot;&gt;&lt;/a&gt;1 数组&lt;/h1&gt;&lt;p&gt;对数组下定义，抱歉，我不会。但是我有词典，a way of organizing and storing related data in a computer memory。这么一看就清晰多了&lt;/p&gt;
&lt;p&gt;元素类型为char的数组可以如下声明&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int c[6];  // 可以存6个整数的数组&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在声明中&lt;code&gt;[]&lt;/code&gt;表示xxx的数组，所有数组下标都是从0开始，计算机中很多东西都是从0开始，为什么？搜索一下吧。数组的大小，就是那个6，必须得是个常量表达式，这么看，数组一旦定义好了大小就定下来了呀&lt;/p&gt;
&lt;p&gt;数组名也是标识符，也要符合规则，不能和其他变量重名&lt;/p&gt;
&lt;p&gt;数组初始化的时候可以部分初始化，也可以整体初始化；赋值的时候不能整体赋值，只能单个元素得赋值(数组拷贝，那个不算)&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/Cpp" scheme="https://sidneygod.github.io/categories/C-Cpp/"/>
    
    
      <category term="C" scheme="https://sidneygod.github.io/tags/C/"/>
    
      <category term="Cpp" scheme="https://sidneygod.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Build a leanote server</title>
    <link href="https://sidneygod.github.io/posts/5d13faf3/"/>
    <id>https://sidneygod.github.io/posts/5d13faf3/</id>
    <published>2020-08-23T10:05:55.000Z</published>
    <updated>2020-08-23T10:44:13.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Prepare"><a href="#1-Prepare" class="headerlink" title="1 Prepare"></a>1 Prepare</h1><p>You need a server. My server OS is CentOS 7.2. You can also use other versions of Linux. Ok, let’s get started.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">yum install git  # config your git</span><br><span class="line">git config --global user.name=UserName</span><br><span class="line">git config --global user.email=xx@yy.zz</span><br><span class="line">mkdir /usr/local/apps</span><br><span class="line">mkdir ~/tmp</span><br><span class="line">cd ~/tmp</span><br></pre></td></tr></table></figure><h1 id="2-Install-Golang"><a href="#2-Install-Golang" class="headerlink" title="2 Install Golang"></a>2 Install Golang</h1><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> download golang</span></span><br><span class="line">wget https://golang.google.cn/dl/go1.15.linux-amd64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> unzip</span></span><br><span class="line">tar -zxvf go1.15.linux-amd64.tar.gz -C /usr/local/apps</span><br><span class="line"><span class="meta">#</span><span class="bash"> configure the golang environment variable</span></span><br><span class="line">vim /etc/profile</span><br><span class="line">    # golang</span><br><span class="line">    export GOROOT=/usr/local/apps/go</span><br><span class="line">    export GOPATH=/usr/local/apps/gopackage</span><br><span class="line">    export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> refresh profile</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> check golang</span></span><br><span class="line">go version</span><br></pre></td></tr></table></figure><h1 id="3-Install-Mongodb"><a href="#3-Install-Mongodb" class="headerlink" title="3 Install Mongodb"></a>3 Install Mongodb</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> download mongodb</span></span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.20.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash"> unzip </span></span><br><span class="line">tar -zxvf mongodb-linux-x86_64-4.0.20.tgz -C /usr/local/apps</span><br><span class="line">cd /usr/local/apps</span><br><span class="line"><span class="meta">#</span><span class="bash"> rename</span></span><br><span class="line">mv mongodb-linux-x86_64-4.0.20 mongodb</span><br><span class="line"><span class="meta">#</span><span class="bash"> Configure Mongodb</span></span><br><span class="line">cd mongodb</span><br><span class="line">mkdir -p data/db</span><br><span class="line">mkdir -p data/log</span><br><span class="line">mkdir conf</span><br><span class="line">vim conf/mongodb.conf</span><br><span class="line">    # port</span><br><span class="line">    port=27017</span><br><span class="line">    # database path</span><br><span class="line">    dbpath=/usr/local/apps/mongodb/data/db</span><br><span class="line">    # log path</span><br><span class="line">    logpath=/usr/local/apps/mongodb/data/log/mongodb.log</span><br><span class="line">    pidfilepath=/usr/local/apps/mongodb/data/mongo.pid </span><br><span class="line">    # run in background</span><br><span class="line">    fork=true</span><br><span class="line">    # log output mode</span><br><span class="line">    logappend=true</span><br><span class="line">    # your server private IP</span><br><span class="line">    bind_ip=127.0.0.1[,private IP]</span><br><span class="line">    # max connection count</span><br><span class="line">    maxConns=200</span><br><span class="line">vim /etc/profile</span><br><span class="line">    # mongo</span><br><span class="line">    export PATH=$PATH:/usr/local/apps/mongodb/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> start mongodb service</span></span><br><span class="line">mongod --config /usr/local/apps/mongodb/conf/mongodb.conf</span><br><span class="line">mongo</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h1 id="4-Install-Leanote"><a href="#4-Install-Leanote" class="headerlink" title="4 Install Leanote"></a>4 Install Leanote</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">cd ~/tmp</span><br><span class="line">git clone https://github.com/leanote/leanote-all.git --depth=1</span><br><span class="line">mkdir /usr/local/apps/gopackage</span><br><span class="line">cp -r leanote-all/src/ gopackage/</span><br><span class="line"><span class="meta">#</span><span class="bash"> install revel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> go get github.com/revel/cmd/revel  <span class="comment"># timeout!</span></span></span><br><span class="line">mkdir -p /usr/local/apps/go/src/golang.org/x/</span><br><span class="line">cd /usr/local/apps/go/src/golang.org/x/</span><br><span class="line">git clone https://github.com/golang/net.git --depth=1</span><br><span class="line">git clone https://github.com/golang/crypto.git --depth=1</span><br><span class="line">git clone https://github.com/golang/sys.git --depth=1</span><br><span class="line">git clone https://github.com/golang/tools.git --depth=1</span><br><span class="line">git clone https://github.com/golang/mod.git --depth=1</span><br><span class="line">git clone https://github.com/golang/xerrors.git --depth=1</span><br><span class="line">cd /usr/local/apps/go/bin</span><br><span class="line">go build github.com/revel/cmd/revel</span><br><span class="line">revel</span><br><span class="line"><span class="meta">#</span><span class="bash"> init data</span></span><br><span class="line">mongorestore -h 127.0.0.1(your server private IP) -d leanote --dir /usr/local/apps/gopackage/src/github.com/leanote/leanote/mongodb_backup/leanote_install_data</span><br><span class="line">mongo</span><br><span class="line">show dbs</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> there is a leanote database, it means that the initialization data is successful.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> create a super administrator</span></span><br><span class="line">use admin</span><br><span class="line">db.createUser(&#123;user: 'root', pwd: 'root', roles: ['clusterAdmin', 'dbAdminAnyDatabase', 'userAdminAnyDatabase', 'readWriteAnyDatabase']&#125;)</span><br><span class="line">db.auth('root', 'root')</span><br><span class="line"></span><br><span class="line">use leanote</span><br><span class="line">db.createUser(&#123;user: 'leanote', pwd: 'leanotepwd', roles: ['readWrite']&#125;)</span><br><span class="line">db.auth('leanote', 'leanotepwd')</span><br><span class="line"><span class="meta">#</span><span class="bash"> stop mongodb service and quit</span></span><br><span class="line">use admin</span><br><span class="line">db.shutdownServer()</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h1 id="5-Configure-Leanote"><a href="#5-Configure-Leanote" class="headerlink" title="5 Configure Leanote"></a>5 Configure Leanote</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/apps/gopackage</span><br><span class="line">vim src/github.com/leanote/leanote/conf/app.conf</span><br><span class="line">    # you website public ip or url</span><br><span class="line">    site.url=http://www.example.com:9000</span><br><span class="line">    # mongodb</span><br><span class="line">    db.username=leanote</span><br><span class="line">    db.password=leanotepwd</span><br><span class="line">    # You Must Change It !!!</span><br><span class="line">    app.secret=[you can modify it at will]</span><br><span class="line"><span class="meta">#</span><span class="bash"> start mongodb service</span></span><br><span class="line">mongod --auth --config /usr/local/apps/mongodb/conf/mongodb.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> start leanote</span></span><br><span class="line">nohup revel run src/github.com/leanote/leanote &gt;leanote.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>Now, you can try to open <a href="http://www.example.com:9000" target="_blank" rel="noopener">www.example.com:9000</a> !<br><strong>The default account is admin and password is abc123.</strong></p><h1 id="6-Other"><a href="#6-Other" class="headerlink" title="6 Other"></a>6 Other</h1><h2 id="6-1-MongoDB-Error"><a href="#6-1-MongoDB-Error" class="headerlink" title="6.1 MongoDB Error"></a>6.1 MongoDB Error</h2><p><strong>ERROR: child process failed, exited with error number 48 To see additional information in this outpu</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start in repair mode again</span></span><br><span class="line">./mongod --dbpath=/usr/<span class="built_in">local</span>/apps/mongodb/data/db --logpath=/usr/<span class="built_in">local</span>/apps/mongodb/data/<span class="built_in">log</span>/mongodb.log --repair</span><br><span class="line"><span class="comment"># According to the tips to fix! and kill mongod</span></span><br><span class="line">pkill mongod</span><br><span class="line"><span class="comment"># restart mongodb</span></span><br><span class="line">mongod --auth --config /usr/<span class="built_in">local</span>/apps/mongodb/conf/mongodb.conf</span><br></pre></td></tr></table></figure><h2 id="6-2-Config-Nginx"><a href="#6-2-Config-Nginx" class="headerlink" title="6.2 Config Nginx"></a>6.2 Config Nginx</h2><p>reference: <a href="https://developer.aliyun.com/article/699966" target="_blank" rel="noopener">https://developer.aliyun.com/article/699966</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install nginx</span></span><br><span class="line">yum install -y nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># after install successfully,</span></span><br><span class="line"><span class="comment"># the default web dir： /usr/share/nginx/html</span></span><br><span class="line"><span class="comment"># the default config file：/etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Open ports 80 and 443.</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=http</span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify /etc/nginx/nginx.conf</span></span><br><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">-        server_name  _;</span><br><span class="line">+        server_name  101.132.124.174;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">...</span><br><span class="line">        location / &#123;</span><br><span class="line">+            proxy_pass  http://127.0.0.1:9000;</span><br><span class="line">+            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">+            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">+            proxy_set_header X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># start or restart nginx</span></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p>If nginx did not work, please run “systemctl status nginx” to check. If there is a log for:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to parse PID from file /run/nginx.pid: Invalid argument</span><br></pre></td></tr></table></figure><p>Please try the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/systemd/system/nginx.service.d</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"[Service]\nExecStartPost=/bin/sleep 0.1\n"</span> &gt; /etc/systemd/system/nginx.service.d/override.conf</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># check again</span></span><br><span class="line">service nginx status</span><br></pre></td></tr></table></figure><p>All is over, have fun!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Prepare&quot;&gt;&lt;a href=&quot;#1-Prepare&quot; class=&quot;headerlink&quot; title=&quot;1 Prepare&quot;&gt;&lt;/a&gt;1 Prepare&lt;/h1&gt;&lt;p&gt;You need a server. My server OS is CentOS 7.2. You can also use other versions of Linux. Ok, let’s get started.&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;su&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install git  # config your git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name=UserName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email=xx@yy.zz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir /usr/local/apps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir ~/tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ~/tmp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;2-Install-Golang&quot;&gt;&lt;a href=&quot;#2-Install-Golang&quot; class=&quot;headerlink&quot; title=&quot;2 Install Golang&quot;&gt;&lt;/a&gt;2 Install Golang&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Other" scheme="https://sidneygod.github.io/categories/Other/"/>
    
    
      <category term="blog" scheme="https://sidneygod.github.io/tags/blog/"/>
    
      <category term="leanote" scheme="https://sidneygod.github.io/tags/leanote/"/>
    
  </entry>
  
  <entry>
    <title>Build FreeRADIUS server based on Ubuntu18</title>
    <link href="https://sidneygod.github.io/posts/cb75f049/"/>
    <id>https://sidneygod.github.io/posts/cb75f049/</id>
    <published>2020-08-22T14:46:36.000Z</published>
    <updated>2020-08-23T10:09:36.655Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>参考：</p><p><a href="https://www.cnblogs.com/opsprobe/p/9420502.html" target="_blank" rel="noopener">https://www.cnblogs.com/opsprobe/p/9420502.html</a></p><p><a href="https://blog.csdn.net/lassewang/article/details/9159543" target="_blank" rel="noopener">https://blog.csdn.net/lassewang/article/details/9159543</a></p><h1 id="0-RADIUS"><a href="#0-RADIUS" class="headerlink" title="0 RADIUS"></a>0 RADIUS</h1><p>RADIUS：（Remote Authentication Dial In User Service）中文名为远程用户拨号认证服务，简称RADIUS，是目前应用最广泛的AAA协议（认证、授权和计费）</p><img data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/AAA组网示意图.png"><p>图中Device（例如交换机）向远程接入用户提供接入及与RADIUS服务器交互的服务。RADIUS服务器上则存储用户的身份信息、授权信息以及访问记录，对用户进行认证、授权和计费服务</p><p><strong>认证过程如下</strong></p><p>（1）客户端向接入设备发送一个EAPoL-Start报文，开始802.1x认证接入；</p><p>（2）接入设备向客户端发送EAP-Request/Identity报文，要求客户端将用户名送上来；</p><a id="more"></a><p>（3）客户端回应一个EAP-Response/Identity给接入设备的请求，其中包括用户名；</p><p>（4）接入设备将EAP-Response/Identity报文封装到RADIUS Access-Request报文中，发送给认证服务器；</p><p>（5）认证服务器产生一个Challenge，通过接入设备将RADIUS Access-Challenge报文发送给客户端，其中包含有EAP-Request/MD5-Challenge；</p><p>（6）接入设备通过EAP-Request/MD5-Challenge发送给客户端，要求客户端进行认证；</p><p>（7）客户端收到EAP-Request/MD5-Challenge报文后，将密码和Challenge做MD5算法后的Challenged-Pass-word，在EAP-Response/MD5-Challenge回应给接入设备；</p><p>（8）接入设备将Challenge，Challenged Password和用户名一起送到RADIUS服务器，由RADIUS服务器进行认证；</p><p>（9）RADIUS服务器根据用户信息，做MD5算法，判断用户是否合法，然后回应认证成功/失败报文到接入设备。如果成功，携带协商参数，以及用户的相关业务属性给用户授权。如果认证失败，则流程到此结束；</p><p>（10）如果认证通过，用户通过标准的DHCP协议 (可以是DHCP Relay) ，通过接入设备获取规划的IP地址；</p><p>（11）如果认证通过，接入设备发起计费开始请求给RADIUS用户认证服务器；</p><p>（12）RADIUS用户认证服务器回应计费开始请求报文，用户上线完毕。</p><p>freeradius是GNU/GPL（通用公共许可证）的原则下，开发的高性能开源radius服务器。常见的radius服务器种类不多，比较强大的当属开源的freeradius，世界上大部分的radius服务器都是基于freeradius开发而来的。</p><p>freeradius可以对支持radius协议的网络设备进行账户认证、授权和记账管理，常见的开源路由器操作系统：如Openwrt，DD-wrt等，都支持radius协议，常见的电信运营商的宽带账户，上网账户管理，记账，也都是使用的radius服务器进行鉴权记账的。</p><p>RADIUS服务器和NAS服务器通过UDP协议进行通信，RADIUS服务器的1812端口负责认证，1813端口负责计费工作。采用UDP的基本考虑是因为NAS和RADIUS服务器大多在同一个局域网中，使用UDP更加快捷方便，而且UDP是无连接的，会减轻RADIUS的压力，也更安全。</p><p>以下均在Ubuntu18上操作的，Ubuntu16上坑太多..看网上教程，CentOS更多..</p><h1 id="1-安装Apache-Web-Server和PHP"><a href="#1-安装Apache-Web-Server和PHP" class="headerlink" title="1 安装Apache Web Server和PHP"></a>1 安装Apache Web Server和PHP</h1><p>在Ubuntu上安装Apache，运行以下命令安装Apache Web服务器：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br></pre></td></tr></tbody></table></figure><p>要在Ubuntu 18.04上安装PHP，请运行(<strong>直接运行可能会不成功，因为没这个源</strong>)</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php libapache2-mod-php php-gd php-common php-mail \</span><br><span class="line">    php-mail-mime php-mysql php-pear php-db php-mbstring php-xml php-curl</span><br></pre></td></tr></tbody></table></figure><p>PHP安装：</p><p>1 添加PHP PPA</p><p>添加ondrej/php，它包含PHP包和其他必需的PHP扩展</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:ondrej/php</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></tbody></table></figure><p>通过复制以下代码并将其添加到系统的软件源中，可以手动将此PPA添加到系统中</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 18.04 拷贝</span></span><br><span class="line">deb http://ppa.launchpad.net/ondrej/php/ubuntu bionic main </span><br><span class="line">deb-src http://ppa.launchpad.net/ondrej/php/ubuntu bionic main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加源</span></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line">sudo apt update && sudo apt upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装PHP</span></span><br><span class="line">sudo apt-get install php libapache2-mod-php php-gd php-common php-mail \</span><br><span class="line">    php-mail-mime php-mysql php-pear php-db php-mbstring php-xml php-curl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">php -v</span><br></pre></td></tr></tbody></table></figure><h1 id="2-安装MariaDB并创建数据库"><a href="#2-安装MariaDB并创建数据库" class="headerlink" title="2 安装MariaDB并创建数据库"></a>2 安装MariaDB并创建数据库</h1><p>MariaDB是MySQL的一个分支，目前最新稳定版是10.5，以下是安装步骤</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装software-properties-common</span></span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line"><span class="comment"># 导入MariaDB gpg密钥</span></span><br><span class="line">ssudo apt-key adv --fetch-keys <span class="string">'https://mariadb.org/mariadb_release_signing_key.asc'</span></span><br><span class="line"><span class="comment"># 添加apt存储库</span></span><br><span class="line">sudo add-apt-repository <span class="string">'deb [arch=amd64,arm64,ppc64el] https://mirrors.tuna.tsinghua.edu.cn/mariadb/repo/10.5/ubuntu bionic main'</span></span><br><span class="line"><span class="comment"># 安装MariaDB Server</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt -y install mariadb-server mariadb-client</span><br></pre></td></tr></tbody></table></figure><p>安装并运行后，为FreeRADIUS创建一个数据库，这将在稍后阶段使用：</p><p>数据库名称：radius</p><p>数据库用户：radius</p><p>数据库用户密码：radiuspassword</p><p>如果你有专用数据库服务器，请将localhost替换为源FreeRadius服务器的IP：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一次使用，初始化MariaDB</span></span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line"><span class="comment"># 大致会经历这几个阶段</span></span><br><span class="line">Switch to unix_socket authentication [Y/n] >> [直接Enter] 切换到unix_socket身份验证</span><br><span class="line">Change the root password? [Y/n] y</span><br><span class="line">New password: </span><br><span class="line">Re-enter new password:</span><br><span class="line">Remove anonymous users? [Y/n] >> [直接Enter] 是否删除匿名用户</span><br><span class="line">Disallow root login remotely? [Y/n]  >> [直接Enter] 禁止远程root角色登录</span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? [Y/n] >> [直接Enter] 是否删除<span class="built_in">test</span>数据库</span><br><span class="line">Reload privilege tables now? [Y/n] >> [直接Enter] 是否重新加载权限表</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment"># 输入密码 登录成功后在MariaDB中创建数据库</span></span><br><span class="line">CREATE DATABASE radius;</span><br><span class="line"><span class="comment"># 设置通过root:password可以在任何PC上访问数据库 方便其他电脑上用navicat或datagrip</span></span><br><span class="line">GRANT ALL ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">"password"</span>;</span><br><span class="line"><span class="comment"># 设置通过 radius:radiuspassword 访问radius数据库</span></span><br><span class="line">GRANT ALL ON radius.* TO <span class="string">'radius'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">"radiuspassword"</span>;</span><br><span class="line"><span class="comment"># 重新载入权限</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 退出MariaDB</span></span><br><span class="line">\q</span><br></pre></td></tr></tbody></table></figure><blockquote><p>完全卸载MySQL/MariaDB</p><p>首先删除mysql:<br><code>sudo apt-get remove mysql-*</code><br>然后清理残留的数据<br><code>dpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P</code></p><ul><li>查看状态 <code>sudo systemctl status mysql</code></li><li>启动 <code>sudo systemctl start mysql</code></li><li>重启 <code>sudo systemctl restart mysql</code></li><li>关闭 <code>sudo systemctl stop mysql</code></li></ul></blockquote><h1 id="3-安装和配置FreeRADIUS"><a href="#3-安装和配置FreeRADIUS" class="headerlink" title="3 安装和配置FreeRADIUS"></a>3 安装和配置FreeRADIUS</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Ubuntu 18.04上安装的FreeRADIUS版本是v3.0，使用以下命令从官方Ubuntu apt存储库安装</span></span><br><span class="line">sudo apt-get install freeradius freeradius-mysql freeradius-utils</span><br><span class="line"><span class="comment"># 检测是否安装成功</span></span><br><span class="line">ps -ef | grep freeradius</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看普通用户是否有读取文件权限</span></span><br><span class="line">ll /etc/freeradius/3.0/mods-config/sql/main/mysql/schema.sql</span><br><span class="line"><span class="comment"># 改权限</span></span><br><span class="line">sudo chmod 666 /etc/freeradius/3.0/mods-config/sql/main/mysql/schema.sql</span><br><span class="line"><span class="comment"># 导入freeradius MySQL数据库方案</span></span><br><span class="line">mysql -u root -p radius < /etc/freeradius/3.0/mods-config/sql/main/mysql/schema.sql</span><br><span class="line"><span class="comment"># 查看创建的表</span></span><br><span class="line">mysql -u root -p -e <span class="string">"use radius; show tables;"</span></span><br><span class="line">+------------------+</span><br><span class="line">| Tables_in_radius |</span><br><span class="line">+------------------+</span><br><span class="line">| nas              |</span><br><span class="line">| radacct          |</span><br><span class="line">| radcheck         |</span><br><span class="line">| radgroupcheck    |</span><br><span class="line">| radgroupreply    |</span><br><span class="line">| radpostauth      |</span><br><span class="line">| radreply         |</span><br><span class="line">| radusergroup     |</span><br><span class="line">+------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在/etc/freeradius/3.0/mods-enabled/下为sql模块创建一个软链接</span></span><br><span class="line">sudo ln -s /etc/freeradius/3.0/mods-available/sql /etc/freeradius/3.0/mods-enabled/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置SQL模块并更改数据库连接参数以适合你的环境</span></span><br><span class="line">sudo vim /etc/freeradius/3.0/mods-enabled/sql</span><br><span class="line">   <span class="comment"># 修改</span></span><br><span class="line">    sql {</span><br><span class="line">        driver = <span class="string">"rlm_sql_mysql"</span></span><br><span class="line">        dialect = <span class="string">"mysql"</span></span><br><span class="line">        <span class="comment"># Connection info:</span></span><br><span class="line">        server = <span class="string">"localhost"</span></span><br><span class="line">        port = 3306</span><br><span class="line">        login = <span class="string">"radius"</span></span><br><span class="line">        password = <span class="string">"radiuspassword"</span></span><br><span class="line">        <span class="comment"># Database table configuration for everything except Oracle</span></span><br><span class="line">        radius_db = <span class="string">"radius"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Set to ‘yes’ to read radius clients from the database (‘nas’ table)</span></span><br><span class="line">        <span class="comment"># Clients will ONLY be read on server startup.</span></span><br><span class="line">        read_clients = yes</span><br><span class="line">        <span class="comment"># Table to keep radius client info</span></span><br><span class="line">        client_table = <span class="string">"nas"</span></span><br><span class="line">    }</span><br><span class="line"><span class="comment"># 更改/etc/freeradius/3.0/mods-enabled/sql的组权限</span></span><br><span class="line">sudo chgrp -h freerad /etc/freeradius/3.0/mods-available/sql</span><br><span class="line">sudo chown -R freerad:freerad /etc/freeradius/3.0/mods-enabled/sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启freeradius服务</span></span><br><span class="line">sudo systemctl restart freeradius.service</span><br></pre></td></tr></tbody></table></figure><h1 id="4-安装和配置Daloradius"><a href="#4-安装和配置Daloradius" class="headerlink" title="4 安装和配置Daloradius"></a>4 安装和配置Daloradius</h1><p>我们需要安装Daloradius才能获得FreeRADIUS Web管理界面</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载Daloradius</span></span><br><span class="line">wget https://github.com/lirantal/daloradius/archive/master.zip</span><br><span class="line">unzip master.zip</span><br><span class="line">mv daloradius-master/ daloradius</span><br><span class="line"><span class="built_in">cd</span> daloradius</span><br><span class="line"><span class="comment"># 配置daloradius，现在导入Daloradius mysql表</span></span><br><span class="line">mysql -u root -p radius < contrib/db/fr2-mysql-daloradius-and-freeradius.sql</span><br><span class="line">mysql -u root -p radius < contrib/db/mysql-daloradius.sql</span><br><span class="line"><span class="comment"># 配置daloRADIUS数据库连接详细信息</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">sudo mv daloradius /var/www/html/</span><br><span class="line"><span class="comment"># 更改http文件夹的权限并为daloradius配置文件设置正确的权限</span></span><br><span class="line">sudo chown -R www-data:www-data /var/www/html/daloradius/</span><br><span class="line">sudo chmod 664 /var/www/html/daloradius/library/daloradius.conf.php</span><br><span class="line"><span class="comment"># 修改filedaloradius.conf.php以调整数据库信息 对应/etc/freeradius/3.0/mods-enabled/sql</span></span><br><span class="line">sudo vim /var/www/html/daloradius/library/daloradius.conf.php</span><br><span class="line">    <span class="comment"># 主要是</span></span><br><span class="line">    CONFIG_DB_USER</span><br><span class="line">    CONFIG_DB_PASS</span><br><span class="line">    CONFIG_DB_NAME</span><br><span class="line"><span class="comment"># 重新启动freeradius和apache2</span></span><br><span class="line">systemctl restart freeradius apache2</span><br></pre></td></tr></tbody></table></figure><p>打开浏览器，访问<strong><code>http://ip-address/daloradius/login.php</code></strong></p><img data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/image-20200822142751997.png"><p>默认的管理员账户密码是 administrator:radius</p><blockquote><p>查看syslog和daloradius.log时，可能会报错，修改syslog权限为644即可，加到用户组或许效果更好；至于daloradius.log去Config>Logging Settings中把想要监听的log设置成yes就好了</p></blockquote><h1 id="5-修改FreeRADIUS测试账户"><a href="#5-修改FreeRADIUS测试账户" class="headerlink" title="5 修改FreeRADIUS测试账户"></a>5 修改FreeRADIUS测试账户</h1><p>FreeRADIUS的配置默认是文件，打开测试账户</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/freeradius/3.0/users</span><br><span class="line">    <span class="comment"># 找到下面这段信息 注释全打开</span></span><br><span class="line">    73     steve   Cleartext-Password := <span class="string">"testing"</span></span><br><span class="line">    74     Service-Type = Framed-User,</span><br><span class="line">    75     Framed-Protocol = PPP,</span><br><span class="line">    76     Framed-IP-Address = 172.16.3.33,</span><br><span class="line">    77     Framed-IP-Netmask = 255.255.255.0,</span><br><span class="line">    78     Framed-Routing = Broadcast-Listen,</span><br><span class="line">    79     Framed-Filter-Id = <span class="string">"std.ppp"</span>,</span><br><span class="line">    80     Framed-MTU = 1500,</span><br><span class="line">    81     Framed-Compression = Van-Jacobsen-TCP-IP</span><br></pre></td></tr></tbody></table></figure><p>配置路由器或交换机的账号</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/freeradius/3.0/clients.conf</span><br><span class="line">    <span class="comment"># 按照这个格式 里面有个localhost 用作本机测试的</span></span><br><span class="line">    client x.x.x.x {  <span class="comment"># 路由器或交换机的ip</span></span><br><span class="line">        ipaddr = x.x.x.x  <span class="comment"># 路由器或交换机的ip</span></span><br><span class="line">        secret = xxxxx  <span class="comment"># 路由器或交换机访问radius的密码</span></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>重新开一终端</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改了配置文件 需要重启一下服务</span></span><br><span class="line">service freeradius restart</span><br><span class="line"><span class="comment"># 测试账户 接收到 Received Access-Accept 就表示没问题了</span></span><br><span class="line">radtest steve testing localhost 1812 testing123</span><br><span class="line"><span class="comment"># radtest 账号 密码 client_ip radius端口 client_secret</span></span><br></pre></td></tr></tbody></table></figure><p>这也确实，表明FreeRADIUS是通过文件进行配置的，接下来将其改为sql模式，上面改得差不多了，再改俩就行</p><p>修改配置文件<code>/etc/freeradius/3.0/sites-enabled/default</code></p><p>1 找到<code>authorize {</code>(273行)，注释其中的<code>files</code>，并将<code>sql</code>去掉注释或<code>-</code></p><p>2 找到<code>preacct {</code>(555行)，注释其中的<code>files</code></p><p>3 找到<code>accounting {</code>(608行)，去掉<code>sql</code>的注释或<code>-</code></p><p>4 找到<code>session {</code>(677行)，去掉<code>sql</code>的注释或<code>-</code></p><p>5 找到<code>post-auth {</code>(689行)，去掉<code>sql</code>的注释或<code>-</code></p><p>6 找到<code>pre-proxy {</code>(861行)，注释掉<code>files</code></p><p>修改配置文件<code>/etc/freeradius/3.0/sites-enabled/inner-tunnel</code>，和上面一样，注释掉<code>files</code>，去掉<code>sql</code>的注释或<code>-</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启一下相关的服务</span></span><br><span class="line">service mysql restart</span><br><span class="line">service apache2 restart</span><br><span class="line">service freeradius restart</span><br></pre></td></tr></tbody></table></figure><hr><p>下面进行测试，直接进入MySQL可以通过Navicat或者直接终端(<code>mysql -u root -p; use radius;</code>)，输入下面的sql语句</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户组</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> radius.radgroupreply (groupname, <span class="keyword">attribute</span>, op, <span class="string">`value`</span>) <span class="keyword">VALUES</span> (<span class="string">'locahost'</span>, <span class="string">'Service-Type'</span>, <span class="string">':='</span>, <span class="string">'Framed-User'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> radius.radgroupreply (groupname, <span class="keyword">attribute</span>, op, <span class="string">`value`</span>) <span class="keyword">VALUES</span> (<span class="string">'locahost'</span>, <span class="string">'Framed-Protocol'</span>, <span class="string">':='</span>, <span class="string">'PPP'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> radius.radgroupreply (groupname, <span class="keyword">attribute</span>, op, <span class="string">`value`</span>) <span class="keyword">VALUES</span> (<span class="string">'locahost'</span>, <span class="string">'Framed-IP-Address'</span>, <span class="string">':='</span>, <span class="string">'192.168.1.109'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> radius.radgroupreply (groupname, <span class="keyword">attribute</span>, op, <span class="string">`value`</span>) <span class="keyword">VALUES</span> (<span class="string">'locahost'</span>, <span class="string">'Framed-IP-Netmask'</span>, <span class="string">':='</span>, <span class="string">'255.255.255.0'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> radius.radgroupreply (groupname, <span class="keyword">attribute</span>, op, <span class="string">`value`</span>) <span class="keyword">VALUES</span> (<span class="string">'locahost'</span>, <span class="string">'Framed-Routing'</span>, <span class="string">':='</span>, <span class="string">'Broadcast-Listen'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> radius.radgroupreply (groupname, <span class="keyword">attribute</span>, op, <span class="string">`value`</span>) <span class="keyword">VALUES</span> (<span class="string">'locahost'</span>, <span class="string">'Framed-Filter-Id'</span>, <span class="string">':='</span>, <span class="string">'"std.ppp"'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> radius.radgroupreply (groupname, <span class="keyword">attribute</span>, op, <span class="string">`value`</span>) <span class="keyword">VALUES</span> (<span class="string">'locahost'</span>, <span class="string">'Framed-MTU'</span>, <span class="string">':='</span>, <span class="string">'1500'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> radius.radgroupreply (groupname, <span class="keyword">attribute</span>, op, <span class="string">`value`</span>) <span class="keyword">VALUES</span> (<span class="string">'locahost'</span>, <span class="string">'Framed-Compression'</span>, <span class="string">':='</span>, <span class="string">'Van-Jacobsen-TCP-IP'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> radius.radcheck (username, <span class="keyword">attribute</span>, op, <span class="string">`value`</span>) <span class="keyword">VALUES</span> (<span class="string">'user1'</span>, <span class="string">'Cleartext-Password'</span>, <span class="string">'=='</span>, <span class="string">'password1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户加入组</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> radius.radusergroup (username, groupname) <span class="keyword">VALUES</span> (<span class="string">'user1'</span>, <span class="string">'locahost'</span>);</span><br></pre></td></tr></tbody></table></figure><p>执行完之后，另打开一个终端进行本地测试</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 能接收到 Received Access-Accept 就表示没问题</span></span><br><span class="line">radtest user1 password1 localhost 1812 testing123</span><br></pre></td></tr></tbody></table></figure><p>由于没有路由器和交换机，就只能再开一个Win虚拟机，进行测试，首先向<code>/etc/freeradius/3.0/clients.conf</code>添加Win虚拟机的信息</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/freeradius/3.0/clients.conf</span><br><span class="line">    <span class="comment"># 按照这个格式 里面有个localhost 用作本机测试的</span></span><br><span class="line">    client 192.168.1.109 {  <span class="comment"># Win虚拟机ip</span></span><br><span class="line">        ipaddr = 192.168.1.109  <span class="comment"># Win虚拟机ip</span></span><br><span class="line">        secret = justpwd  <span class="comment"># Win虚拟机访问radius的密码</span></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>好了，这时候，Win虚拟机上需要一个软件，NTRadPing，测试手法如下</p><p>天翼云：<a href="https://cloud.189.cn/t/AFJnYfy6Jbq2（访问码：kb1q）" target="_blank" rel="noopener">https://cloud.189.cn/t/AFJnYfy6Jbq2（访问码：kb1q）</a></p><p>蓝奏云：<a href="https://sidneygod.lanzous.com/iHcxEfxkqgf" target="_blank" rel="noopener">https://sidneygod.lanzous.com/iHcxEfxkqgf</a></p><img data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/NTRadPing_Test.jpg"><p>RADIUS Server/port就填安装freeradius的ip和freeradius的默认端口1812</p><p>Reply timeout这一行就这样</p><p>RADIUS Secret key就是上面配置的secret值</p><p>User-Name和Password还是之前的user1和password1</p><p>其余不用管，点击send，右侧就会得到服务器返回的数据</p><hr><p>毕竟我们有前端页面了，所以添加用户组和用户什么的，肯定不用手动去输MySQL语句，不友好。</p><p>添加用户组：Management > Profiles</p><p>添加用户：Management > Users</p><p>其实这些页面应该对应着数据库的操作..没咋研究，但是像client似乎比如通过配置文件，毕竟路由器没那么多吧..</p><p>还有，关于路由器和交换机的配置，由于手头没设备，没法玩..看教程，tplink的wap2能设置radius服务器信息</p><h1 id="6-拾遗"><a href="#6-拾遗" class="headerlink" title="6 拾遗"></a>6 拾遗</h1><h2 id="6-1-环境问题"><a href="#6-1-环境问题" class="headerlink" title="6.1 环境问题"></a>6.1 环境问题</h2><p>用Ubuntu16搞了一上午，php和MariaDB都不行，然后果断选择Ubuntu18，基本上没出啥错，哦，用的是清华源，不知道和这个有没有关系，本来觉得阿里源挺好，但是16上用的就是，想着换一下..</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"><span class="comment"># 把里面内容全换了</span></span><br><span class="line">sudo gedit /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清华源</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完了之后记得更新源</span></span><br><span class="line">sudo apt-get update && sudo apt upgrade</span><br></pre></td></tr></tbody></table></figure><h2 id="6-1-重启服务报错"><a href="#6-1-重启服务报错" class="headerlink" title="6.1 重启服务报错"></a>6.1 重启服务报错</h2><p>用systemctl或者service进行重启freeradius时，有时候会报错，说启动不了。大概长这样子</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Job <span class="keyword">for</span> freeradius.service failed because the control process exited with error code.</span><br><span class="line">See <span class="string">"systemctl status freeradius.service"</span> and <span class="string">"journalctl -xe"</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></tbody></table></figure><p><strong>直接reboot就好</strong>，当然了，实在启动不了，也可以执行<code>sudo freeradius -X</code>，可以看到调试信息</p><h2 id="6-1-关于log"><a href="#6-1-关于log" class="headerlink" title="6.1 关于log"></a>6.1 关于log</h2><p>daloradius有个Reports模块，默认显示四种log：daloRADIUS Log，Radius Log，System Log，Boot Log。其中前俩正常，就是后俩，syslog有这个文件，但是没权限；Boot Log显示的是dmesg，但Ubuntu18上却不是<code>/var/log/dmesg</code>这个文件，而是<code>/var/log/kern.log</code></p><p>于是，修改文件：<code>/var/www/html/daloradius/library/exten-boot_log.php</code>，加三句话</p><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$logfile_loc1 = '/var/log/dmesg';</span><br><span class="line">$logfile_loc2 = '/usr/local/var/log/dmesg';</span><br><span class="line"><span class="addition">+ $logfile_loc3 = '/var/log/kern.log';</span></span><br><span class="line"> </span><br><span class="line">if (file_exists($logfile_loc1))</span><br><span class="line">    $logfile = $logfile_loc1;</span><br><span class="line">else if (file_exists($logfile_loc2))</span><br><span class="line">    $logfile = $logfile_loc2;</span><br><span class="line"><span class="addition">+ else if (file_exists($logfile_loc3))</span></span><br><span class="line"><span class="addition">+     $logfile = $logfile_loc3;</span></span><br><span class="line">else {</span><br></pre></td></tr></tbody></table></figure><p>但是呢，还是有权限问题，因为<code>syslog</code>和<code>kern.log</code>，要是把这俩文件权限改为644倒是没问题，问题是重启就又不行了。顺带一提，mysql，apache2，freeradius都是开机自启的。不是syslog用户或adm组是没有读文件权限的，于是就把<code>www-data</code>加到adm用户组了，问题解决</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a www-data adm</span><br></pre></td></tr></tbody></table></figure><p>如果<code>/var/log/</code>下连syslog，kern.log..都没有，查看<code>/etc/rsyslog.d/50-default.conf</code>，是不是把那些log给禁用了，打开注释就好了</p><h2 id="6-1-证书配置"><a href="#6-1-证书配置" class="headerlink" title="6.1 证书配置"></a>6.1 证书配置</h2><p>参考：<a href="https://blog.csdn.net/lassewang/article/details/9159543" target="_blank" rel="noopener">https://blog.csdn.net/lassewang/article/details/9159543</a></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/opsprobe/p/9420502.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/opsprobe/p/9420502.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/lassewang/article/details/9159543&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lassewang/article/details/9159543&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;0-RADIUS&quot;&gt;&lt;a href=&quot;#0-RADIUS&quot; class=&quot;headerlink&quot; title=&quot;0 RADIUS&quot;&gt;&lt;/a&gt;0 RADIUS&lt;/h1&gt;&lt;p&gt;RADIUS：（Remote Authentication Dial In User Service）中文名为远程用户拨号认证服务，简称RADIUS，是目前应用最广泛的AAA协议（认证、授权和计费）&lt;/p&gt;
&lt;img data-src=&quot;https://gitee.com/SidneyGod/ImagePlace/raw/master/AAA组网示意图.png&quot;&gt;

&lt;p&gt;图中Device（例如交换机）向远程接入用户提供接入及与RADIUS服务器交互的服务。RADIUS服务器上则存储用户的身份信息、授权信息以及访问记录，对用户进行认证、授权和计费服务&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;认证过程如下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）客户端向接入设备发送一个EAPoL-Start报文，开始802.1x认证接入；&lt;/p&gt;
&lt;p&gt;（2）接入设备向客户端发送EAP-Request/Identity报文，要求客户端将用户名送上来；&lt;/p&gt;
    
    </summary>
    
    
      <category term="Other" scheme="https://sidneygod.github.io/categories/Other/"/>
    
    
      <category term="freeradius" scheme="https://sidneygod.github.io/tags/freeradius/"/>
    
      <category term="radius" scheme="https://sidneygod.github.io/tags/radius/"/>
    
      <category term="daloradius" scheme="https://sidneygod.github.io/tags/daloradius/"/>
    
  </entry>
  
  <entry>
    <title>[Relearning C/Cpp] Statements and Preprocessor</title>
    <link href="https://sidneygod.github.io/posts/4163f7c1/"/>
    <id>https://sidneygod.github.io/posts/4163f7c1/</id>
    <published>2020-08-09T16:02:25.000Z</published>
    <updated>2021-04-17T05:39:38.900Z</updated>
    
    <content type="html"><![CDATA[<p>突然发现两个不错的网址</p><p><a href="https://en.cppreference.com/w/cpp/language" target="_blank" rel="noopener">https://en.cppreference.com/w/cpp/language</a></p><p><a href="https://en.cppreference.com/w/c/language" target="_blank" rel="noopener">https://en.cppreference.com/w/c/language</a></p><p>书籍千千万，不如这个定义来得直接啊</p><a id="more"></a><h1 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h1><p>if…else，switch…case，while，for，do…while，break，continue，goto，return，空语句(一个分号)，try…catch</p><p>一些比较简单的就不说了，着重说一些没啥概念的</p><p><strong>switch…case</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> constant-expression  :</span><br><span class="line">       statement(s);</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">/* 可选的 */</span></span><br><span class="line">    <span class="keyword">case</span> constant-expression  :</span><br><span class="line">       statement(s);</span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">/* 可选的 */</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* 您可以有任意数量的 case 语句 */</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">/* 可选的 */</span></span><br><span class="line">       statement(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch 语句中的 expression 是一个常量表达式，必须是一个整型或枚举类型。</span></span><br><span class="line"><span class="comment">// C++中可以是一个 class 类型，其中 class 有一个单一的转换函数将其转换为整型或枚举类型。</span></span><br><span class="line"><span class="comment">// case 的 constant-expression 必须与 switch 中的变量具有相同的数据类型，且必须是一个常量或字面量</span></span><br></pre></td></tr></table></figure><p>这里就有一个问题了，if…else和switch…case谁效率更高呢？我发现比较有意思的事情是，没那么绝对，得看编译器给不给你优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">2</span>) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(a) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这种情况下，if...else啥也没干直接被优化掉了，没错直接删代码那种，但是switch还在</span></span><br></pre></td></tr></table></figure><p>汇编出来的代码是这样子的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">truepushq%rbp</span><br><span class="line">true...</span><br><span class="line">true.seh_endprologue</span><br><span class="line">truecall__main</span><br><span class="line">truemovl$3, -4(%rbp)  # int a &#x3D; 3;</span><br><span class="line">truecmpl$2, -4(%rbp)  # 和2比较</span><br><span class="line">trueje.L5</span><br><span class="line">truecmpl$3, -4(%rbp)  # 和3比较</span><br><span class="line">truejmp.L3</span><br><span class="line">.L5:</span><br><span class="line">truenop</span><br><span class="line">.L3:</span><br><span class="line">truemovl$0, %eax</span><br><span class="line">trueaddq$48, %rsp</span><br><span class="line">truepopq%rbp</span><br><span class="line">trueret</span><br></pre></td></tr></table></figure><p>但是这种情况肯定是不常用的，神经病啊..写个没用的代码？我们让代码变得有用一点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">2</span>) &#123;</span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        a = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(a) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: a = <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: a = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: a = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显然这次代码变得有用多了</span></span><br></pre></td></tr></table></figure><p>再汇编一下瞅瞅</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">truepushq%rbp</span><br><span class="line">true...</span><br><span class="line">true.seh_endprologue</span><br><span class="line">truecall__main</span><br><span class="line">truemovl$3, -4(%rbp)  # int a &#x3D; 3;</span><br><span class="line">truecmpl$1, -4(%rbp)  # if (a &#x3D;&#x3D; 1)</span><br><span class="line">truejne.L2               # 不等于1的话  所以.L2和.L4都是if的</span><br><span class="line">truemovl$1, -4(%rbp)  # 等于就直接赋值</span><br><span class="line">truejmp.L3               # 这里应当是到switch</span><br><span class="line">.L2:</span><br><span class="line">truecmpl$2, -4(%rbp)</span><br><span class="line">truejne.L4</span><br><span class="line">truemovl$2, -4(%rbp)</span><br><span class="line">truejmp.L3</span><br><span class="line">.L4:</span><br><span class="line">truemovl$3, -4(%rbp)</span><br><span class="line">.L3:                      # 这么看的话好像差不多，switch还比if多一句呢</span><br><span class="line">truecmpl$2, -4(%rbp)</span><br><span class="line">trueje.L5</span><br><span class="line">truecmpl$3, -4(%rbp)</span><br><span class="line">truejne.L6</span><br><span class="line">truemovl$2, -4(%rbp)</span><br><span class="line">truejmp.L7</span><br><span class="line">.L5:</span><br><span class="line">truemovl$1, -4(%rbp)</span><br><span class="line">truejmp.L7</span><br><span class="line">.L6:</span><br><span class="line">truemovl$3, -4(%rbp)</span><br><span class="line">.L7:</span><br><span class="line">truemovl$0, %eax</span><br><span class="line">trueaddq$48, %rsp</span><br><span class="line">truepopq%rbp</span><br><span class="line">trueret</span><br></pre></td></tr></table></figure><p>但是…<a href="https://blog.csdn.net/jeremyjone/article/details/103428009" target="_blank" rel="noopener">https://blog.csdn.net/jeremyjone/article/details/103428009</a> 网上都总结好了，我还折腾啥呢</p><p>这都是基本操作，就不说了，我们再看<strong>try…catch</strong>，这个东西只有C++有，叫做异常处理，有仨关键字：try，catch，throw，看看代码实例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 抛出个异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"Division by zero condition!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        divide(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">std</span>::exception <span class="keyword">const</span> &amp;e) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;  <span class="comment">// 需要注意的是 C++中没有finally</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义异常</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> :</span> <span class="keyword">public</span> <span class="built_in">std</span>::exception &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyException(<span class="keyword">int</span> level, <span class="built_in">std</span>::<span class="built_in">string</span> str)</span><br><span class="line">            : level(level), msg(<span class="built_in">std</span>::move(str)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里，what() 是异常类提供的一个公共方法，它已被所有子异常类重载。这将返回异常产生的原因</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">what</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg + <span class="string">" -- "</span> + <span class="built_in">std</span>::to_string(level);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> msg;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMyException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 抛出自定义的异常 总体使用和Java的异常还是很像的</span></span><br><span class="line">        <span class="keyword">throw</span> MyException(<span class="number">1</span>, <span class="string">"something wrong!"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MyException &amp;e) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标准 C++ 是没有类似 finally 这样的语句结构的。C# / Java 中保证无论是否出现异常，finally block 的代码均会得到执行；而 C++ 中，不论是否出现异常，局部变量的析构函数是会保证执行的，所以相对应与 finally block，C++ 的解决办法是 RAII，即Resource Aquisition Is Initialization。</p><p>基本的思路是，通过一个局部对象来表现资源，于是局部对象的析构函数将会释放资源。这样，程序员就不会忘记释放资源了。但是写析构函数是个技术活啊</p><p>C++11开始支持”Range-based for loop”，就是Java中的增强for循环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; int_vec&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;item : int_vec) &#123;  <span class="comment">// 这个几乎和Java增强for循环一样</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; item &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    PAIR <span class="built_in">map</span>[]&#123;&#123;<span class="string">"key"</span>,  <span class="number">1</span>&#125;,</span><br><span class="line">               &#123;<span class="string">"key2"</span>, <span class="number">2</span>&#125;,</span><br><span class="line">               &#123;<span class="string">"key3"</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">// 这个需要C++17特性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;[key, value] : <span class="built_in">map</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"key: "</span> &lt;&lt; key &lt;&lt; <span class="string">" -- value: "</span> &lt;&lt; value &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有个类似的函数<code>std::for_each()</code></p><h1 id="2-宏"><a href="#2-宏" class="headerlink" title="2 宏"></a>2 宏</h1><p>首先最常见的<code>#include</code>，导入头文件，一般分为<code>#include &lt;filename&gt;</code>和<code>#include &quot;filename&quot;</code></p><p>一般来说，用<code>&lt;&gt;</code>表示搜索标准库里面的；用<code>&quot;&quot;</code>表示搜索自己写的，如果自己写的没找到，再去搜标准库。所以我们直接用<code>&quot;&quot;</code>是没问题的</p><p>其次常见的就是<code>#define</code>了，定义常量，比如说我们会防止头文件重复导入，在头文件上定义一个常量来标识</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> XXX_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_H</span></span><br><span class="line"><span class="comment">//blablabla..</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//XXX_H</span></span></span><br></pre></td></tr></table></figure><p>这里又认识了<code>#ifndef</code>和<code>#endif</code>(结束判断)，意思就是if not define，当然也会有<code>ifdef</code>，这样就可以防止头文件被多次导入引出的麻烦了</p><p>还有我们常说的宏开关<code>#if</code>，这其实就是if的功能，看起来高大上一点而已，还有<code>#else</code>，和<code>#elif</code>(就是else if)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ee</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aa</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>还有<code>#pragma</code>，这个宏在visual studio中常见，这个宏用起来比较复杂，其一般格式是<code>#pragma para</code>，其中para表示参数，瞅瞅常见参数</p><p><strong>#pragma message</strong></p><p>常常这么用<code>#pragma message(&quot;some msg..&quot;)</code>，当编译器遇到这条指令时就在<strong>编译输出窗口</strong>中将消息文本打印出来，编译时才会打印哦</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\Workspace\CCpp\test&gt;g++ -std=c++<span class="number">17</span> main<span class="selector-class">.cpp</span> -o x</span><br><span class="line">main<span class="selector-class">.cpp</span>:<span class="number">1</span>:<span class="number">31</span>: note: <span class="selector-id">#pragma</span> message: hello world!</span><br><span class="line"> <span class="selector-id">#pragma</span> message(<span class="string">"hello world!"</span>)</span><br></pre></td></tr></table></figure><p>同时，<strong>还有<code>#error</code>和<code>#warning</code></strong>，也是针对编译时的，其中warning只是发出警告，error会停止编译</p><p><strong>#pragma code_seg</strong></p><p><code>#pragma code_seg( [&quot;section-name&quot;[,&quot;section-class&quot;] ] )</code>，它能够设置程序中函数代码存放的代码段，当我们开发驱动程序的时候就会使用到它</p><p><strong>#pragma once</strong></p><p>只要在头文件的最开始加入这条指令就能够保证头文件被编译一次，和上面提到的宏定义道理是一样的，这个宏在VS经常见到，但不是标准的，所以可能有的不兼容</p><p><strong>#pragma pack</strong></p><p>使用指令<code>#pragma pack (n)</code>，编译器将按照n个字节对齐。使用指令<code>#pragma pack ()</code>，编译器将取消自定义字节对齐方式。关于字节对齐，其实就是性能和空间之间的平衡</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TestStruct1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span> c1;</span><br><span class="line">   <span class="keyword">short</span> s;</span><br><span class="line">   <span class="keyword">char</span> c2;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>按照常理说，如果c1的内存位置是0，那么s就是1-2，c2就是3，i就是4-7；实际上呢，地址开头是0，2，4，8。意思就是默认四字节对齐</p><p>首先，每个成员分别按自己的方式对齐,并能最小化长度。</p><p>其次，复杂类型(如结构)的默认对齐方式是它最长的成员的对齐方式,这样在成员是复杂类型时,可以最小化长度。</p><p>然后，对齐后的长度必须是成员中最大的对齐参数的整数倍,这样在处理数组时可以保证每一项都边界对齐。</p><p>还有其他的，不了解了..</p><p>下一个是<strong><code>#line</code></strong>，说到这个，就不得不说<code>__LINE__</code>和<code>__FILE__</code>，一般来说这LINE和FILE就是单纯的行数和文件名，然而这个LINE和FILE就是固定的吗？显然不是，这个line就可以重新定义这两个宏</p><p>语法：<code>#line lineNum fileName</code>，其中lineNum是数字；fileName是字符串，可省略。这个宏定义了lineNum，那下一行的数字就是lineNum</p><p>再说<strong>可变参数宏</strong>，源码里面常见的打log的工具</p><p><code>#define ERROR(format, ...)  fprintf(stderr, format, __VA_ARGS__)</code></p><p>这<code>__VA_ARGS__</code>就是可变参数宏，嗯，可变参数..</p><p>再说源码里面常用的<strong><code>#，##，#@</code></strong></p><p>#: 对应变量字符串化</p><p>##: 连接符</p><p>#@: 将单字符的标记转成单字符 举个栗子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> x1 = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 1 #</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> trace(x, format) printf(#x <span class="meta-string">" = %"</span> #format <span class="meta-string">"\n"</span>, x)</span></span><br><span class="line">trace(i, d);  <span class="comment">// 相当于 printf("i = %d\n", i);</span></span><br><span class="line"><span class="comment">// 2 ##</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> trace2(a) trace(x##i, d)</span></span><br><span class="line">trace2(<span class="number">1</span>);  <span class="comment">// 相当于 trace(x1, d)</span></span><br><span class="line"><span class="comment">// 3 #@</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> B(x) #@x</span></span><br><span class="line">B(a);  <span class="comment">// 即为 'a', 但 B(abc); 没效果</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然发现两个不错的网址&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.cppreference.com/w/cpp/language&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.cppreference.com/w/cpp/language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.cppreference.com/w/c/language&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.cppreference.com/w/c/language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;书籍千千万，不如这个定义来得直接啊&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/Cpp" scheme="https://sidneygod.github.io/categories/C-Cpp/"/>
    
    
      <category term="C" scheme="https://sidneygod.github.io/tags/C/"/>
    
      <category term="Cpp" scheme="https://sidneygod.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Quickly build gitbook</title>
    <link href="https://sidneygod.github.io/posts/95b3592b/"/>
    <id>https://sidneygod.github.io/posts/95b3592b/</id>
    <published>2020-06-20T15:14:37.000Z</published>
    <updated>2020-06-21T04:03:02.926Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="0-start"><a href="#0-start" class="headerlink" title="0 start"></a>0 start</h1><p>感觉最近看的不少东西都是用gitbook写的，看起来也确实怪舒服的，举个例子：<a href="https://lingcoder.github.io/OnJava8/#/sidebar" target="_blank" rel="noopener">https://lingcoder.github.io/OnJava8/#/sidebar</a>，既能当博客又能当Wiki，于是我准备自己搭建一个。参考网上的步骤：</p><ol><li><p>文档编写采用统一标准，都用Markdown格式的，最后可以用gitbook自动生成静态网页；</p></li><li><p>分配好各阶段（版本）相关责任人编写的文档，待文档编写完成后统一上传到git；</p></li><li><p>jenkins负责拉取正式版本（release开头）的文档，用gitbook编译后，同步到云端文档服务器</p></li><li><p>云端服务器制作一个入口页面，页面里面可以指引各个版本文档；http服务用nginx，指引到这个页面；</p></li></ol><p>其中第三步我觉得没必要用Jenkins，直接设置一个定时任务就好了。。其实搭建一个从零开始搭建一个完整Gitbook还是比较麻烦的，详情参考下方的参考文档。我既然说了快速，那必然是简单而又傻瓜式的搭建了..Let’s go!</p><a id="more"></a><p>参考文档：</p><p><a href="http://huaqianlee.github.io/2019/05/05/Git/gitlab-jenkins-gitbook-to-create-LAN-gitbook/" target="_blank" rel="noopener">Gitbook + Jenkins + Gitlab 搭建内网自动构建的 Gitbook</a></p><p><a href="http://gitbook.zhangjikai.com/installation.html" target="_blank" rel="noopener">Gitbook使用教程</a></p><p><a href="https://www.bookstack.cn/read/yangzh-gitbook/f515035a29711964.md" target="_blank" rel="noopener">Gitbook学习笔记</a></p><p><a href="GitBook插件整理">Gitbook插件整理</a></p><p><a href="https://blog.zhenglin.work/other/devops_practices_gitbook_web.html#%E5%88%A9%E7%94%A8gitbookgitjenkinsnodejs%E6%90%AD%E5%BB%BA%E8%B5%B7%E4%B8%80%E5%A5%97%E5%A4%9A%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E%E7%9A%84%E6%96%87%E6%A1%A3%E7%BD%91%E7%AB%99" target="_blank" rel="noopener">利用gitbook+git+jenkins+nodejs搭建起一套多版本说明的文档网站</a></p><h1 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1 准备环境"></a>1 准备环境</h1><h2 id="1-1-设置root密码"><a href="#1-1-设置root密码" class="headerlink" title="1.1 设置root密码"></a>1.1 设置root密码</h2><p>准备环境这一步很基础也很重要，我使用的是Ubuntu16的虚拟机，打开虚拟机后<strong>先确保root用户是有密码</strong>的，不是sudo的密码，可以在终端试试<code>su</code>能不能切换到root，如果不行，先给root设置密码</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sidney@ubuntu:~$ sudo passwd root  <span class="comment"># 设置一次密码就好了 以后就可以用su切换root了</span></span><br><span class="line">[sudo] password <span class="keyword">for</span> sidney: </span><br><span class="line">Enter new UNIX password: </span><br><span class="line">Retype new UNIX password: </span><br><span class="line">passwd: password updated successfully</span><br><span class="line">sidney@ubuntu:~$</span><br></pre></td></tr></tbody></table></figure><h2 id="1-2-创建git用户"><a href="#1-2-创建git用户" class="headerlink" title="1.2 创建git用户"></a>1.2 创建git用户</h2><p>为了不影响当前的环境，我们先创建一个git用户，这个git也可以换成其他喜欢的字符</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sidney@ubuntu:~$ sudo adduser git</span><br><span class="line">Adding user `git<span class="string">' ...</span></span><br><span class="line"><span class="string">Adding new group `git'</span> (1001) ...</span><br><span class="line">Adding new user `git<span class="string">' (1001) with group `git'</span> ...</span><br><span class="line">Creating home directory `/home/git<span class="string">' ...</span></span><br><span class="line"><span class="string">Copying files from `/etc/skel'</span> ...</span><br><span class="line">Enter new UNIX password: </span><br><span class="line">Retype new UNIX password: </span><br><span class="line">passwd: password updated successfully</span><br><span class="line">Changing the user information <span class="keyword">for</span> git</span><br><span class="line">Enter the new value, or press ENTER <span class="keyword">for</span> the default</span><br><span class="line">trueFull Name []: </span><br><span class="line">trueRoom Number []: </span><br><span class="line">trueWork Phone []: </span><br><span class="line">trueHome Phone []: </span><br><span class="line">trueOther []: </span><br><span class="line">Is the information correct? [Y/n] y</span><br><span class="line">sidney@ubuntu:~$</span><br></pre></td></tr></tbody></table></figure><p>创建好git用户后，应该就有<code>/home/git</code>目录了，如果没有的话..自己想办法吧..</p><h2 id="1-3-下载环境"><a href="#1-3-下载环境" class="headerlink" title="1.3 下载环境"></a>1.3 下载环境</h2><p>这里用我打包好的环境，省时省力，解压改点东西就能用了，下载链接：</p><p>蓝奏云：<a href="https://sidneygod.lanzous.com/iwOFzdwazyj" target="_blank" rel="noopener">https://sidneygod.lanzous.com/iwOFzdwazyj</a><br>密码:sidney</p><p>天翼云：<a href="https://cloud.189.cn/t/eAnyamUNBrum" target="_blank" rel="noopener">https://cloud.189.cn/t/eAnyamUNBrum</a><br>访问码：jtv3</p><p>没错，就是不提供百度云..这里先把git和openssh-server安装了，顺便当前用户生成个公钥</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">sidney@ubuntu:~$ sudo apt-get install git  <span class="comment"># 安装git 我安装过了 所以结果不一样</span></span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">git is already the newest version (1:1.9.1-1ubuntu0.10).</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 1 not upgraded.</span><br><span class="line">sidney@ubuntu:~$ sudo apt-get install openssh-server  <span class="comment"># 安装openssh-server</span></span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">openssh-server is already the newest version (1:6.6p1-2ubuntu2.13).</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 1 not upgraded.</span><br><span class="line">sidney@ubuntu:~$ ssh-keygen  <span class="comment"># 生成公钥 这个我也生成过了..</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/sidney/.ssh/id_rsa): </span><br><span class="line">/home/sidney/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? y</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/sidney/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/sidney/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line"><span class="built_in">cd</span>:f8:18:9a:8b:de:91:d0:e0:ce:d3:5c:93:5a:37:dc sidney@ubuntu</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+--[ RSA 2048]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|    .            |</span></span><br><span class="line"><span class="string">|   . o   * .     |</span></span><br><span class="line"><span class="string">|    o . S * E    |</span></span><br><span class="line"><span class="string">|   o + B * .     |</span></span><br><span class="line"><span class="string">|    + O . .      |</span></span><br><span class="line"><span class="string">|     + o         |</span></span><br><span class="line"><span class="string">|   .o o          |</span></span><br><span class="line"><span class="string">+-----------------+</span></span><br><span class="line"><span class="string">sidney@ubuntu:~$ sudo vim /etc/ssh/ssh_config  # 大概在39行 把Port 22注释打开 默认端口</span></span><br><span class="line"><span class="string">sidney@ubuntu:~$ sudo /etc/init.d/ssh stop  # 重启一下ssh服务</span></span><br><span class="line"><span class="string">[ ok ] Stopping ssh (via systemctl): ssh.service.</span></span><br><span class="line"><span class="string">sidney@ubuntu:~$ sudo /etc/init.d/ssh start</span></span><br><span class="line"><span class="string">[ ok ] Starting ssh (via systemctl): ssh.service.</span></span><br><span class="line"><span class="string">sidney@ubuntu:~$</span></span><br></pre></td></tr></tbody></table></figure><p>哦，对了，如果没配置git，顺便把git配置一下</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Sidney Ding"</span></span><br><span class="line">git config --global user.email <span class="string">"sidneyding183@gmail.com"</span></span><br></pre></td></tr></tbody></table></figure><p>这个环境配置的差不多了..接下来该处理我们下载下来的文件<code>git.zip</code>了</p><h2 id="1-4-解压git-zip"><a href="#1-4-解压git-zip" class="headerlink" title="1.4 解压git.zip"></a>1.4 解压git.zip</h2><p>首先，在终端切换用户到git，并把git.zip拷贝到<code>/home/git</code>下，然后来一个一个配置..</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sidney@ubuntu:~$ su git  <span class="comment"># 切换用户</span></span><br><span class="line">Password: </span><br><span class="line">git@ubuntu:/home/sidney$ <span class="built_in">cd</span> ~  <span class="comment"># 进入git的home目录</span></span><br><span class="line">git@ubuntu:~$ ll git.zip </span><br><span class="line">-rw-r--r-- 1 root root 96128663 Jun 21 00:20 git.zip</span><br><span class="line">git@ubuntu:~$ sudo chmod 666 git.zip  <span class="comment"># 改变模式失败..</span></span><br><span class="line">[sudo] password <span class="keyword">for</span> git: </span><br><span class="line">git is not <span class="keyword">in</span> the sudoers file.  This incident will be reported.</span><br><span class="line">git@ubuntu:~$</span><br></pre></td></tr></tbody></table></figure><p>在git中调用<code>sudo</code>，不出意外都会报这个错的<code>git is not in the sudoers file.  This incident will be reported.</code>，接下来的操作，<strong><font color="red">一定要确保root有密码！一定要确保root有密码！一定要确保root有密码！</font></strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git@ubuntu:~$ su  <span class="comment"># 切换到root用户</span></span><br><span class="line">Password: </span><br><span class="line">root@ubuntu:/home/git<span class="comment"># ll /etc/sudoers  # 查看文件权限</span></span><br><span class="line">-r--r----- 1 root root 755 Jun 20 23:54 /etc/sudoers</span><br><span class="line">root@ubuntu:/home/git<span class="comment"># chmod 0660 /etc/sudoers  # 加个可以写的权限</span></span><br><span class="line">root@ubuntu:/home/git<span class="comment"># vim /etc/sudoers  # 在这个文件中加一句  git ALL=(ALL) ALL </span></span><br><span class="line">root@ubuntu:/home/git<span class="comment"># chmod 0440 /etc/sudoers  # 一定要把权限改回去 不然大家都不能用sudo了</span></span><br><span class="line">root@ubuntu:/home/git<span class="comment"># ll /etc/sudoers</span></span><br><span class="line">-r--r----- 1 root root 773 Jun 21 00:30 /etc/sudoers</span><br><span class="line">root@ubuntu:/home/git<span class="comment"># exit  # 退出root</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">git@ubuntu:~$ sudo chmod 666 git.zip  <span class="comment"># 再次修改git.zip权限</span></span><br><span class="line">[sudo] password <span class="keyword">for</span> git: </span><br><span class="line">git@ubuntu:~$ ll git.zip </span><br><span class="line">-rw-rw-rw- 1 root root 96128663 Jun 21 00:20 git.zip  <span class="comment"># 没毛病</span></span><br><span class="line">git@ubuntu:~$</span><br></pre></td></tr></tbody></table></figure><p>如果你在这不小心，用sudo改了<code>/etc/sudoers</code>的模式，然后你还没有root密码..作孽啊，用下面的方法试试能不能救..不然重装系统吧</p><p><a href="https://www.cnblogs.com/sea-stream/p/9852478.html" target="_blank" rel="noopener">sudo: /etc/sudoers is world writable sudo: no valid sudoers sources found</a></p><p>终于可以解压了..</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git@ubuntu:~$ unzip git.zip </span><br><span class="line">Archive:  git.zip</span><br><span class="line">   creating: book/</span><br><span class="line">  inflating: book/serve.log          </span><br><span class="line">  inflating: book/book.json          </span><br><span class="line">  inflating: book/package-lock.json  </span><br><span class="line">  inflating: book/commands.txt</span><br><span class="line">  ...</span><br><span class="line">git@ubuntu:~$ ll  <span class="comment"># 解压完的目录应该是这样的</span></span><br><span class="line">total 93932</span><br><span class="line">drwxr-xr-x 7 git  git      4096 Jun 21 00:38 ./</span><br><span class="line">drwxr-xr-x 4 root root     4096 Jun 21 00:02 ../</span><br><span class="line">-rw------- 1 git  git       100 Jun 21 00:24 .bash_history</span><br><span class="line">-rw-r--r-- 1 git  git       220 Jun 21 00:02 .bash_logout</span><br><span class="line">-rw-r--r-- 1 git  git      3771 Jun 21 00:02 .bashrc  <span class="comment"># 这个必须在</span></span><br><span class="line">drwxrwxr-x 6 git  git      4096 Jun 20 22:39 book/  <span class="comment"># 必须</span></span><br><span class="line">drwxrwxr-x 7 git  git      4096 Jun 20 09:10 book.git/  <span class="comment"># 必须</span></span><br><span class="line">-rw-r--r-- 1 git  git      8980 Jun 21 00:02 examples.desktop</span><br><span class="line">-rw-rw-rw- 1 root root 96128663 Jun 21 00:20 git.zip</span><br><span class="line">drwxrwxr-x 6 git  git      4096 Jun 20 22:45 nginx/  <span class="comment"># 必须</span></span><br><span class="line">drwxr-xr-x 9 git  git      4096 Jun 20 22:30 nginx-1.18.0/</span><br><span class="line">drwxr-xr-x 7 git  git      4096 Jun 20 09:30 node-v12.18.1-linux-x64/  <span class="comment"># 必须</span></span><br><span class="line">-rw-r--r-- 1 git  git       655 Jun 21 00:02 .profile  <span class="comment"># 必须</span></span><br></pre></td></tr></tbody></table></figure><p>如果缺了必须的文件，是一件很麻烦的事..</p><h2 id="1-5-配置环境"><a href="#1-5-配置环境" class="headerlink" title="1.5 配置环境"></a>1.5 配置环境</h2><p>接下来要配置的就不多了</p><h3 id="1-5-1-node-js"><a href="#1-5-1-node-js" class="headerlink" title="1.5.1 node.js"></a>1.5.1 node.js</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置node.js环境变量</span></span><br><span class="line">git@ubuntu:~$ <span class="built_in">cd</span> node-v12.18.1-linux-x64/bin</span><br><span class="line">git@ubuntu:~/node-v12.18.1-linux-x64/bin$ <span class="built_in">pwd</span></span><br><span class="line">/home/git/node-v12.18.1-linux-x64/bin  <span class="comment"># 注意这个路径</span></span><br><span class="line">git@ubuntu:~/node-v12.18.1-linux-x64/bin$ vim ~/.bashrc  <span class="comment"># 主要是把那个路径添加到环境变量</span></span><br><span class="line">    <span class="comment"># node.js</span></span><br><span class="line">    <span class="built_in">export</span> PATH=/home/git/node-v12.18.1-linux-x64/bin:<span class="variable">$PATH</span></span><br><span class="line">git@ubuntu:~/node-v12.18.1-linux-x64/bin$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">git@ubuntu:~/node-v12.18.1-linux-x64/bin$ node -v</span><br><span class="line">v12.18.1  <span class="comment"># 能正确显示版本 说明没问题</span></span><br><span class="line">git@ubuntu:~/node-v12.18.1-linux-x64/bin$</span><br></pre></td></tr></tbody></table></figure><h3 id="1-5-2-gitbook"><a href="#1-5-2-gitbook" class="headerlink" title="1.5.2 gitbook"></a>1.5.2 gitbook</h3><p>先去看看gitbook能不能用</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git@ubuntu:~/node-v12.18.1-linux-x64/bin$ <span class="built_in">cd</span> ~/book</span><br><span class="line">git@ubuntu:~/book$ gitbook -V  <span class="comment"># 耐心等一会，需要安装点东西</span></span><br><span class="line">CLI version: 2.3.2</span><br><span class="line">Installing GitBook 3.2.3</span><br><span class="line">...</span><br><span class="line">GitBook version: 3.2.3</span><br><span class="line">git@ubuntu:~/book$ gitbook serve  <span class="comment"># 先爽一下 报error不用管 那个是我故意写错的 一个插件导致的</span></span><br><span class="line">Live reload server started on port: 35729</span><br><span class="line">Press CTRL+C to quit ...</span><br><span class="line">...</span><br><span class="line">Starting server ...</span><br><span class="line">Serving book on http://localhost:4000</span><br></pre></td></tr></tbody></table></figure><p>这个时候，打开浏览器，访问<code>http://127.0.0.1:4000</code>应该是能访问的，如下图</p><img data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/null/gitbook_display.png"><h3 id="1-5-3-git"><a href="#1-5-3-git" class="headerlink" title="1.5.3 git"></a>1.5.3 git</h3><p>再配置一下我们的仓库</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">git@ubuntu:~/book$ cd docs/</span><br><span class="line">git@ubuntu:~/book/docs$ ifconfig  # 先看一下本机ip 毕竟要大家一起玩嘛..</span><br><span class="line">ens33     Link encap:Ethernet  HWaddr 00:0c:29:6b:c5:06  </span><br><span class="line">          inet addr:192.168.1.109  Bcast:192.168.1.255  Mask:255.255.255.0</span><br><span class="line">          ...</span><br><span class="line"></span><br><span class="line">git@ubuntu:~/book/docs$ vim .git/config</span><br><span class="line">    [remote "origin"]</span><br><span class="line">            url = git@192.168.1.109:/home/git/book.git  # 重点是这句 自行修改一下</span><br><span class="line">            fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果没问题的话 我们更新一下代码试试</span></span><br><span class="line">git@ubuntu:~/book/docs$ git pull origin master  # 更新代码应该是没问题的 并且是最新的</span><br><span class="line">The authenticity of host '192.168.1.109 (192.168.1.109)' can't be established.</span><br><span class="line">ECDSA key fingerprint is 0a:0a:d6:c8:7d:cf:b1:75:8e:c4:fe:ac:13:16:aa:f8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added '192.168.1.109' (ECDSA) to the list of known hosts.</span><br><span class="line">git@192.168.1.109's password: </span><br><span class="line">From 192.168.1.109:/home/git/book</span><br><span class="line"> * branch            master     -> FETCH_HEAD</span><br><span class="line">Already up-to-date.</span><br><span class="line">git@ubuntu:~/book/docs$ vim README.md  # 我们修改一下README.md  干掉那个error</span><br><span class="line">git@ubuntu:~/book/docs$ git diff</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index 71a64d2..7119efd 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -3,4 +3,7 @@ just for a test..</span><br><span class="line"> </span><br><span class="line"> test2..</span><br><span class="line"> what is Markdown?</span><br><span class="line">+'''bash  # 主要是把这里的txt换成一种语言</span><br><span class="line">+hahaha, kanni zenme ban?</span><br><span class="line">+'''</span><br><span class="line">git@ubuntu:~/book/docs$ git add README.md  # 下面是验证一笔提交..</span><br><span class="line">git@ubuntu:~/book/docs$ git commit -m "change txt to bash"</span><br><span class="line"></span><br><span class="line">*** Please tell me who you are.</span><br><span class="line"></span><br><span class="line">Run</span><br><span class="line"></span><br><span class="line">  git config --global user.email "you@example.com"</span><br><span class="line">  git config --global user.name "Your Name"</span><br><span class="line"></span><br><span class="line">to set your account's default identity.</span><br><span class="line">Omit --global to set the identity only in this repository.</span><br><span class="line"></span><br><span class="line">fatal: empty ident name (for <git@ubuntu.(none)>) not allowed</span><br><span class="line"><span class="meta">#</span><span class="bash"> 忘了配置git了..</span></span><br><span class="line">git@ubuntu:~/book/docs$ git config --global user.email "sidneyding183@gmail.com"</span><br><span class="line">git@ubuntu:~/book/docs$ git config --global user.name "SidneyGod"</span><br><span class="line">git@ubuntu:~/book/docs$ git commit -m "change txt to bash"</span><br><span class="line">[master 3906bd7] change txt to bash</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br><span class="line">git@ubuntu:~/book/docs$ git push origin master  # 说明push也没有问题</span><br><span class="line">git@192.168.1.109's password: </span><br><span class="line">Counting objects: 5, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 350 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">To git@192.168.1.109:/home/git/book.git</span><br><span class="line">   f242669..3906bd7  master -> master</span><br><span class="line">git@ubuntu:~/book/docs$ </span><br><span class="line">git@ubuntu:~/book/docs$ cd ../</span><br><span class="line">git@ubuntu:~/book$ gitbook build && gitbook serve  # 这次就不会报error了</span><br><span class="line">info: 29 plugins are installed </span><br><span class="line">info: 24 explicitly listed</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>这一步其实是为了确定仓库是好的，我才不会用<code>gitbook serve</code>呢！</p><h3 id="1-5-4-nginx"><a href="#1-5-4-nginx" class="headerlink" title="1.5.4 nginx"></a>1.5.4 nginx</h3><p>这东西也不用了解太多，用就完事了..</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git@ubuntu:~/book$ <span class="built_in">cd</span> ../nginx</span><br><span class="line">git@ubuntu:~/nginx$ <span class="built_in">pwd</span></span><br><span class="line">/home/git/nginx</span><br><span class="line">git@ubuntu:~/nginx$ vim conf/nginx.conf  <span class="comment"># 先看一下第29行配置对不对</span></span><br><span class="line">    <span class="built_in">alias</span> /home/git/book/_book;  <span class="comment"># 如果_book不在这个目录 修改一下</span></span><br><span class="line">git@ubuntu:~/nginx$ </span><br><span class="line">git@ubuntu:~/nginx$ sudo ./sbin/nginx -p /home/git/nginx  <span class="comment"># 运行nginx</span></span><br><span class="line">[sudo] password <span class="keyword">for</span> git: </span><br><span class="line">git@ubuntu:~/nginx$ ls  <span class="comment"># 运行完 多几个temp才是正常的</span></span><br><span class="line">client_body_temp  conf  fastcgi_temp  html  logs  proxy_temp  sbin  scgi_temp  uwsgi_temp</span><br></pre></td></tr></tbody></table></figure><p>这个时候应该可以通过<code>http://192.168.1.109/book</code>来访问了，访问成改表示nginx配置成功，<code>http://192.168.1.109/</code>就可以用来”<strong>制作一个入口页面，页面里面可以指引各个版本文档</strong>“，多本gitbook才是最终目标</p><h3 id="1-5-5-git-hook"><a href="#1-5-5-git-hook" class="headerlink" title="1.5.5 git hook"></a>1.5.5 git hook</h3><p>之前用的定时..感觉还是不行，不好用，于是发现git新大陆，叫git hook，先到<code>book.git</code>仓库看看吧</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git@ubuntu:~/book.git/hooks$ <span class="built_in">pwd</span>  <span class="comment"># 注意这个目录</span></span><br><span class="line">/home/git/book.git/hooks</span><br><span class="line">git@ubuntu:~/book.git/hooks$ vim post-receive  <span class="comment"># 创建post-receive文件 当有push就会执行</span></span><br><span class="line">git@ubuntu:~/book.git/hooks$ chmod a+x post-receive  <span class="comment"># 加可执行权限</span></span><br></pre></td></tr></tbody></table></figure><p>以下是<code>post-receive</code>内容</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> -e  <span class="comment"># 这两句调试用的</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> -x</span></span><br><span class="line"></span><br><span class="line">PATH=/home/git/node-v12.18.1-linux-x64/bin/:$PATH  # 这里路径</span><br><span class="line"></span><br><span class="line">IS_BARE=$(git rev-parse --is-bare-repository)</span><br><span class="line">if [ -z "$IS_BARE" ]; then</span><br><span class="line">    echo >&2 "fatal: post-receive: IS_NOT_BARE"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">unset GIT_DIR</span><br><span class="line">cd '/home/git/book/docs'  # 注意这里的路径</span><br><span class="line">echo "deploying the gitbook.."</span><br><span class="line">result=`git pull origin master`</span><br><span class="line">[[ $result = "Already up-to-date." ]] && exit 0 || echo "File updated"</span><br><span class="line">cd '/home/git/book'  # 还有这里</span><br><span class="line">gitbook build</span><br></pre></td></tr></tbody></table></figure><p>这样就特别完美了..哈哈..比定时任务高大上多了..</p><h3 id="1-5-6-crontab"><a href="#1-5-6-crontab" class="headerlink" title="1.5.6 crontab"></a><del>1.5.6 crontab</del></h3><p>其实到这里就已经好了，让nginx一直在后台运行就好了，如果<code>/home/git/book/docs</code>有变动，比如新的文档啥的，就在<code>/home/git/book</code>目录下执行一次<code>gitbook build</code>就好了，但是怎么说呢？太累。写完文档push完了，你还得再去pull一次，麻烦，所以才有上面的Jenkins监听push行为，然后自动进行更新docs，并执行<code>gitbook build</code>，我觉得这太大材小用了，webhookit或许不错，不过我最终还是觉得定时任务最方便..</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先 把本机的公钥加到.ssh/authorized_keys中</span></span><br><span class="line">git@ubuntu:~/book$ ssh-keygen</span><br><span class="line">git@ubuntu:~/book$ cat ~/.ssh/id_rsa.pub</span><br><span class="line">git@ubuntu:~/book$ vim ~/.ssh/authorized_keys  <span class="comment"># 什么没有这个文件 那建一个呗</span></span><br><span class="line"><span class="comment"># 然后写一个简单的脚本..</span></span><br><span class="line">git@ubuntu:~/book$ vim build.sh  <span class="comment"># 简单的更新并build的脚本</span></span><br><span class="line">    <span class="comment">#!/bin/bash</span></span><br><span class="line">    <span class="built_in">set</span> -e</span><br><span class="line">    <span class="built_in">set</span> -x</span><br><span class="line"></span><br><span class="line">    PATH=/home/git/node-v12.18.1-linux-x64/bin/:<span class="variable">$PATH</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="string">'/home/git/book/docs'</span></span><br><span class="line">    result=`git pull origin master`</span><br><span class="line">    [[ <span class="variable">$result</span> = <span class="string">"Already up-to-date."</span> ]] && <span class="built_in">exit</span> 0 || <span class="built_in">echo</span> <span class="string">"File updated"</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="string">'/home/git/book'</span></span><br><span class="line">    gitbook build</span><br><span class="line">git@ubuntu:~/book$ chmod a+x build.sh</span><br><span class="line"><span class="comment"># 设置定时任务</span></span><br><span class="line">git@ubuntu:~/book$ crontab -e</span><br><span class="line"></span><br><span class="line">Select an editor.  To change later, run <span class="string">'select-editor'</span>.</span><br><span class="line">  1. /bin/ed</span><br><span class="line">  2. /bin/nano        <---- easiest</span><br><span class="line">  3. /usr/bin/vim.basic</span><br><span class="line"></span><br><span class="line">Choose 1-3 [2]: 3</span><br><span class="line">    <span class="comment"># 加了这么一句 一分钟执行一次脚本，并输出log..</span></span><br><span class="line">    */1 * * * * /bin/bash /home/git/book/build.sh >> /home/git/book/crontab.log 2>&1</span><br><span class="line">crontab: installing new crontab</span><br><span class="line">git@ubuntu:~/book$ service cron restart  <span class="comment"># 重启cron服务</span></span><br></pre></td></tr></tbody></table></figure><p>可算是大功告成了！</p><h1 id="2-多人协作"><a href="#2-多人协作" class="headerlink" title="2 多人协作"></a>2 多人协作</h1><p>要git本就是为了多人协作，这时候再开一个终端，查看另一个用户的公钥</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sidney@ubuntu:~$ cat .ssh/id_rsa.pub  <span class="comment"># 注意 这里不是 git@ubuntu了</span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDkdVqvsdIjn28XEA4wC29SyiQALP9eLyOXC/WRuPR4WHagVCu8JO415oHgUo8uAlXIQAS2AcAQA+1bzuipSmCEo2RtIgLovjoI1Iqw475NP+ExlkRjw4Z sidney@ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将sidney的公钥加到git的.ssh/authorized_keys中</span></span><br><span class="line">git@ubuntu:~$ vim ~/.ssh/authorized_keys  <span class="comment"># 注意这里是git@ubuntu</span></span><br></pre></td></tr></tbody></table></figure><p>接下来呢，当然是要尝试拉代码和推代码了，哦不，是文档..</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">sidney@ubuntu:~$ <span class="built_in">cd</span> Downloads/</span><br><span class="line"><span class="comment"># 克隆仓库 没有问题..</span></span><br><span class="line">sidney@ubuntu:~/Downloads$ git <span class="built_in">clone</span> git@192.168.1.109:/home/git/book.git</span><br><span class="line">Cloning into <span class="string">'book'</span>...</span><br><span class="line">remote: Counting objects: 46, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (35/35), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 46 (delta 11), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (46/46), 4.94 KiB | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (11/11), <span class="keyword">done</span>.</span><br><span class="line">Checking connectivity... <span class="keyword">done</span>.</span><br><span class="line">sidney@ubuntu:~/Downloads$ <span class="built_in">cd</span> book/</span><br><span class="line">sidney@ubuntu:~/Downloads/book$ ls</span><br><span class="line">ch1  GLOSSARY.md  last_ch  README.md  SUMMARY.md</span><br><span class="line">sidney@ubuntu:~/Downloads/book$ vim README.md  <span class="comment"># 修改README.md</span></span><br><span class="line">sidney@ubuntu:~/Downloads/book$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add <file>..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- <file>..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">truemodified:   README.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br><span class="line">sidney@ubuntu:~/Downloads/book$ git diff</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index aae20fc..a35bf2b 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -1,4 +1,5 @@</span><br><span class="line"> <span class="comment"># Introduction</span></span><br><span class="line">+我是最棒的！</span><br><span class="line"> just <span class="keyword">for</span> a <span class="built_in">test</span>..</span><br><span class="line"> </span><br><span class="line"> test2..</span><br><span class="line">sidney@ubuntu:~/Downloads/book$ git add README.md</span><br><span class="line">sidney@ubuntu:~/Downloads/book$ git commit -m <span class="string">"test"</span></span><br><span class="line">[master 7f99d72] <span class="built_in">test</span></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">sidney@ubuntu:~/Downloads/book$ git push origin master  <span class="comment"># 推也没问题</span></span><br><span class="line">Counting objects: 5, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 366 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">To git@192.168.1.109:/home/git/book.git</span><br><span class="line">   3906bd7..7f99d72  master -> master</span><br><span class="line">sidney@ubuntu:~/Downloads/book$ git pull origin master  <span class="comment"># 拉代码也没问题</span></span><br><span class="line">From 192.168.1.109:/home/git/book</span><br><span class="line"> * branch            master     -> FETCH_HEAD</span><br><span class="line">Already up-to-date.</span><br><span class="line">sidney@ubuntu:~/Downloads/book$</span><br></pre></td></tr></tbody></table></figure><p>耐心等待个一两分钟..再刷新页面，应该是能看到变化的，如果没变化，那么可能是定时任务出问题了，或者脚本有问题..这么看的话，多人协作是没有问题的了</p><h1 id="3-gitbook使用"><a href="#3-gitbook使用" class="headerlink" title="3 gitbook使用"></a>3 gitbook使用</h1><p>想知道详细信息的可以百度或者看上面我提供的几条链接</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git@ubuntu:~/book$ tree -L 1</span><br><span class="line">.</span><br><span class="line">├── _book  <span class="comment"># gitbook生成的静态网页的地方</span></span><br><span class="line">├── book.json  <span class="comment"># gitbook配置文件 包括安装插件什么的 我已经安装差不多了</span></span><br><span class="line">├── build.sh  <span class="comment"># 自己写的更新脚本</span></span><br><span class="line">├── commands.txt  <span class="comment"># 常用命令记录</span></span><br><span class="line">├── docs  <span class="comment"># 存储源文档仓库</span></span><br><span class="line">├── node_modules  <span class="comment"># 安装的插件</span></span><br><span class="line">├── package-lock.json  <span class="comment"># 安装的插件列表/信息</span></span><br><span class="line">├── serve.log</span><br><span class="line">└── style  <span class="comment"># 自定义样式表</span></span><br></pre></td></tr></tbody></table></figure><p>由于配置啥的我已经弄得差不多了，直接说说怎么用</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git@ubuntu:~/book$ tree docs/</span><br><span class="line">docs/</span><br><span class="line">├── ch1</span><br><span class="line">│   ├── ch1.1</span><br><span class="line">│   │   └── ch1.1.md</span><br><span class="line">│   └── Chapter1.md</span><br><span class="line">├── GLOSSARY.md</span><br><span class="line">├── last_ch</span><br><span class="line">│   └── last_ch.md</span><br><span class="line">├── README.md</span><br><span class="line">└── SUMMARY.md</span><br><span class="line"></span><br><span class="line">3 directories, 6 files</span><br></pre></td></tr></tbody></table></figure><h2 id="3-1-SUMMARY-md"><a href="#3-1-SUMMARY-md" class="headerlink" title="3.1 SUMMARY.md"></a>3.1 SUMMARY.md</h2><p>概要文件主要存放 GitBook 的文件目录信息，左侧的目录就是根据这个文件来生成的，默认对应的文件是 SUMMARY.md，可以在book.json重新定义该文件的对应值。它通过Markdown中的<strong>列表语法</strong>(其实就是<strong>通过缩进</strong>)来表示文件的父子关系，下面是一个简单的示例：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Summary</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>[<span class="string">Introduction</span>](<span class="link">README.md</span>)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="section"># PART I  <!-- 这个懂吧 --></span></span><br><span class="line"><span class="bullet">* </span>[<span class="string">CHAPTER 1</span>](<span class="link">./ch1/Chapter1.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">ch1.1</span>](<span class="link">./ch1/ch1.1/ch1.1.md</span>)  <span class="xml"><span class="comment"><!-- 支持文档做子目录 --></span></span></span><br><span class="line"></span><br><span class="line">------  <!-- 章节分割线 --></span><br><span class="line"><span class="bullet">* </span>[<span class="string">Last Chapter</span>](<span class="link">./last_ch/last_ch.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">title1</span>](<span class="link">./last_ch/last_ch.md#title1</span>)  <span class="xml"><span class="comment"><!-- 也支持文件中的锚点做目录 --></span></span></span><br><span class="line"><span class="bullet">    * </span>[<span class="string">title2</span>](<span class="link">./last_ch/last_ch.md#title2</span>)</span><br><span class="line"><span class="bullet">        * </span>[<span class="string">title2.1</span>](<span class="link">./last_ch/last_ch.md#title2-1</span>)</span><br><span class="line"><span class="bullet">            * </span>[<span class="string">title2.1</span>](<span class="link">./last_ch/last_ch.md#title2-1-1</span>)</span><br><span class="line"><span class="bullet">        * </span>[<span class="string">title2.2</span>](<span class="link">./last_ch/last_ch.md#title2-2</span>)</span><br></pre></td></tr></tbody></table></figure><p>可以对比着看</p><h2 id="3-2-GLOSSARY-md"><a href="#3-2-GLOSSARY-md" class="headerlink" title="3.2 GLOSSARY.md"></a>3.2 GLOSSARY.md</h2><p>专业词汇表文件，默认对应的文件是 <code>GLOSSARY.md</code>。该文件主要存储词汇信息，如果在其他页面中出现了该文件中的词汇，鼠标放到词汇上会给出词汇示意，看一下基本格式</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## Markdown</span></span><br><span class="line">简洁优雅的排版语言,简化版的 <span class="code">`HTML`</span>,加强版的 <span class="code">`TXT`</span>,详情请google</span><br><span class="line"></span><br><span class="line"><span class="section">## git</span></span><br><span class="line">分布式版本控制系统,详情请google</span><br></pre></td></tr></tbody></table></figure><h2 id="3-3-book-json"><a href="#3-3-book-json" class="headerlink" title="3.3 book.json"></a>3.3 book.json</h2><p>这个是全局的额配置文件，节选部分</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    "root": "./docs",  // 定义文档的根目录</span><br><span class="line">    "links": {</span><br><span class="line">        "sidebar": {</span><br><span class="line">            "Baidu": "https://www.baidu.com/"  // 这个是侧边栏的链接</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    "language": "en",  // 定义语言</span><br><span class="line">    "description": "No description!",</span><br><span class="line">    "isbn": "978-0-13-601970-1",</span><br><span class="line">    "author": "SidneyGod",</span><br><span class="line">    "title": "A Book with Gitbook",</span><br><span class="line"></span><br><span class="line">    "plugins": [  // 安装的插件列表</span><br><span class="line">        "-lunr", "-search", "search-pro",</span><br><span class="line">        ...,</span><br><span class="line">        <span class="string">"anchor-navigation-ex"</span></span><br><span class="line">    ],</span><br><span class="line">    "pluginsConfig": {  // 插件配置</span><br><span class="line">        "chart": {</span><br><span class="line">            "type": "c3"</span><br><span class="line">        },</span><br><span class="line">        ...,</span><br><span class="line">        "prism": {</span><br><span class="line">            "css": [</span><br><span class="line">                <span class="string">"prism-themes/themes/prism-base16-ateliersulphurpool.light.css"</span></span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    "styles": {  // 自定义样式表</span><br><span class="line">        "website": "styles/website.css",</span><br><span class="line">        "ebook": "styles/ebook.css",</span><br><span class="line">        "pdf": "styles/pdf.css",</span><br><span class="line">        "mobi": "styles/mobi.css",</span><br><span class="line">        "epub": "styles/epub.css"</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-4-new-doc"><a href="#3-4-new-doc" class="headerlink" title="3.4 new doc"></a>3.4 new doc</h2><p>添加新文档，我建议还是一条目录一个markdown文件比较好，文件夹分级与<code>SUMMARY.md</code>保持一致，我安装了很多插件，基本上所有的效果都能实现。尽情用markdown挥洒吧..</p><p>关于之前的<code>gitbook serve</code>报error问题，是因为prsim插件不识别<code>txt</code>语言导致，就是写代码块指定prsim认识的语言才不会报错，不过报错也不影响使用。prsim目前支持218种语言：<a href="https://prismjs.com/#supported-languages" target="_blank" rel="noopener">https://prismjs.com/#supported-languages</a></p><p>其他问题，自行Google..局域网中可以访问，没毛病..</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;0-start&quot;&gt;&lt;a href=&quot;#0-start&quot; class=&quot;headerlink&quot; title=&quot;0 start&quot;&gt;&lt;/a&gt;0 start&lt;/h1&gt;&lt;p&gt;感觉最近看的不少东西都是用gitbook写的，看起来也确实怪舒服的，举个例子：&lt;a href=&quot;https://lingcoder.github.io/OnJava8/#/sidebar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://lingcoder.github.io/OnJava8/#/sidebar&lt;/a&gt;，既能当博客又能当Wiki，于是我准备自己搭建一个。参考网上的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;文档编写采用统一标准，都用Markdown格式的，最后可以用gitbook自动生成静态网页；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分配好各阶段（版本）相关责任人编写的文档，待文档编写完成后统一上传到git；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;jenkins负责拉取正式版本（release开头）的文档，用gitbook编译后，同步到云端文档服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;云端服务器制作一个入口页面，页面里面可以指引各个版本文档；http服务用nginx，指引到这个页面；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中第三步我觉得没必要用Jenkins，直接设置一个定时任务就好了。。其实搭建一个从零开始搭建一个完整Gitbook还是比较麻烦的，详情参考下方的参考文档。我既然说了快速，那必然是简单而又傻瓜式的搭建了..Let’s go!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Other" scheme="https://sidneygod.github.io/categories/Other/"/>
    
    
      <category term="blog" scheme="https://sidneygod.github.io/tags/blog/"/>
    
      <category term="gitbook" scheme="https://sidneygod.github.io/tags/gitbook/"/>
    
      <category term="wiki" scheme="https://sidneygod.github.io/tags/wiki/"/>
    
  </entry>
  
  <entry>
    <title>[Relearning C/Cpp] Operators and Expressions</title>
    <link href="https://sidneygod.github.io/posts/ea0e14e5/"/>
    <id>https://sidneygod.github.io/posts/ea0e14e5/</id>
    <published>2020-06-17T15:15:07.000Z</published>
    <updated>2021-04-17T05:08:19.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1 算数运算符"></a>1 算数运算符</h1><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">把两个操作数相加</td><td align="left">A + B 将得到 30</td></tr><tr><td align="left">-</td><td align="left">从第一个操作数中减去第二个操作数</td><td align="left">A - B 将得到 -10</td></tr><tr><td align="left">*</td><td align="left">把两个操作数相乘</td><td align="left">A * B 将得到 200</td></tr><tr><td align="left">/</td><td align="left">分子除以分母</td><td align="left">B / A 将得到 2</td></tr><tr><td align="left">%</td><td align="left">取模运算符，整除后的余数</td><td align="left">B % A 将得到 0</td></tr><tr><td align="left">++</td><td align="left">自增运算符，整数值增加 1</td><td align="left">A++ 将得到 11</td></tr><tr><td align="left">–</td><td align="left">自减运算符，整数值减少 1</td><td align="left">A– 将得到 9</td></tr></tbody></table><p>没啥好说的，可能比较有意思的是，<code>++</code>和<code>--</code>了</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        s = s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"s: %d\n"</span>, s);  <span class="comment">// s: 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一眼看过去，那不得炸毛？啥，不说等于10，起码也得等于9吧。说好的先运算，再自加1呢。其实感觉都被那句话给带偏了，前置++是先自增，再运算；后置++是先运算，再自增。这句话是不准确的，准确来说，无论前置++还是后置++，都是先+1，再运算，区别是后置++会先将原来的值存在一个临时变量中，运算的时候用这个临时变量运算。</p><p>在第五版的C++ Primer的132页，有这么一句话：<strong>前置版本的递增运算符避免了不必要的工作，它把值加1后直接返回改变了的运算对象。与之相比，后置版本需要将原始值存储下来以便于返回这个未修改的内容</strong>。也就是说，真实情况应该是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = s;</span><br><span class="line">        s = s + <span class="number">1</span>;</span><br><span class="line">        s = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"s: %d\n"</span>, s);  <span class="comment">// s: 0 这样毫无疑问是等于0的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不信？我们看看汇编代码(<code>gcc -S main.cpp -o main.s</code>)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">; 略...</span><br><span class="line">truecall__main</span><br><span class="line">truemovl$0, -4(%rbp)    ; 这个是int s &#x3D; 0;</span><br><span class="line">truemovl$0, -8(%rbp)    ; int i &#x3D; 0;</span><br><span class="line">.L5:</span><br><span class="line">truecmpl$9, -8(%rbp)    ; i和9作比较</span><br><span class="line">truejg.L4                 ; 大于9就跳到.L4</span><br><span class="line">truemovl-4(%rbp), %eax  ; 把s的值放到eax先 是0</span><br><span class="line">trueleal1(%rax), %edx   ; rax + 1放到edx，rax没出现过，就当是0好了</span><br><span class="line">truemovl%edx, -4(%rbp)  ; 把edx值1放到s中 s &#x3D; 1</span><br><span class="line">truemovl%eax, -4(%rbp)  ; 把eax的值放到s中 s &#x3D; 0</span><br><span class="line">trueaddl$1, -8(%rbp)    ; i &#x3D; i + 1</span><br><span class="line">truejmp.L5                 ; 跳回到.L5</span><br><span class="line">.L4:</span><br><span class="line">; 略...</span><br></pre></td></tr></table></figure><p>所以C++ Primer中<strong>推荐优先使用前置运算符</strong></p><h1 id="2-逻辑和关系运算符"><a href="#2-逻辑和关系运算符" class="headerlink" title="2 逻辑和关系运算符"></a>2 逻辑和关系运算符</h1><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td><td align="left">(A &amp;&amp; B) 为假。</td></tr><tr><td align="left">||</td><td align="left">称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。</td><td align="left">(A || B) 为真。</td></tr><tr><td align="left">!</td><td align="left">称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td><td align="left"></td></tr><tr><td align="left">==</td><td align="left">检查两个操作数的值是否相等，如果相等则条件为真。</td><td align="left">(A == B) 不为真。</td></tr><tr><td align="left">!=</td><td align="left">检查两个操作数的值是否相等，如果不相等则条件为真。</td><td align="left">(A != B) 为真。</td></tr><tr><td align="left">&gt;</td><td align="left">检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td align="left">(A &gt; B) 不为真。</td></tr><tr><td align="left">&lt;</td><td align="left">检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td align="left">(A &lt; B) 为真。</td></tr><tr><td align="left">&gt;=</td><td align="left">检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td align="left">(A &gt;= B) 不为真。</td></tr><tr><td align="left">&lt;=</td><td align="left">检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td align="left">(A &lt;= B) 为真。</td></tr></tbody></table><p>注意&amp;&amp;和||是短路的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(expr1) &amp;&amp; (expr2);  <span class="comment">// 如果计算出expr1是false，就不会再去计算expr2</span></span><br><span class="line">(expr1) || (expr2);  <span class="comment">// 如果计算出expr1是true，就不会再去计算expr2</span></span><br></pre></td></tr></table></figure><h1 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3 赋值运算符"></a>3 赋值运算符</h1><p>任何一种复合赋值运算符都等价于<code>a = a op b</code>。例如：<code>a += 1;</code>就等价于<code>a = a + 1;</code>。唯一的区别就是，使用复合赋值运算符只求值一次，使用普通赋值运算需要求值两次。第一次，右边运算求一次值；第二次，赋值的时候左侧运算对象求值。这么说来还是复合赋值运算符好一点</p><h1 id="4-位运算符"><a href="#4-位运算符" class="headerlink" title="4 位运算符"></a>4 位运算符</h1><p>假设变量 A 的值为 60，变量 B 的值为 13，则：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。</td><td align="left">(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td align="left">|</td><td align="left">如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。</td><td align="left">(A | B) 将得到 61，即为 0011 1101</td></tr><tr><td align="left">^</td><td align="left">如果存在于其中一个操作数中但不同时存在于两个操作数中，二进制异或运算符复制一位到结果中。</td><td align="left">(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td align="left">~</td><td align="left">二进制补码运算符是一元运算符，具有”翻转”位效果，即0变成1，1变成0。</td><td align="left">(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">二进制左移运算符。左操作数的值向左移动右操作数指定的位数。</td><td align="left">A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">二进制右移运算符。左操作数的值向右移动右操作数指定的位数。</td><td align="left">A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table><p><strong>位运算符作用于位，并逐位执行操作。</strong>在kernel中经常喜欢用位运算做flag判断，感受一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> FLAG_0 = <span class="number">0b000</span>;  <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> FLAG_1 = <span class="number">0b001</span>;  <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> FLAG_2 = <span class="number">0b010</span>;  <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> FLAG_4 = <span class="number">0b100</span>;  <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> flag_0 = FLAG_0;</span><br><span class="line"><span class="keyword">unsigned</span> flag_1 = FLAG_1;</span><br><span class="line"><span class="keyword">unsigned</span> flag_0_1 = FLAG_0 | FLAG_1;</span><br><span class="line"><span class="keyword">unsigned</span> flag_1_2 = FLAG_1 | FLAG_2;</span><br><span class="line"><span class="keyword">unsigned</span> flag_1_2_4 = FLAG_1 | FLAG_2 | FLAG_4;</span><br><span class="line"></span><br><span class="line"><span class="comment">// |表示+?</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_0_1: %d\n"</span>, flag_0_1);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_1_2: %d\n"</span>, flag_1_2);  <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_1_2_4: %d\n"</span>, flag_1_2_4);  <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0和&amp; 可以用来清空</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_0 &amp; FLAG_0: %d\n"</span>, flag_0 &amp; FLAG_0);  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_1 &amp; FLAG_0: %d\n"</span>, flag_1 &amp; FLAG_0);  <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非0和&amp; 可以用来判断包不包含当前的FLAG</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_1 &amp; FLAG_1: %d\n"</span>, flag_1 &amp; FLAG_1);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_1 &amp; FLAG_2: %d\n"</span>, flag_1 &amp; FLAG_2);  <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// |并不是单纯的+ 不包含则+ 包含则不加；&amp;(~FLAG)表示减去这个FLAG 有则减 无则不用管</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_1_2 | FLAG_1: %d\n"</span>, flag_1_2 | FLAG_1);  <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_1_2 &amp; FLAG_1: %d\n"</span>, flag_1_2 &amp; FLAG_1);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_1_2 &amp; (FLAG_1 | FLAG_4): %d\n"</span>, flag_1_2 &amp; (FLAG_1 | FLAG_4));  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_1_2 &amp; (~FLAG_1): %d\n"</span>, flag_1_2 &amp; (~FLAG_1));  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_1_2 &amp; (~(FLAG_1 | FLAG_4)): %d\n"</span>, flag_1_2 &amp; (~(FLAG_1 | FLAG_4)));  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_1_2_4 | FLAG_1 | FLAG_2: %d\n"</span>, flag_1_2_4 | FLAG_1 | FLAG_2);  <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_1_2_4 &amp; (FLAG_1 | FLAG_2): %d\n"</span>, flag_1_2_4 &amp; (FLAG_1 | FLAG_2));  <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag_1_2_4 &amp; (~(FLAG_1 | FLAG_2)): %d\n"</span>, flag_1_2_4 &amp; (~(FLAG_1 | FLAG_2)));  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p><strong>强烈建议位运算只用于无符号数..</strong></p><h1 id="5-杂项"><a href="#5-杂项" class="headerlink" title="5 杂项"></a>5 杂项</h1><p>条件运算符：<code>?:</code>，唯一一个三元运算符，就是一个简化版的if-else，但是效率比if-else高</p><p>sizeof运算符：<code>sizeof(expr)</code>，事实上并<strong>不会去使用expr</strong>，所以即使<code>sizeof(*ptr)</code>，其中ptr是null，也不会报错，多用于求数组长度，毕竟C/C++没有<code>arr.length</code>的用法</p><p>逗号运算符：<code>v = expr1, expr2</code>，从左向右的顺序依次求值，然后丢弃左侧结果的值，<strong>真正返回的是右侧的值</strong></p><h1 id="6-成员访问运算符"><a href="#6-成员访问运算符" class="headerlink" title="6 成员访问运算符"></a>6 成员访问运算符</h1><p>就是点运算符<code>.</code>和箭头运算符<code>-&gt;</code>。其中点运算符是获取类对象的一个成员。<code>ptr-&gt;mem</code>或<code>(*ptr).mem</code>，注意<strong>解引用运算符低于点运算符</strong></p><p>运算符优先级：<a href="https://blog.csdn.net/yuliying/article/details/72898132" target="_blank" rel="noopener">https://blog.csdn.net/yuliying/article/details/72898132</a></p><table border="1" cellspacing="0" cellpadding="0" width="612"><tbody><tr><td><p align="center"><strong>优先级</strong></p></td><td><p align="center"><strong>运算符</strong></p></td><td><p align="center"><strong>名称或含义</strong></p></td><td><p align="center"><strong>使用形式</strong></p></td><td><p align="center"><strong>结合方向</strong></p></td><td><p align="center"><strong>说明</strong></p></td></tr><tr><td rowspan="4"><p align="center"><strong>1</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">[]</span></strong></p></td><td><p>数组下标</p></td><td><p>数组名[常量表达式]</p></td><td rowspan="4"><p align="center">左到右</p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">()</span></strong></p></td><td><p>圆括号</p></td><td><p>(表达式）/函数名(形参表)</p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">.</span></strong></p></td><td><p>成员选择（对象）</p></td><td><p>对象.成员名</p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">-&gt;</span></strong></p></td><td><p>成员选择（指针）</p></td><td><p>对象指针-&gt;成员名</p></td><td><p align="center">--</p></td></tr><tr><td width="612" colspan="6"><p>&nbsp;</p></td></tr><tr><td rowspan="9"><p align="center"><strong>2</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">-</span></strong></p></td><td><p>负号运算符</p></td><td><p>-表达式</p></td><td rowspan="9"><p align="center"><strong><span style="color:#FF0000;">右到左</span></strong></p></td><td rowspan="7"><p align="center">单目运算符</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">~</span></strong></p></td><td><p>按位取反运算符</p></td><td><p>~表达式</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">++</span></strong></p></td><td><p>自增运算符</p></td><td><p>++变量名/变量名++</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">--</span></strong></p></td><td><p>自减运算符</p></td><td><p>--变量名/变量名--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">*</span></strong></p></td><td><p>取值运算符</p></td><td><p>*指针变量</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">&amp;</span></strong></p></td><td><p>取地址运算符</p></td><td><p>&amp;变量名</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">!</span></strong></p></td><td><p>逻辑非运算符</p></td><td><p>!表达式</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">(</span><span style="color:#0000FF;">类型</span><span style="color:#0000FF;">)</span></strong></p></td><td><p>强制类型转换</p></td><td><p>(数据类型)表达式</p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">sizeof</span></strong></p></td><td><p>长度运算符</p></td><td><p>sizeof(表达式)</p></td><td><p align="center">--</p></td></tr><tr><td width="612" colspan="6"><p>&nbsp;</p></td></tr><tr><td rowspan="3"><p align="center"><strong>3</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">/</span></strong></p></td><td><p>除</p></td><td><p>表达式/表达式</p></td><td rowspan="3"><p align="center">左到右</p></td><td rowspan="3"><p align="center">双目运算符</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">*</span></strong></p></td><td><p>乘</p></td><td><p>表达式*表达式</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">%</span></strong></p></td><td><p>余数（取模）</p></td><td><p>整型表达式%整型表达式</p></td></tr><tr><td rowspan="2"><p align="center"><strong>4</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">+</span></strong></p></td><td><p>加</p></td><td><p>表达式+表达式</p></td><td rowspan="2"><p align="center">左到右</p></td><td rowspan="2"><p align="center">双目运算符</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">-</span></strong></p></td><td><p>减</p></td><td><p>表达式-表达式</p></td></tr><tr><td rowspan="2"><p align="center"><strong>5</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">&lt;&lt;&nbsp;</span></strong></p></td><td><p>左移</p></td><td><p>变量&lt;&lt;表达式</p></td><td rowspan="2"><p align="center">左到右</p></td><td rowspan="2"><p align="center">双目运算符</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">&gt;&gt;&nbsp;</span></strong></p></td><td><p>右移</p></td><td><p>变量&gt;&gt;表达式</p></td></tr><tr><td width="612" colspan="6"><p>&nbsp;</p></td></tr><tr><td rowspan="4"><p align="center"><strong>6</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">&gt;&nbsp;</span></strong></p></td><td><p>大于</p></td><td><p>表达式&gt;表达式</p></td><td rowspan="4"><p align="center">左到右</p></td><td rowspan="4"><p align="center">双目运算符</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">&gt;=</span></strong></p></td><td><p>大于等于</p></td><td><p>表达式&gt;=表达式</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">&lt;&nbsp;</span></strong></p></td><td><p>小于</p></td><td><p>表达式&lt;表达式</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">&lt;=</span></strong></p></td><td><p>小于等于</p></td><td><p>表达式&lt;=表达式</p></td></tr><tr><td rowspan="2"><p align="center"><strong>7</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">==</span></strong></p></td><td><p>等于</p></td><td><p>表达式==表达式</p></td><td rowspan="2"><p align="center">左到右</p></td><td rowspan="2"><p align="center">双目运算符</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">！</span><span style="color:#0000FF;">=</span></strong></p></td><td><p>不等于</p></td><td><p>表达式!= 表达式</p></td></tr><tr><td width="612" colspan="6"><p>&nbsp;</p></td></tr><tr><td><p align="center"><strong>8</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">&amp;</span></strong></p></td><td><p>按位与</p></td><td><p>表达式&amp;表达式</p></td><td><p align="center">左到右</p></td><td><p align="center">双目运算符</p></td></tr><tr><td><p align="center"><strong>9</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">^</span></strong></p></td><td><p>按位异或</p></td><td><p>表达式^表达式</p></td><td><p align="center">左到右</p></td><td><p align="center">双目运算符</p></td></tr><tr><td><p align="center"><strong>10</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">|</span></strong></p></td><td><p>按位或</p></td><td><p>表达式|表达式</p></td><td><p align="center">左到右</p></td><td><p align="center">双目运算符</p></td></tr><tr><td><p align="center"><strong>11</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">&amp;&amp;</span></strong></p></td><td><p>逻辑与</p></td><td><p>表达式&amp;&amp;表达式</p></td><td><p align="center">左到右</p></td><td><p align="center">双目运算符</p></td></tr><tr><td><p align="center"><strong>12</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">||</span></strong></p></td><td><p>逻辑或</p></td><td><p>表达式||表达式</p></td><td><p align="center">左到右</p></td><td><p align="center">双目运算符</p></td></tr><tr><td width="612" colspan="6"><p>&nbsp;</p></td></tr><tr><td><p align="center"><strong>13</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">?:</span></strong></p></td><td><p>条件运算符</p></td><td><p>表达式1?</p><p>表达式2: 表达式3</p></td><td><p align="center"><strong><span style="color:#FF0000;">右到左</span></strong></p></td><td><p align="center"><span style="color:#FF0000;">三目运算符</span></p></td></tr><tr><td width="612" colspan="6"><p><span style="color:#FF0000;">&nbsp;</span></p></td></tr><tr><td rowspan="11"><p align="center"><strong>14</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">=</span></strong></p></td><td><p>赋值运算符</p></td><td><p>变量=表达式</p></td><td rowspan="11"><p align="center"><strong><span style="color:#FF0000;">右到左</span></strong></p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">/=</span></strong></p></td><td><p>除后赋值</p></td><td><p>变量/=表达式</p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">*=</span></strong></p></td><td><p>乘后赋值</p></td><td><p>变量*=表达式</p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">%=</span></strong></p></td><td><p>取模后赋值</p></td><td><p>变量%=表达式</p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">+=</span></strong></p></td><td><p>加后赋值</p></td><td><p>变量+=表达式</p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">-=</span></strong></p></td><td><p>减后赋值</p></td><td><p>变量-=表达式</p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">&lt;&lt;=</span></strong></p></td><td><p>左移后赋值</p></td><td><p>变量&lt;&lt;=表达式</p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">&gt;&gt;=</span></strong></p></td><td><p>右移后赋值</p></td><td><p>变量&gt;&gt;=表达式</p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">&amp;=</span></strong></p></td><td><p>按位与后赋值</p></td><td><p>变量&amp;=表达式</p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">^=</span></strong></p></td><td><p>按位异或后赋值</p></td><td><p>变量^=表达式</p></td><td><p align="center">--</p></td></tr><tr><td><p align="center"><strong><span style="color:#0000FF;">|=</span></strong></p></td><td><p>按位或后赋值</p></td><td><p>变量|=表达式</p></td><td><p align="center">--</p></td></tr><tr><td width="612" colspan="6"><p>&nbsp;</p></td></tr><tr><td><p align="center"><strong>15</strong></p></td><td><p align="center"><strong><span style="color:#0000FF;">,</span></strong></p></td><td><p>逗号运算符</p></td><td><p>表达式,表达式,…</p></td><td><p align="center">左到右</p></td><td><p align="center">--</p></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-算数运算符&quot;&gt;&lt;a href=&quot;#1-算数运算符&quot; class=&quot;headerlink&quot; title=&quot;1 算数运算符&quot;&gt;&lt;/a&gt;1 算数运算符&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;运算符&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;描述&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;+&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;把两个操作数相加&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;A + B 将得到 30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;从第一个操作数中减去第二个操作数&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;A - B 将得到 -10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;*&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;把两个操作数相乘&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;A * B 将得到 200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;/&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;分子除以分母&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;B / A 将得到 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;%&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;取模运算符，整除后的余数&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;B % A 将得到 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;++&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;自增运算符，整数值增加 1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;A++ 将得到 11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;–&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;自减运算符，整数值减少 1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;A– 将得到 9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;没啥好说的，可能比较有意思的是，&lt;code&gt;++&lt;/code&gt;和&lt;code&gt;--&lt;/code&gt;了&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/Cpp" scheme="https://sidneygod.github.io/categories/C-Cpp/"/>
    
    
      <category term="C" scheme="https://sidneygod.github.io/tags/C/"/>
    
      <category term="Cpp" scheme="https://sidneygod.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>[Relearning C/Cpp] Foundation Type</title>
    <link href="https://sidneygod.github.io/posts/6a5ea6b7/"/>
    <id>https://sidneygod.github.io/posts/6a5ea6b7/</id>
    <published>2020-06-16T14:13:04.000Z</published>
    <updated>2021-04-24T11:28:33.665Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="1-标识符-关键字"><a href="#1-标识符-关键字" class="headerlink" title="1 标识符 关键字"></a>1 标识符 关键字</h1><p>标识符命名规则：</p><ol><li>变量名只能是字母（A-Z，a-z）和数字（0-9）或者下划线（_）或者美元符号（<strong>$</strong>）组成</li><li>第一个字母不能是数字</li><li>不能使用C/C++关键字来命名变量</li><li>变量名区分大小写</li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> $name1, _name2, Name3;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>似乎有的版本不支持<code>$</code>..我试了gcc8.1是可以的</p></blockquote><p>C语言关键字：</p><a id="more"></a><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>auto</td><td>声明自动变量</td></tr><tr><td>short</td><td>声明短整型变量或函数</td></tr><tr><td>int</td><td>声明整型变量或函数</td></tr><tr><td>long</td><td>声明长整型变量或函数</td></tr><tr><td>float</td><td>声明浮点型变量或函数</td></tr><tr><td>double</td><td>声明双精度变量或函数</td></tr><tr><td>char</td><td>声明字符型变量或函数</td></tr><tr><td>struct</td><td>声明结构体变量或函数</td></tr><tr><td>union</td><td>声明共用数据类型</td></tr><tr><td>enum</td><td>声明枚举类型</td></tr><tr><td>typedef</td><td>用以给数据类型取别名</td></tr><tr><td>const</td><td>声明只读变量</td></tr><tr><td>unsigned</td><td>声明无符号类型变量或函数</td></tr><tr><td>signed</td><td>声明有符号类型变量或函数</td></tr><tr><td>extern</td><td>声明变量是在其他文件正声明</td></tr><tr><td>register</td><td>声明寄存器变量</td></tr><tr><td>static</td><td>声明静态变量</td></tr><tr><td>volatile</td><td>说明变量在程序执行中可被隐含地改变</td></tr><tr><td>void</td><td>声明函数无返回值或无参数，声明无类型指针</td></tr><tr><td>if</td><td>条件语句</td></tr><tr><td>else</td><td>条件语句否定分支（与 if 连用）</td></tr><tr><td>switch</td><td>用于开关语句</td></tr><tr><td>case</td><td>开关语句分支</td></tr><tr><td>for</td><td>一种循环语句</td></tr><tr><td>do</td><td>循环语句的循环体</td></tr><tr><td>while</td><td>循环语句的循环条件</td></tr><tr><td>goto</td><td>无条件跳转语句</td></tr><tr><td>continue</td><td>结束当前循环，开始下一轮循环</td></tr><tr><td>break</td><td>跳出当前循环</td></tr><tr><td>default</td><td>开关语句中的“其他”分支</td></tr><tr><td>sizeof</td><td>计算数据类型长度</td></tr><tr><td>return</td><td>子程序返回语句（可以带参数，也可不带参数）循环条件</td></tr></tbody></table><p>C++关键字：</p><img data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/null/Cpp_Keywords.jpg"><p><a href="https://www.runoob.com/w3cnote/cpp-keyword-intro.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/cpp-keyword-intro.html</a></p><h1 id="2-变量声明-定义-初始化"><a href="#2-变量声明-定义-初始化" class="headerlink" title="2 变量声明 定义 初始化"></a>2 变量声明 定义 初始化</h1><p>补充知识，C语言从源文件到可执行文件一般经历四个步骤：预处理，编译，汇编，链接</p><p><strong>声明</strong>：声明是只是向编译器声明一下我用到的变量或者类型，与分配内存毫无关系</p><p><strong>定义</strong>：给变量分配了空间才叫做定义。定义往往是附庸于声明的，通俗地说，也就是只当你先声明了一个变量，才有可能为其分配空间（定义）</p><p><strong>初始化</strong>：定义只是给变量分配了内存空间，但一开始决定这内存空间存放什么值是由初始化决定的</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在C中直接这样写IDE是不会报错的 就是说在预处理阶段是不会有问题的</span></span><br><span class="line"><span class="comment">// 在C++中要指明aa的类型 即 extern int aa;</span></span><br><span class="line"><span class="keyword">extern</span> aa;  <span class="comment">// 声明没有分配空间 即使是extern int aa;也没有分配空间 其实在c中不加类型 默认是int</span></span><br><span class="line"><span class="keyword">int</span> aa;  <span class="comment">// 这里分配了int大小的空间给aa，即定义aa的大小</span></span><br><span class="line">aa = <span class="number">10</span>;  <span class="comment">// 这里初始化aa的值</span></span><br><span class="line"><span class="keyword">int</span> a {<span class="number">10</span>};  <span class="comment">// 在C++中初始化不一定就是=，还可以用{}</span></span><br></pre></td></tr></tbody></table></figure><h1 id="3-变量类型-大小-类型转换"><a href="#3-变量类型-大小-类型转换" class="headerlink" title="3 变量类型 大小 类型转换"></a>3 变量类型 大小 类型转换</h1><p><strong>变量类型</strong></p><p>C变量类型：</p><table><thead><tr><th>说  明</th><th>字符型</th><th>短整型</th><th>整型</th><th>长整型</th><th>单精度浮点型</th><th>双精度浮点型</th><th>无类型</th></tr></thead><tbody><tr><td>数据类型</td><td>char</td><td>short</td><td>int</td><td>long</td><td>float</td><td>double</td><td>void</td></tr></tbody></table><p>除了<code>float</code>，<code>double</code>，<code>void</code>都还可以再加个<code>unsigned</code>修饰；(还有就是<code>struct</code>，<code>enum</code>，<code>union</code>复合类型了，只说基础变量类型)</p><p>C++变量类型：除了C语言的，还有<code>bool</code>，<code>wchar_t</code>(宽字符类型)，还有一个和<code>struct</code>差不多的<code>class</code></p><p><strong>变量大小</strong></p><p>ANSI/ISO制订的4条铁定的原则</p><ol><li>sizeof(short int)<=sizeof(int)</li><li>sizeof(int)<=sizeof(long int)</li><li>short int至少应为16位（2字节）</li><li>long int至少应为32位</li></ol><p>常见系统情况</p><p>参考：<a href="https://blog.csdn.net/weixin_30367359/article/details/81211393" target="_blank" rel="noopener">https://blog.csdn.net/weixin_30367359/article/details/81211393</a></p><p><strong>类型转换</strong></p><p>C中<strong>自动类型转换</strong>：编译器默默地、隐式地、偷偷地进行的数据类型转换，这种转换不需要程序员干预，会自动发生</p><p>将一种类型的数据赋值给另外一种类型的变量时就会发生自动类型转换</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">100</span>;  <span class="comment">// 这里100是int型，需要先转换为float型才能赋值给f</span></span><br></pre></td></tr></tbody></table></figure><p>在不同类型的混合运算中，编译器也会自动地转换数据类型，将参与运算的所有数据先转换为同一种类型，然后再进行计算。转换规则如下：</p><img data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/null/type_conversion.png"><p>也就是说，在赋值运算中，赋值号两边的数据类型不同时，需要把右边表达式的类型转换为左边变量的类型，这可能会导致数据失真，或者精度降低；所以说，<strong>自动类型转换并不一定是安全的</strong>。对于不安全的类型转换，编译器一般会给出警告。</p><p>C中<strong>强制类型转换</strong>：在代码中明确地提出要进行类型转换</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 强转规则 (type_name) expression</span></span><br><span class="line">(<span class="keyword">float</span>) <span class="number">100</span>;  <span class="comment">// 将100转为float类型</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">double</span>) <span class="number">10</span> / <span class="number">4</span>;  <span class="comment">// 2.500000</span></span><br><span class="line">(<span class="keyword">double</span>) (<span class="number">10</span> / <span class="number">4</span>);  <span class="comment">// 2.000000</span></span><br><span class="line"><span class="comment">// 因为()优先级比/高 这一点需要注意</span></span><br></pre></td></tr></tbody></table></figure><p>如何理解<strong>类型转换只是临时性的</strong></p><p>无论是自动类型转换还是强制类型转换，都只是为了本次运算而进行的临时性转换，转换的结果也会保存到临时的内存空间，不会改变数据本来的类型或者值</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">5.5</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> id = (<span class="keyword">int</span>) d;</span><br><span class="line"><span class="keyword">double</span> result = d / i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d, %lf, %lf\n"</span>, id, d, result);  <span class="comment">// 5, 5.500000, 1.100000</span></span><br><span class="line"><span class="comment">// 虽然第3行对d进行强转了，但是并没有改变d的值</span></span><br></pre></td></tr></tbody></table></figure><p>C++中类型转换，首先C语言能用的，C++都能用，不过强制类型转换，C++有自己的一套</p><p><strong>static_cast</strong>：<code>static_cast<type_id> (expression)</code></p><p>用于类层次结构中基类和派生类之间指针或引用的转换</p><p>用于基本数据类型之间的转换，如把int转换成char</p><p>把空指针转换成目标类型的空指针</p><p>把任何类型的表达式转换为void类型</p><p><strong>注意：static_cast不能转换掉expression的<code>const</code>、<code>volitale</code>或者<code>__unaligned</code>属性</strong></p><p><strong>const_cast</strong>：<code>const_cast<type_id> (expression)</code></p><p>用来修改类型的const或volatile属性。除了const或volatile修饰之外，type_id和expression的类型是一样的</p><p>常量指针被转化成非常量指针，并且仍然指向原来的对象</p><p>常量引用被转换成非常量引用，并且仍然指向原来的对象；常量对象被转换成非常量对象</p><p><strong>const_cast不是用于去除变量的常量性，而是去除指向常数对象的指针或引用的常量性，其去除常量性的对象必须为指针或引用</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p = &a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// *p = 22;  // 只读 不允许修改</span></span><br><span class="line"><span class="comment">// int b = const_cast<int>(a);  // const_cast强制转换对象必须为指针或引用</span></span><br><span class="line"><span class="keyword">int</span>* c = <span class="keyword">const_cast</span><<span class="keyword">int</span> *>(p);  <span class="comment">// 去掉const属性</span></span><br><span class="line">*c = <span class="number">22</span>;  <span class="comment">// 没毛病 *p值就能改了</span></span><br></pre></td></tr></tbody></table></figure><p><strong>reinterpret_cast</strong>：<code>reinterpret_cast<type_id> (expression)</code></p><p>改变指针或引用的类型、将指针或引用转换为一个足够长度的整型、将整型转换为指针或引用类型</p><p>type_id必须是一个指针、引用、算术类型、函数指针或者成员指针</p><p><strong>在使用reinterpret_cast强制转换过程仅仅只是比特位的拷贝，因此在使用过程中需要特别谨慎</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 万物皆可转..</span></span><br><span class="line"><span class="keyword">int</span> *i = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line"><span class="keyword">double</span> *d = <span class="keyword">reinterpret_cast</span><<span class="keyword">double</span> *>(i);</span><br></pre></td></tr></tbody></table></figure><p><strong>dynamic_cast</strong>：<code>dynamic_cast<type_id> (expression)</code></p><p><strong>其他三种都是编译时完成的，dynamic_cast是运行时处理的，运行时要进行类型检查</strong></p><p><strong>不能用于内置的基本数据类型的强制转换</strong></p><p><strong>dynamic_cast转换如果成功的话返回的是指向类的指针或引用，转换失败的话则会返回NULL</strong></p><p><strong>使用dynamic_cast进行转换的，基类中一定要有虚函数，否则编译不通过</strong>(需要检测有虚函数的原因：类中存在虚函数，就说明它有想要让基类指针或引用指向派生类对象的情况，此时转换才有意义。这是由于运行时类型检查需要运行时类型信息，而这个信息存储在类的虚函数表中，只有定义了虚函数的类才有虚函数表)</p><p><strong>在类的转换时，在类层次间进行上行转换时，dynamic_cast和static_cast的效果是一样的。在进行下行转换时，dynamic_cast具有类型检查的功能，比static_cast更安全</strong></p><p><strong>向下转换的成功与否还与将要转换的类型有关，即要转换的指针指向的对象的实际类型与转换以后的对象类型一定要相同，否则转换失败</strong></p><p>嗯..略..</p><h1 id="4-变量作用域"><a href="#4-变量作用域" class="headerlink" title="4 变量作用域"></a>4 变量作用域</h1><p>能不能简单理解为一个<code>{}</code>就是一个域，总有没套在<code>{}</code>里面的，那肯定比在<code>{}</code>里活得久啊</p><p>变量作用域，一是看其能覆盖到哪，二是看其能活多久</p><p>首先，强龙压不过地头蛇，其次，你得让人作用域见过你</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;  <span class="comment">// 没有被{}包裹 全局变量 活得久</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);  <span class="comment">// 这个肯定没问题 声明在上面见过 作用域比a小</span></span><br><span class="line">    <span class="comment">//printf("%d\n", b);  // 找不到b的声明</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">11</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);  <span class="comment">// 11 这就叫强龙压不过地头蛇 </span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br></pre></td></tr></tbody></table></figure><p>这又牵扯到了声明</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">extern</span> bb;  <span class="comment">// 这里声明一下 让编译器去找</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, bb);  <span class="comment">// 在这个作用域就可以用了</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//printf("%d\n", bb);  // 这个就不行 在这个作用域中没有声明过 找不到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> bb = <span class="number">20</span>;</span><br></pre></td></tr></tbody></table></figure><p>再说说全局变量和局部变量</p><ul><li>在函数或一个代码块内部定义的变量，称为局部变量</li><li>在函数参数的定义中定义的变量，称为形式参数</li><li>在所有函数外部定义的变量，称为全局变量</li></ul><p>为什么说extern修饰的变量是全局变量？其实我觉得和extern没关系，毕竟extern只是声明，不分配空间</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">extern</span> a, b;</span><br><span class="line">        <span class="comment">// printf("%d\n", a);  // 既声明也在下面定义了 但是编译的时候还是会报错 undefined</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b);  <span class="comment">// 全局的就没问题了 也就是说extern是在全局变量中找 而不是声明为全局</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br></pre></td></tr></tbody></table></figure><p>可以看到，C语言的作用域还是蛮简单的，C++还有个域操作符<code>::</code>，其实也很简单</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> names {  <span class="comment">// 这就声明一个命名空间</span></span><br><span class="line">    <span class="keyword">int</span> aa = <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> aa = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> aa = <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 10 - 20 - 30  有内味了 names下的aa，没名字下的aa，没名字就叫全局</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> << names::aa << <span class="string">" - "</span> << ::aa << <span class="string">" - "</span> << aa << <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再说一点class的知识</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;  <span class="comment">// 这叫声明一个函数</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">void</span> AA::print() {}  <span class="comment">// 这叫定义一个函数 你不说明是aa的print，那编译器哪知道是不是</span></span><br></pre></td></tr></tbody></table></figure><h1 id="5-变量存储位置"><a href="#5-变量存储位置" class="headerlink" title="5 变量存储位置"></a>5 变量存储位置</h1><p>一个C/C++程序的内存占用情况</p><p>栈区：由编译器自动分配释放，存放函数的参数值，局部变量的值等</p><p>堆区：一般由程序员分配释放，若程序员不释放，程序结束时可能由操作系统回收。注意它与数据结构中的堆是两回事，分配方式类似于链表</p><p>全局区/静态区：全局变量和静态变量的存储是放在一块的。初始化的全局变量和静态变量在一块区域，未初始化的全局变量和静态变量又放在相邻的另一块区域中。程序结束后由系统释放</p><p>常量区：字符串常量和其他类型常量存放位置。程序结束后由系统释放</p><p>代码区：存放函数体的二进制代码</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>; <span class="comment">// 全局初始化区</span></span><br><span class="line"><span class="keyword">char</span> *p1; <span class="comment">// 全局未初始化区</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> b; <span class="comment">// 栈 </span></span><br><span class="line">    <span class="keyword">char</span> s[] = <span class="string">"abc"</span>; <span class="comment">// s在栈 "abc\0"在常量区</span></span><br><span class="line">    <span class="keyword">char</span> *p2; <span class="comment">// 栈 </span></span><br><span class="line">    <span class="keyword">char</span> *p3 = <span class="string">"123456"</span>; <span class="comment">// 123456\0 在常量区，p3在栈上。 </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> c = <span class="number">0</span>; <span class="comment">// 全局（静态）初始化区 </span></span><br><span class="line">    p1 = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">    p2 = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">20</span>); <span class="comment">// 分配得来得10和20字节的区域就在堆区</span></span><br><span class="line">    <span class="built_in">strcpy</span>(p1, <span class="string">"123456"</span>); <span class="comment">// 123456\0放在常量区，编译器可能会做优化，指向p3指向的"123456"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面的划分的区对应到操作系统(深入理解计算机系统)的各种段：</p><p>bss段：Block Started by Symbol，通常是指用来存放程序中未初始化的全局变量的一块内存区域，不给该段的数据分配空间，只是记录数据所需空间的大小，bss段属于静态内存分配</p><p>data段：通常是指用来存放程序中已初始化的全局变量的一块内存区域，数据分配空间，数据保存在目标文件中，data段属于静态内存分配</p><p>rodata段：read only data segment，存放常量数据(但不是所有，有些马上数与指令编译在一起直接放在代码段)，用const修饰的全局变量是放入常量区的，可是使用const修饰的局部变量仅仅是设置为只读起到防止改动的效果，没有放入常量区，有些系统中rodata段是多个进程共享的，目的是为了提高空间的利用率</p><p>text段：通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。在text段中，也有可能包含一些只读的常数变量(<code>int a = 10;</code>中的10)等</p><p>heap：用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）</p><p>stack：用户存放程序临时创建的局部变量。也就是括弧<code>{}</code>中定义的变量（但不包括static声明的变量，static意味着在data段中存放变量）。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进先出(FIFO)特点，所以栈特别方便用来保存/恢复调用现场。</p><blockquote><p><strong>一个程序本质上都是由 bss段、data段、text段三个组成的</strong>。这样的概念，不知道最初来源于哪里的规定，但在当前的计算机程序设计中是很重要的一个基本概念。一般在初始化时bss段部分将会清零。bss段属于静态内存分配，即程序一开始就将其清零了。比如，在C语言之类的程序编译完成之后，已初始化的全局变量保存在<code>.data</code>段中，未初始化的全局变量保存在<code>.bss</code>段中。</p><p>text和data段都在可执行文件中（在嵌入式系统里一般是固化在镜像文件中），由系统从可执行文件中加载；而bss段不在可执行文件中，由系统初始化。</p></blockquote><p>应该放上一段汇编的，奈何看不太明白，mark几条命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 汇编代码 8086 或者 AT&T，Linux上一般是ATT的</span></span><br><span class="line">gcc -S -O2 -masm=intel main.c -o main.s</span><br><span class="line">gcc -S -O2 -masm=att main.c -o main.s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反汇编</span></span><br><span class="line">objdump -sd test.exe</span><br><span class="line">objdump -h test.exe  <span class="comment"># 查看代码段啥的..</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出目标文件的符号清单</span></span><br><span class="line">nm test.exe</span><br></pre></td></tr></tbody></table></figure><p><strong>静态变量(static)</strong></p><p>在C/C++中，static 关键字不仅可以用来修饰变量，还可以用来修饰函数。在使用static关键字修饰变量时，我们称此变量为静态变量。静态变量的存储方式与全局变量一样，都是静态存储方式，但是全局变量不是静态变量</p><p>全局变量的作用域是整个源程序，当一个源程序由多个源文件组成时，全局变量在各个源文件中都是有效的；全局变量之前加上关键字static来实现，使全局变量被定义成为一个静态全局变量，此时该变量只能在本文件中使用，起到了对其他源文件进行<strong>隐藏与隔离</strong>的作用</p><p>如果希望函数中局部变量的值在<strong>函数调用结束之后不会消失</strong>，而仍然保留其原值，即它所占用的存储单元不释放，在下一次调用该函数时，其局部变量的值仍然存在，也就是上一次函数调用结束时的值，此时，应该将该局部变量用关键字static声明为<strong>静态局部变量</strong>，当将局部变量声明为静态局部变量的时候，也就改变了局部变量的存储位置，即从原来的栈中存放改为静态存储区存放。这让它看起来很像全局变量，其实静态局部变量与全局变量的主要区别就在于可见性，静态局部变量只在其被声明的代码块中是可见的</p><p>在静态数据区，内存中所有的字节默认值都是0x00。静态变量与全局变量也一样，它们都存储在静态数据区中，因此其变量的值默认也为0(对自动变量不赋初值，其值是不定的，所以说有的不初始化的静态变量，有可能被优化到data段)</p><p>static对函数的修饰与对全局变量的修饰相似，只能被本文件中的函数调用，而不能被同一程序其它文件中的函数调用，所以satic函数又被称为内部函数</p><p><strong>寄存器变量(register)</strong></p><p><code>'register' storage class specifier is deprecated and incompatible with C++17</code></p><p>使用修饰符register声明的变量属于寄存器存储类型。该类型与自动存储类型相似，具有自动存储时期、代码块作用域和内连接。声明为register仅仅是一个请求，因此该变量仍然可能是普通的自动变量。无论哪种情况，用<strong>register修饰的变量都无法获取地址</strong>(在C++中，register变量在内存中有副本，可以获取到副本的地址)。如果没有被初始化，它的值是未定的。register可以加速变量值访问速度，如果不存在竞争条件，并且该变量会被频繁的访问使用，可以使用register。</p><p><strong>volatile</strong></p><p>因为访问寄存器要比访问内存单元快的多，所以编译器一般都会作减少存取内存的优化，但有可能会读脏数据。遇到volatile声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问；如果不使用volatile，则编译器将对所声明的语句进行优化。当一个变量存在竞争条件时，如果没有上锁，为了维护数据的统一性，则必须显式的使用volatile进行声明。在对变量声明时，默认的是使用volatile声明，但是如果没有显式的使用该修饰付，那么编译器可能会优化成register变量。</p><p>使用volatile的场景：中断服务程序中修改的供其它程序检测的变量需要；多任务环境下各任务间共享的标志；存储器映射的硬件寄存器，因为每次对它的读写都可能有不同意义</p><p><strong>const</strong></p><p>内存被初始化后，<strong>程序</strong>(硬件可以，所以const可以和volatile一起用)便不能对其进行修改。const修饰的全局变量的链接性为内部的(就像加了static)。若希望某个常量的链接性为外部的，则可以<strong>使用关键字extern覆盖默认的内部链接性</strong>，这种情况下所有使用该常量的文件都要使用extern来引用声明它，<strong>只能在其中一个文件初始化该变量，且之后该变量不可修改</strong></p><p><strong>常量：固定值</strong>，在程序执行期间不会改变。这些固定的值，又叫做<strong>字面量</strong>。常量可以是任何的基本数据类型，比如整数常量、浮点常量、字符常量，或字符串字面值，也有枚举常量。一般说到常量，就不得不提<code>#define</code>和<code>const</code>。define是宏定义，程序在预处理阶段将用define定义的内容进行了替换。因此程序运行时，常量表中并没有用define定义的常量，系统不为它分配内存(就存储来看，我觉得不能算常量)。const定义的常量，在程序运行时在常量表中，系统为它分配内存。define定义的常量，预处理时只是直接进行了替换。所以编译时不能进行数据类型检验。const定义的常量，在编译时进行严格的类型检验，可以避免出错。define定义表达式时要注意<strong>边缘效应</strong>(就是要记得加括号，仅仅是替换)</p><p>说常量是只读的，只是个笑话，实质上内存永远都可以被用户随意修改，只是编译器给用户的代码注入了一些自己的保护代码，通过软件手段将这段内存软保护起来。这种保护在汇编级别可以轻松突破，其保护也就无效了</p><h1 id="6-类型推导"><a href="#6-类型推导" class="headerlink" title="6 类型推导"></a>6 类型推导</h1><p>在C++11之前的版本（C++98和C++03）中，定义变量或者声明变量之前都必须指明它的类型，比如 int、char 等；但是在一些比较灵活的语言中，比如 C#、JavaScript、PHP、Python 等，程序员在定义变量时可以不指明具体的类型，而是让编译器（或者解释器）自己去推导，这就让代码的编写更加方便，阅读更加费事(我觉得就不应该出现这玩意，编译器能推导出来是啥类型，我可不行啊)</p><p><strong>auto</strong></p><p>在之前的C++版本中，auto关键字用来指明变量的存储类型，它和static关键字是相对的。auto表示变量是自动存储的，这也是编译器的默认规则，所以写不写都一样，一般我们也不写，这使得auto关键字的存在变得非常鸡肋。C++11赋予auto关键字新的含义，使用它来做自动类型推导</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这全篇auto写下来，代码还能看？</span></span><br><span class="line"><span class="keyword">auto</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">auto</span> f = <span class="number">12.8</span>;</span><br><span class="line"><span class="keyword">auto</span> p = &n;</span><br><span class="line"><span class="keyword">auto</span> url = <span class="string">"123456"</span>;</span><br></pre></td></tr></tbody></table></figure><p>注意：auto 仅仅是一个占位符，在编译器期间它会被真正的类型所替代。或者说，C++ 中的变量必须是有明确类型的，只是这个类型是由编译器自己推导出来的。</p><p>不能在函数的参数中使用；不能作用于类的非静态成员变量；不能定义数组；不能作用于模板参数</p><p><strong>decltype</strong></p><p>declare type，和auto的功能一样，都用来在编译时期进行自动类型推导，这个关键字的出现肯定为了弥补auto不足之处，用法：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// varname 表示变量名，value 表示赋给变量的值，exp 表示一个表达式</span></span><br><span class="line"><span class="keyword">auto</span> varname = value;</span><br><span class="line"><span class="keyword">decltype</span>(<span class="built_in">exp</span>) varname[ = value];</span><br></pre></td></tr></tbody></table></figure><p>decltype能够根据变量、字面量、带有运算符的表达式推导出变量的类型</p><p>推到规则：</p><ul><li>如果exp是一个不被括号<code>()</code>包围的表达式，或者是一个类成员访问表达式，或者是一个单独的变量，那么<code>decltype(exp)</code>的类型就和exp一致，这是最普遍最常见的情况</li><li>如果exp是函数调用，那么<code>decltype(exp)</code>的类型就和函数返回值的类型一致</li><li>如果exp是一个左值，或者被括号<code>()</code>包围，那么<code>decltype(exp)</code>的类型就是exp的引用；假设exp的类型为<code>T</code>，那么<code>decltype(exp)</code>的类型就是<code>T&</code></li></ul><p>两者之间的区别：</p><p>auto要求变量必须初始化，也就是在定义变量的同时必须给它赋值；而decltype不要求，初始化与否都不影响变量的类型。这很容易理解，因为auto是根据变量的初始值来推导出变量类型的，如果不初始化，变量的类型也就无法推导了。</p><p>auto将变量的类型和初始值绑定在一起，而decltype将变量的类型和初始值分开；虽然auto的书写更加简洁，但decltype的使用更加灵活</p><p>如果表达式的类型不是指针或者引用，auto会把cv(const volatile)限定符直接抛弃，推导成non-const或者non-volatile类型；如果表达式的类型是指针或者引用，auto将保留cv限定符</p><p><strong>decltype会保留cv限定符</strong></p><h1 id="7-typedef"><a href="#7-typedef" class="headerlink" title="7 typedef"></a>7 typedef</h1><p><a href="https://blog.csdn.net/Andrewniu/article/details/80566324" target="_blank" rel="noopener">https://blog.csdn.net/Andrewniu/article/details/80566324</a></p><p>C语言允许用户使用 typedef 关键字来定义自己习惯的数据类型名称，来替代系统默认的基本类型名称、数组类型名称、指针类型名称与用户自定义的结构型名称、共用型名称、枚举型名称等。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> true 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> <span class="keyword">bool</span>;</span><br><span class="line"><span class="comment">// 在C语言中也可以愉快地使用bool了</span></span><br><span class="line"><span class="keyword">bool</span> aFlag = <span class="literal">true</span>;</span><br></pre></td></tr></tbody></table></figure><p><strong>为基本数据类型定义新的类型名</strong></p><p>为了跨平台，定义一种类型与平台无关</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SIZE_T_DEFINED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  _WIN64</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> __int64    <span class="keyword">size_t</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> _W64 <span class="keyword">unsigned</span> <span class="keyword">int</span>   <span class="keyword">size_t</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SIZE_T_DEFINED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p><strong>为自定义数据类型（结构体、共用体和枚举类型）定义简洁的类型名称</strong></p><p>先看C语言的情况</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tagMyNode</span>{</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tagMyNode</span> *<span class="title">next</span>;</span></span><br><span class="line">} MyNode;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tagMyNode</span> *<span class="title">mTagNode</span>;</span>  <span class="comment">// 老长了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main2</span><span class="params">()</span> </span>{</span><br><span class="line">    MyNode.data = <span class="number">8</span>;</span><br><span class="line">    mTagNode->data = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********用了typedef之后***********/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMyNode</span>{</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tagMyNode</span> *<span class="title">next</span>;</span></span><br><span class="line">} MyNode;</span><br><span class="line"></span><br><span class="line">MyNode *mTagNode;  <span class="comment">// 事实上等价于 typedef struct tagMyNode MyNode;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// MyNode.data = 10;</span></span><br><span class="line">    mTagNode->data = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********再来个有趣的**********/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMyNode</span>{</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tagMyNode</span> *<span class="title">next</span>;</span></span><br><span class="line">} MyNode, Node;</span><br><span class="line"></span><br><span class="line">MyNode *mTagNode;  <span class="comment">// typedef struct tagMyNode MyNode;</span></span><br><span class="line">Node *mNode;  <span class="comment">// typedef struct tagMyNode Node;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    mTagNode->data = <span class="number">10</span>;</span><br><span class="line">    mNode->data = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>再看看C++有没有什么不同</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tagMyNode</span>{</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tagMyNode</span> *<span class="title">next</span>;</span></span><br><span class="line">} MyNode;</span><br><span class="line"></span><br><span class="line">tagMyNode *mTagNode;  <span class="comment">// 这里其实是把struct当class用了</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tagMyNode</span> *<span class="title">mTagNode2</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main1</span><span class="params">()</span> </span>{</span><br><span class="line">    MyNode.data = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// tagMyNode->data = 10;  // 没有初始化的类不能操作 但可以 mTagNode = new tagMyNode;</span></span><br><span class="line">    mTagNode2->data = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********使用typedef*************/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMyNode</span>{</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tagMyNode</span> *<span class="title">next</span>;</span></span><br><span class="line">} MyNode;</span><br><span class="line"></span><br><span class="line">tagMyNode *mTagNode;  <span class="comment">// 事实上这里是 class tagMyNode;</span></span><br><span class="line">MyNode *mTagNode2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main1</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// tagMyNode->data = 10;</span></span><br><span class="line">    mTagNode2->data = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>为数组定义简介类型</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> INT_ARR_LEN_10[<span class="number">10</span>];</span><br><span class="line">INT_ARR_LEN_10 arr;</span><br></pre></td></tr></tbody></table></figure><p><strong>为指针定义简洁的名称</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* PCHAR;</span><br><span class="line">PCHAR pc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PCHAR pChar;  <span class="comment">// 等价于const char* pChar;吗？</span></span><br><span class="line"><span class="comment">// 其实是不等价的，typedef不是字符串替换，这里const应当是修饰指针的，即指针常量(网上通俗叫法)</span></span><br><span class="line"><span class="comment">// 所以等价于char* const，而不是const char*，有点懵？</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>先补充一下，对于<code>int *const p = &a;</code>，网上通常的叫法是指针常量，而在C++ Primer第五版中叫做常量指针，虽然叫法不一样，但是大家的意思是一样的</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *p1 = <span class="string">"abc"</span>;  <span class="comment">// 指向常量的变量指针 从右向左看</span></span><br><span class="line"><span class="keyword">char</span> <span class="keyword">const</span> *p2 = <span class="string">"abc"</span>;  <span class="comment">// 指向常量的变量指针</span></span><br><span class="line"><span class="keyword">char</span> *<span class="keyword">const</span> p3 = <span class="string">"abc"</span>;  <span class="comment">// 指向变量的常量指针</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> <span class="keyword">const</span> *p4 = <span class="string">"abc"</span>;  <span class="comment">// 其实这里的第二个const是多余的</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> p5 = <span class="string">"abc"</span>;  <span class="comment">// 指向常量的常量指针</span></span><br><span class="line"></span><br><span class="line">p1 = &c;  <span class="comment">// p1的值可以变</span></span><br><span class="line"><span class="comment">// *p1 = c;  // p1指向的值不能变</span></span><br><span class="line"></span><br><span class="line">p2 = &c;  <span class="comment">// 同上</span></span><br><span class="line"><span class="comment">// *p1 = c;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// p3 = &c;  // p3的值不可以变 p3是指针(地址) 是常量</span></span><br><span class="line">*p3 = c;  <span class="comment">// *p3的值可以变</span></span><br><span class="line"></span><br><span class="line">p4 = &c;  <span class="comment">// 同p1</span></span><br><span class="line"><span class="comment">// *p4 = c;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// p5 = &c;  // 指针(地址)常量 不可变</span></span><br><span class="line"><span class="comment">// *p5 = c;  // 指向常量 不可变</span></span><br></pre></td></tr></tbody></table></figure><p>按照C++ Primer的说法，<strong>从右向左看</strong>似乎是能看通的，没啥大问题。不过这么想，const优先和左边结合，左边没有再和右边结合，反正const就是不允许变的意思，并且这样就能说得通上面的<code>const PCHAR</code>是<code>PCHAR const</code>，也就是<code>char* const</code>，而不是<code>const char *</code>或<code>char const *</code>了。</p><p>这里的指针换成C++的引用也是同样适用的</p><p>话又说回来，<strong>一般使用typedef去简化指针的时候似乎都会加个const</strong>，例如：<code>typedef const char* PCHAR;</code>，以使得该指针本身是常量，而不是对象</p><h1 id="8-sizeof"><a href="#8-sizeof" class="headerlink" title="8 sizeof"></a>8 sizeof</h1><p>这个其实没啥好说的，就是这是个关键字，不是个函数..比如说，写一段cpp代码，如下</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a)</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    fun(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>汇编一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">truepushq%rbp</span><br><span class="line">true...  # 先不管中间是啥</span><br><span class="line">true.seh_endprologue</span><br><span class="line">truecall__main  # 程序入口 main函数 从汇编来看 main并不是第一阶段</span><br><span class="line">truemovl$4, -4(%rbp)  # 这一步我觉得是 int a = sizeof(int);</span><br><span class="line">truemovl$4, %ecx  # 这一步我觉得是 a = 4，fun的形参</span><br><span class="line">truecall_Z3funi  # 这才是调用函数fun，可见，如果是函数必然是要call的</span><br><span class="line">truemovl$0, %eax</span><br><span class="line">trueaddq$48, %rsp</span><br><span class="line">truepopq%rbp</span><br><span class="line">trueret</span><br></pre></td></tr></tbody></table></figure><p>从汇编代码来看，在编译阶段就已经知道<code>sizeof(int)</code>的值了</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;1-标识符-关键字&quot;&gt;&lt;a href=&quot;#1-标识符-关键字&quot; class=&quot;headerlink&quot; title=&quot;1 标识符 关键字&quot;&gt;&lt;/a&gt;1 标识符 关键字&lt;/h1&gt;&lt;p&gt;标识符命名规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量名只能是字母（A-Z，a-z）和数字（0-9）或者下划线（_）或者美元符号（&lt;strong&gt;$&lt;/strong&gt;）组成&lt;/li&gt;
&lt;li&gt;第一个字母不能是数字&lt;/li&gt;
&lt;li&gt;不能使用C/C++关键字来命名变量&lt;/li&gt;
&lt;li&gt;变量名区分大小写&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; $name1, _name2, Name3;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;似乎有的版本不支持&lt;code&gt;$&lt;/code&gt;..我试了gcc8.1是可以的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;C语言关键字：&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/Cpp" scheme="https://sidneygod.github.io/categories/C-Cpp/"/>
    
    
      <category term="C" scheme="https://sidneygod.github.io/tags/C/"/>
    
      <category term="Cpp" scheme="https://sidneygod.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>JNI</title>
    <link href="https://sidneygod.github.io/posts/e3b64abb/"/>
    <id>https://sidneygod.github.io/posts/e3b64abb/</id>
    <published>2020-03-01T06:07:01.000Z</published>
    <updated>2020-05-10T03:20:55.800Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="1-JNI"><a href="#1-JNI" class="headerlink" title="1 JNI"></a>1 JNI</h1><p>JNI(Java Native Interface)，提供了若干API实现了Java和其他语言(主要是C/C++)的通信。简单来说就是Java想要调用C/C++的接口必须遵循JNI的规范</p><p>牵涉到一个很重要的头文件<code>jni.h</code>，这个头文件的位置：<code>\jdk1.8.0_211\include\jni.h</code>，如果是Linux，或许是<code>/usr/lib/jvm/java-8-openjdk-amd64/include/jni.h</code>。这个头文件定义了数据类型，JNIInterface(定义了很多函数指针，就是一些接口)</p><h2 id="1-1-hello-world"><a href="#1-1-hello-world" class="headerlink" title="1.1 hello world"></a>1.1 hello world</h2><ol><li><p>创建一个JniHello.java, 并声明一个native函数<code>sayHello()</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JniHello</span> </span>{</span><br><span class="line">    <span class="comment">// define a native function</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">hello</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>生产C/C++头文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先编译 生成class文件</span></span><br><span class="line">javac JniHello.java</span><br><span class="line"><span class="comment"># 生成头文件</span></span><br><span class="line">javah JniHello</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/image-20200301142434381.png"></p></li><li><p>编写对应的C/C++函数，实现JniHello.h中声明的方法</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JniHello.cpp 这里c和cpp文件是有区别的</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"JniHello.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL Java_JniHello_hello</span><br><span class="line">  (JNIEnv *env, jclass clazz, jstring contentStr)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 必须是指针 可到jni.h去查</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* jstr = env->GetStringUTFChars(contentStr, JNI_FALSE);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> << <span class="string">"Welcome to C/C++ world! java: "</span> << jstr << <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建字符串并返回</span></span><br><span class="line">    <span class="keyword">char</span> cStr[] = <span class="string">"I am from C/Cpp"</span>;</span><br><span class="line">    <span class="keyword">return</span> env->NewStringUTF(cStr);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>生成目标文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一定要带上这两个目录 且看好是/而不是\，毕竟win容易出这个错</span></span><br><span class="line">gcc \</span><br><span class="line">  -I D:/Develop/JDK/jdk1.8.0_211/include \</span><br><span class="line">  -I D:/Develop/JDK/jdk1.8.0_211/include/win32 \</span><br><span class="line">  -c -fPIC JniHello.cpp</span><br><span class="line"><span class="comment"># 如果出现 fatal error: jni.h: No such file or directory 肯定是因为没带目录</span></span><br></pre></td></tr></tbody></table></figure><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/image-20200301144652883.png"></p></li><li><p>生成C/C++共享库</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 库文件名格式(name可以随便改): <name> + .dll</span></span><br><span class="line">g++ -shared JniHello.o -o JniHello.dll</span><br><span class="line"><span class="comment"># 为什么是g++而不是gcc，因为会报错..其实貌似是因为gcc不识别c++?</span></span><br><span class="line"><span class="comment"># 因为是windows所以是<name> + .dll，如果是Linux就是lib + <name> + .so了</span></span><br></pre></td></tr></tbody></table></figure><p>总之执行完后，目录下会多出一个<code>JniHello.dll</code>文件</p></li><li><p>Java文件中加载共享库并调用函数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JniHello</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        <span class="comment">// JniHello + .dll</span></span><br><span class="line">        System.loadLibrary(<span class="string">"JniHello"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// define a native function</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">hello</span><span class="params">(String str)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// call hello</span></span><br><span class="line">        String str = hello(<span class="string">"I am from Java!"</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>编译运行Java文件</p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/image-20200301150441786.png"></p></li></ol><p>以上就是在Windows下，纯手撸java调c的过程了，前提是要配置好gcc或其他C/C++编译器</p><h2 id="1-2-JNI原理"><a href="#1-2-JNI原理" class="headerlink" title="1.2 JNI原理"></a>1.2 JNI原理</h2><p>计算机系统中，每种语言都有一个执行环境(Runtime)用于解释执行语言中的语句，不同种的语言一般是不能存在同一种环境的。人鬼殊途</p><h3 id="1-2-1-JavaVM"><a href="#1-2-1-JavaVM" class="headerlink" title="1.2.1 JavaVM"></a>1.2.1 JavaVM</h3><p>Java执行环境是JVM，其实是主机环境中的一个进程，每个JVM在本地环境都有一个JavaVM结构体，该结构体在创建JVM时返回</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JNI_CreateJavaVM(JavaVM **pvm, <span class="keyword">void</span> **penv, <span class="keyword">void</span> *args);</span><br></pre></td></tr></tbody></table></figure><p>JavaVM是JVM在JNI层的代表，JNI全局仅仅有一个JavaVM结构体，其中封装了一些函数指针(函数表结构)，JavaVM中封装的这些函数指针主要是针对JVM操作接口。另外，在C和CPP中JavaVM中定义有所不同</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JNI Invocation Interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">typedef</span> JavaVM_ JavaVM;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNIInvokeInterface_</span> *<span class="title">JavaVM</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>在CPP中对JavaVM进行了一次封装，少一个参数，所以推荐使用CPP</p><h3 id="1-2-2-JNIEnv"><a href="#1-2-2-JNIEnv" class="headerlink" title="1.2.2 JNIEnv"></a>1.2.2 JNIEnv</h3><p>在<code>jni.h</code>中还声明一样东西</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JNI Native Method Interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">typedef</span> JNIEnv_ JNIEnv;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNINativeInterface_</span> *<span class="title">JNIEnv</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>JNIEnv是当前Java线程执行环境，一个JVM对应一个JavaVM结构体，而一个JVM可以创建多个Java线程，每一个Java线程对应一个JNIEnv结构，他们保存在线程本地存储TLS中。因此，不同线程的JNIEnv是不同的，不能共用。JNIEnv也是一个函数表，在本地代码中通过JNIEnv的函数表来操作Java数据或调用Java方法。</p><p>从这里也可看出来，c和cpp在使用env时的区别了</p><h1 id="2-Android-JNI"><a href="#2-Android-JNI" class="headerlink" title="2 Android JNI"></a>2 Android JNI</h1><p>Android中使用JNI需要NDK(Native Develop Kit)，先体验一把</p><h2 id="2-1-Java-call-C-CPP"><a href="#2-1-Java-call-C-CPP" class="headerlink" title="2.1 Java call C/CPP"></a>2.1 Java call C/CPP</h2><h3 id="2-1-1-传统方式"><a href="#2-1-1-传统方式" class="headerlink" title="2.1.1 传统方式"></a>2.1.1 传统方式</h3><ol><li><p>创建 HelloWorld.java 并点击一下 <strong>Build</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.sidneygod.jni_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.loadLibrary(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">sayHello</span><span class="params">(String str)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>生成c/cpp头文件</p><p>可以直接找到对应的<code>HelloWorld.class</code>文件，然后使用<code>javah -jni HelloWorld</code></p><p>也可以这样，在IDE的Terminal中，进入<code>app/src/main/java/</code>，输入对应的指令</p><p><code>javah -jni io.github.sidneygod.jni_1.HelloWorld</code></p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/image-20200301160545773.png"></p></li><li><p>在main下创建jni目录，编写对应的c/cpp文件</p><p>这里不在赘述c/cpp文件，记得把刚刚的头文件也给拷过来，比较烦人的是，不能用cout..所以改成了ndk的log</p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/image-20200301172026651.png"></p></li><li><p>编写<code>Android.mk</code>文件</p><p>在jni目录创建<code>Android.mk</code>文件</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE := HelloWorld</span><br><span class="line">LOCAL_SRC_FILES := io_github_sidneygod_jni_1_HelloWorld.cpp</span><br><span class="line"><span class="comment"># 为了能打印log</span></span><br><span class="line">LOCAL_LDLIBS := -lm -llog</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>修改app下的build.gradle</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android {</span><br><span class="line">    ...</span><br><span class="line">    defaultConfig {</span><br><span class="line">        ...</span><br><span class="line">        ndk {</span><br><span class="line">            <span class="comment">// 这个moduleName和mk文件的LOCAL_MODULE一致</span></span><br><span class="line">            moduleName <span class="string">"HelloWorld"</span></span><br><span class="line">            <span class="comment">// 打印日志需要的</span></span><br><span class="line">            ldLibs <span class="string">"log"</span>, <span class="string">"z"</span>, <span class="string">"m"</span></span><br><span class="line">            <span class="comment">// 指定生成对应版本的库文件 不加这句话默认生成全部</span></span><br><span class="line">            abiFilters <span class="string">"arm64-v8a"</span>, <span class="string">"armeabi-v7a"</span>, <span class="string">"x86_64"</span>, <span class="string">"x86"</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    buildTypes {</span><br><span class="line">        ...</span><br><span class="line">        externalNativeBuild {</span><br><span class="line">            ndkBuild {</span><br><span class="line">                path <span class="string">'src/main/jni/Android.mk'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>改完了需要sync一下</p></li><li><p>编译运行</p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/image-20200301172240368.png"></p><p>和预想中的一毛一样..生成的库文件就在<code>build/intermediates/ndkBuild/debug/obj/local/x86/libHelloWorld.so</code></p></li></ol><h3 id="2-1-2-CMake工具"><a href="#2-1-2-CMake工具" class="headerlink" title="2.1.2 CMake工具"></a>2.1.2 CMake工具</h3><p>直接新建一个Native C++项目</p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/image-20200301172757769.png"></p><p>然后会自动生成一个demo，直接运行就可以了..</p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/image-20200301173118469.png"></p><p>可以看到多了个CMakeLists.txt, 看一下<code>build.gradle</code>文件</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android {</span><br><span class="line">    compileSdkVersion <span class="number">29</span></span><br><span class="line">    buildToolsVersion <span class="string">"29.0.3"</span></span><br><span class="line">    defaultConfig {</span><br><span class="line">        ...</span><br><span class="line">        externalNativeBuild {</span><br><span class="line">            cmake {</span><br><span class="line">                cppFlags <span class="string">""</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">    externalNativeBuild {</span><br><span class="line">        cmake {</span><br><span class="line">            path <span class="string">"src/main/cpp/CMakeLists.txt"</span></span><br><span class="line">            version <span class="string">"3.10.2"</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>出现了两次externalNativeBuild</p><p>第一次: 填写CMake参数, 详情参考<a href="https://developer.android.google.cn/ndk/guides/cmake.html" target="_blank" rel="noopener">CMake|Android NDK</a></p><p>第二次: 指明CMakeLists.txt路径</p><p>看看这个CMakeLists.txt到底是什么鬼</p><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">add_library</span>(</span><br><span class="line">             native-lib</span><br><span class="line">             SHARED</span><br><span class="line">             native-lib.cpp )</span><br><span class="line">...</span><br><span class="line"><span class="keyword">find_library</span>(</span><br><span class="line">              log-lib</span><br><span class="line">              log )</span><br><span class="line">...</span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">                       native-lib</span><br><span class="line">                       <span class="variable">${log-lib}</span> )</span><br></pre></td></tr></tbody></table></figure><ul><li>cmake_minimum_required(): 指定CMake最小版本</li><li>add_library: 创建一个静态或者动态库<ul><li>native-lib: 是库的名字</li><li>SHARED: 是库的类别 动态还是静态</li><li>native-lib.cpp: 库原文件路径</li></ul></li><li>find_library(): 找到一个预编译的库, 将之作为变量存起来<ul><li>log-lib: 设置路径变量名称</li><li>log: 制定NDK库的名字</li></ul></li><li>target_link_libraries(): 指定CMake链接到的目标库<ul><li>native-lib: 指定的目标库</li><li>${log-lib}: 将目标库链接到NDK中的日志库</li></ul></li></ul><p><a href="http://cmake.org/documentation" target="_blank" rel="noopener">CMake文档-英文</a> <a href="https://www.zybuluo.com/khan-lau/note/254724" target="_blank" rel="noopener">CMake手册-中文</a></p><p>注意: 与Instant Run不兼容</p><h2 id="2-2-C-Cpp-call-Java"><a href="#2-2-C-Cpp-call-Java" class="headerlink" title="2.2 C/Cpp call Java"></a>2.2 C/Cpp call Java</h2><h3 id="2-2-1-函数签名"><a href="#2-2-1-函数签名" class="headerlink" title="2.2.1 函数签名"></a>2.2.1 函数签名</h3><p>首先看一眼<code>jni.h</code>中对JNINativeMethod的定义</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">char</span> *signature;</span><br><span class="line">    <span class="keyword">void</span> *fnPtr;</span><br><span class="line">} JNINativeMethod;</span><br></pre></td></tr></tbody></table></figure><p>函数名, 函数指针都好理解, 多出来一个函数签名, 这是因为Java允许方法重载, 光靠名字是分别不出来是哪个方法的</p><p>查看一个类中函数的签名</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一定要写对class文件的目录</span></span><br><span class="line">javap -s JniHello.class</span><br></pre></td></tr></tbody></table></figure><p>然后就可以看到一坨..</p><figure class="highlight haxe"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"JniHello.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JniHello</span> </span>{</span><br><span class="line">  <span class="keyword">public</span> JniHello();</span><br><span class="line">    descriptor: <span class="type"></span>()V</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> native java.lang.<span class="keyword">String</span> hello(java.lang.<span class="keyword">String</span>);</span><br><span class="line">    descriptor: <span class="type"></span>(Ljava/lang/<span class="keyword">String</span>;)Ljava/lang/<span class="keyword">String</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> void main(java.lang.<span class="keyword">String</span>[]);</span><br><span class="line">    descriptor: <span class="type"></span>([Ljava/lang/<span class="keyword">String</span>;)V</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> {};</span><br><span class="line">    descriptor: <span class="type"></span>()V</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第一个<code>()V</code>：默认构造函数的签名</p><p>第二个<code>(Ljava/lang/String;)Ljava/lang/String;</code>：是那个native函数的签名</p><p>第三个<code>([Ljava/lang/String;)V</code>：是main函数的签名</p><p>第四个<code>()V</code>：是哪个静态代码块的</p><p>JNI规范定义的函数签名信息(<font color="red">注意这个”;” 不加是识别不出来的..</font>)</p><p><code>(参数1类型标识;参数2类型标识;...;)返回值类型标识;</code></p><ul><li>当类型是引用类型时: L+包名+类名, Ljava/lang/String</li><li>当类型是基本类型时: 除了boolean是Z, long是J, 其他全是基本类型首字母大写, V就是void</li><li>数组<ul><li>一般数组: [签名</li><li>int[]: [i</li><li>String[]: [LJava/lang/Object</li></ul></li></ul><h3 id="2-2-2-实例"><a href="#2-2-2-实例" class="headerlink" title="2.2.2 实例"></a>2.2.2 实例</h3><p>把那个啥上面传统方式的改一下</p><p>先在HelloWorld.java中加两个函数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.loadLibrary(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">sayHello</span><span class="params">(String str)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新增native函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">nHello</span><span class="params">(String str)</span></span>;</span><br><span class="line">    <span class="comment">// native要调用的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">hello</span><span class="params">(String str)</span> </span>{</span><br><span class="line">        Log.d(<span class="string">"SidneyGod"</span>, <span class="string">"hello: "</span> + str);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Java!"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>再去完善cpp文件新增的函数nHello</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_io_github_sidneygod_jni_11_HelloWorld_nHello</span><br><span class="line">  (JNIEnv *env, jclass clazz, jstring contentStr)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* jStr = env->GetStringUTFChars(contentStr, JNI_FALSE);</span><br><span class="line">    LOGE(<span class="string">"Welcome to C/CPP! jStr: %s"</span>, jStr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取HelloWorld的class 包名 + 类名</span></span><br><span class="line">    jclass helloWorld = env->FindClass(<span class="string">"io/github/sidneygod/jni_1/HelloWorld"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取HelloWorld的静态方法hello 类, 方法名, 方法签名</span></span><br><span class="line">    jmethodID hello = env->GetStaticMethodID(</span><br><span class="line">                          helloWorld,</span><br><span class="line">                          <span class="string">"hello"</span>,</span><br><span class="line">                          <span class="string">"(Ljava/lang/String;)Ljava/lang/String;"</span>);</span><br><span class="line">    <span class="comment">// 创建字符串</span></span><br><span class="line">    jstring cStr = env->NewStringUTF(<span class="string">"Hello, I am from JNI."</span>);</span><br><span class="line">    <span class="comment">// 调用Java静态方法 类, 方法, 方法参数...</span></span><br><span class="line">    jstring ret = (jstring) env->CallStaticObjectMethod(helloWorld, hello, cStr);</span><br><span class="line">    <span class="comment">// 打印返回值</span></span><br><span class="line">    LOGE(<span class="string">"Return Value: %s"</span>, env->GetStringUTFChars(ret, JNI_FALSE));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其他基本上没什么变化，在click2中调用nHello()，就会触发调用HelloWorld的hello()函数</p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/image-20200301182529753.png"></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;1-JNI&quot;&gt;&lt;a href=&quot;#1-JNI&quot; class=&quot;headerlink&quot; title=&quot;1 JNI&quot;&gt;&lt;/a&gt;1 JNI&lt;/h1&gt;&lt;p&gt;JNI(Java Native Interface)，提供了若干API实现了Java和其他语言(主要是C/C++)的通信。简单来说就是Java想要调用C/C++的接口必须遵循JNI的规范&lt;/p&gt;
&lt;p&gt;牵涉到一个很重要的头文件&lt;code&gt;jni.h&lt;/code&gt;，这个头文件的位置：&lt;code&gt;\jdk1.8.0_211\include\jni.h&lt;/code&gt;，如果是Linux，或许是&lt;code&gt;/usr/lib/jvm/java-8-openjdk-amd64/include/jni.h&lt;/code&gt;。这个头文件定义了数据类型，JNIInterface(定义了很多函数指针，就是一些接口)&lt;/p&gt;
&lt;h2 id=&quot;1-1-hello-world&quot;&gt;&lt;a href=&quot;#1-1-hello-world&quot; class=&quot;headerlink&quot; title=&quot;1.1 hello world&quot;&gt;&lt;/a&gt;1.1 hello world&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个JniHello.java, 并声明一个native函数&lt;code&gt;sayHello()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;JniHello&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// define a native function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生产C/C++头文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 先编译 生成class文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;javac JniHello.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 生成头文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;javah JniHello&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://sidneygod.github.io/categories/Android/"/>
    
    
      <category term="jni" scheme="https://sidneygod.github.io/tags/jni/"/>
    
  </entry>
  
  <entry>
    <title>Build OpenGrok To Read the Fuck Source Code</title>
    <link href="https://sidneygod.github.io/posts/ad7ab3b5/"/>
    <id>https://sidneygod.github.io/posts/ad7ab3b5/</id>
    <published>2020-01-01T03:24:42.000Z</published>
    <updated>2020-05-13T14:16:20.126Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="0-缘起"><a href="#0-缘起" class="headerlink" title="0 缘起"></a>0 缘起</h1><p>之前看代码都是非常少的, 所以基本就用IDE啦, 还能调试, 后来接触Android, 源码量太大了, 导入IDE去看太慢了..然后开始搜神器, 就有了Source Insight, Understand..说不出来哪不好, 反正就是不爽, 最后觉得还是OpenGrok好用..那就动手搭建一个吧, 官方文档: <a href="https://github.com/oracle/opengrok/wiki/How-to-setup-OpenGrok" target="_blank" rel="noopener">https://github.com/oracle/opengrok/wiki/How-to-setup-OpenGrok</a></p><h1 id="1-搭环境"><a href="#1-搭环境" class="headerlink" title="1 搭环境"></a>1 搭环境</h1><p>首先, 我在Win10和CentOS7.6上都试验成功了, 但是个人建议看有关Linux的代码还是用Linux比较好, 在后面下源码的时候会说为啥, 但是鉴于Windows用得比较多(我就是..), 所以整理了两份文档, 废话不多说, 开始..</p><a id="more"></a><h2 id="1-1-Windows"><a href="#1-1-Windows" class="headerlink" title="1.1 Windows"></a>1.1 Windows</h2><p>首先在Windows环境下搭建..</p><h3 id="1-1-1-prepare"><a href="#1-1-1-prepare" class="headerlink" title="1.1.1 prepare"></a>1.1.1 prepare</h3><p>需要准备以下几样东西:</p><ol><li><strong>JDK(版本要大于8)</strong></li></ol><p>下载地址: <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>安装好后记得配置一下环境变量, 不再赘述</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME : D:\Develop\JDK\jdk1.8.0_211</span><br><span class="line">JRE_HOME : D:\Develop\JDK\jre1.8.0_211</span><br><span class="line">CLASSPATH : .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br><span class="line"></span><br><span class="line">%JAVA_HOME%\bin</span><br><span class="line">%JRE_HOME%\bin</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><strong>Tomcat(版本大于8)</strong></li></ol><p>关于容器的选择, 并不一定要Tomcat, 其它的也可以, 比如jetty, 我用的是Tomcat8, <a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.50/bin/apache-tomcat-8.5.50-windows-x64.zip" target="_blank" rel="noopener">点此下载</a></p><p>下载好后, 解压即可, 个人比较喜欢用压缩版的而不是安装版的, 然后记得配置一下环境变量</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CATALINA_HOME : D:\Develop\apache-tomcat\apache-tomcat-8.5.50</span><br><span class="line"></span><br><span class="line">%CATALINA_HOME%\bin</span><br><span class="line">%CATALINA_HOME%\lib</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><strong>Universal-ctags</strong></li></ol><p>这个是必须的, OpenGork依赖这个东西, 由于是Windows, 直接下载release版本就好了, 下载地址: <a href="https://github.com/universal-ctags/ctags-win32/releases" target="_blank" rel="noopener">https://github.com/universal-ctags/ctags-win32/releases</a> 选择对应的版本, 我这里选的是64bit</p><p><img alt="Universal-ctags" data-src="https://raw.githubusercontent.com/SidneyGod/ImagePlace/master/20200101120519.jpg"></p><p>解压到相应的文件夹下</p><ol start="4"><li><strong>OpenGrok</strong></li></ol><p>和Universal-ctags一样, 直接下release版本就好了, 不要下源码, 下载地址: <a href="https://github.com/oracle/opengrok/releases" target="_blank" rel="noopener">https://github.com/oracle/opengrok/releases</a> </p><p><img alt="OpenGrok" data-src="https://raw.githubusercontent.com/SidneyGod/ImagePlace/master/20200101122204.png"></p><p>没得选, 不用选..</p><ol start="5"><li>下载源码</li></ol><p>我主要是为了看Android源码, 这个如何下载放到后面说..现在假设已经下载好了</p><h3 id="1-1-2-indexing"><a href="#1-1-2-indexing" class="headerlink" title="1.1.2 indexing"></a>1.1.2 indexing</h3><p>在使用OpenGrok之前是需要建立索引的, 这一点和Source Insight一样, 是一个漫长的等待时间..</p><ol><li>运行Tomcat</li></ol><p>进入到Tomcat的bin目录, 我这里是<code>D:\Develop\apache-tomcat\apache-tomcat-8.5.50\bin</code>, 双击<code>startup.bat</code>启动Tomcat, 一般Windows启动成功都是有个命令窗口的, 类似这样</p><p><img alt="start-tomcat" data-src="https://raw.githubusercontent.com/SidneyGod/ImagePlace/master/20200101130320.png"></p><ol start="2"><li>拷贝<code>source.war</code></li></ol><p>将OpenGrok目录下的<code>lib/source.war</code>拷贝至Tomcat的webapps目录下, 我这边分别是<code>D:\Develop\apache-tomcat\opengrok-1.3.6\lib\source.war</code>和<code>D:\Develop\apache-tomcat\apache-tomcat-8.5.50\webapps</code>, 如果正常的话, <code>source.war</code>会自动解压成一个文件夹..</p><p><img alt="source" data-src="https://raw.githubusercontent.com/SidneyGod/ImagePlace/master/20200101131123.png"></p><p>我这里将tomcat原有的其他不相干的文件夹全删了..因为用不上..</p><ol start="3"><li>创建软链接</li></ol><p>首先在OpenGrok文件夹下, 建两个文件夹<code>index</code>和<code>source</code>, 分别用于存储索引文件和项目源码的软链接(这似乎是Linux概念, 问题不大, 且这么表述)</p><p>首先到source文件夹下(<code>D:\Develop\apache-tomcat\opengrok-1.3.6\source</code>), 然后如图所示</p><p><img alt="cmd" data-src="https://raw.githubusercontent.com/SidneyGod/ImagePlace/master/20200101131909.png"></p><p>就能出现出现cmd窗口了, 且在当前路径, 然后再执行下面这个命令给源码创建一个软链接</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 链接名 和 源码绝对路径</span></span><br><span class="line">mklink /J android10-release E:\FuckSource\android10-release</span><br></pre></td></tr></tbody></table></figure><p>执行完之后, 该目录下就会多出个文件夹了, 看起来和复制过来的一样, 其实只是个链接</p><ol start="4"><li>建立索引</li></ol><p>第一次使用OpenGrok需要建立索引, 这个时间很长的, 要有心理准备..其实做起来很简单, 在cmd窗口执行一条命令即可, 在此之前先修改一下OpenGrok的配置, 到Tomcat的webapps文件下, 进入source文件夹, 接着按着这个路径找<code>WEB-INF\web.xml</code>, 我这边的路径是<code>D:\Develop\apache-tomcat\apache-tomcat-8.5.50\webapps\source\WEB-INF\web.xml</code>, 打开这个文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8"?></span></span><br><span class="line"><span class="tag"><<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">display-name</span>></span>OpenGrok<span class="tag"></<span class="name">display-name</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">description</span>></span>A wicked fast source browser<span class="tag"></<span class="name">description</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">context-param</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">description</span>></span>Full path to the configuration file where OpenGrok can read its configuration<span class="tag"></<span class="name">description</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">param-name</span>></span>CONFIGURATION<span class="tag"></<span class="name">param-name</span>></span></span><br><span class="line">        <span class="comment"><!-- 修改成你要存放配置文件的地方 --></span></span><br><span class="line">        <span class="tag"><<span class="name">param-value</span>></span>D:/Develop/apache-tomcat/opengrok-1.3.6/index/configuration.xml<span class="tag"></<span class="name">param-value</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">context-param</span>></span></span><br></pre></td></tr></tbody></table></figure><p>这些做完后, 再执行下面这条命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java -Xmx524m -jar <span class="string">"D:\\Develop\\apache-tomcat\\opengrok-1.3.6\\lib\\opengrok.jar"</span> -W <span class="string">"D:\\Develop\\apache-tomcat\\opengrok-1.3.6\\index\\configuration.xml"</span> -P -S -v -s <span class="string">"D:\\Develop\\apache-tomcat\\opengrok-1.3.6\\source"</span> -d <span class="string">"D:\\Develop\\apache-tomcat\\opengrok-1.3.6\\index"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析一下</span></span><br><span class="line"><span class="comment"># -jar 跟的是 OpenGrok下的lib/opengrok.jar</span></span><br><span class="line"><span class="comment"># -W 跟的是 配置文件位置</span></span><br><span class="line"><span class="comment"># -P -S -v 照着加就是了</span></span><br><span class="line"><span class="comment"># -s 跟的是 源码位置</span></span><br><span class="line"><span class="comment"># -d 跟的是 索引位置</span></span><br><span class="line"><span class="comment"># 还有更多配置选项可以使用 java -jar /path/to/opengrok.jar 查看</span></span><br></pre></td></tr></tbody></table></figure><p>经过漫长的等待, 索引建立完成了, 就可以打开浏览器, 通过 <a href="http://127.0.0.1:8080/source" target="_blank" rel="noopener">http://127.0.0.1:8080/source</a> 进行访问了, 如果以后代码有更新, 可以再用这条命令进行增量建立索引</p><p><img alt="open grok" data-src="https://raw.githubusercontent.com/SidneyGod/ImagePlace/master/20200101134613.png"></p><p>如果你打开的和我不一样, 是白底的不用慌张, 因为我魔改了一下css文件, 样式表在<code>D:\Develop\apache-tomcat\apache-tomcat-8.5.50\webapps\source\default\style.min.css</code>, 想自定义的格式可以配合浏览器的检查元素, 魔改一波..</p><h2 id="1-2-Linux"><a href="#1-2-Linux" class="headerlink" title="1.2 Linux"></a>1.2 Linux</h2><p>和Windows的搭建方法很类似, 既然都用Linux了, 那废话不多说了, 敬你是个高手, 我直接搬文档了</p><h3 id="1-2-1-Requirements"><a href="#1-2-1-Requirements" class="headerlink" title="1.2.1 Requirements"></a>1.2.1 Requirements</h3><ol><li><p><a href="http://www.oracle.com/technetwork/java/" target="_blank" rel="noopener">JDK</a> 1.8 or higher</p></li><li><p>OpenGrok ‘’’binaries’’’ from <a href="https://github.com/OpenGrok/OpenGrok/releases" target="_blank" rel="noopener">https://github.com/OpenGrok/OpenGrok/releases</a> (<strong>.tar.gz file</strong> with binaries, not the source code tarball !)</p></li><li><p><a href="https://github.com/universal-ctags" target="_blank" rel="noopener">https://github.com/universal-ctags</a> for analysis (avoid Exuberant ctags, they are not maintained anymore)</p></li></ol><p>这个有必要解释一下, 先把本地的ctags卸了, 具体见命令行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 卸载</span></span><br><span class="line"><span class="comment">## Ubuntu</span></span><br><span class="line">sudo apt-get remove ctags</span><br><span class="line">sudo apt-get autoremove</span><br><span class="line">sudo apt-get install autoconf</span><br><span class="line">sudo apt-get install automake</span><br><span class="line"><span class="comment">## CentOS</span></span><br><span class="line">yum list installed | grep ctags</span><br><span class="line">yum -y remove ctags  <span class="comment"># 因为我的环境本就没有 所以不知道具体啥名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 安装辅助工具</span></span><br><span class="line"><span class="comment">## Ubuntu</span></span><br><span class="line">sudo apt-get install autoconf</span><br><span class="line">sudo apt-get install automake</span><br><span class="line"><span class="comment">## CentOS</span></span><br><span class="line">yum install autoconf automake</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 安装universal-ctags</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/universal-ctags/ctags.git</span><br><span class="line"><span class="built_in">cd</span> ctags</span><br><span class="line">./autogen.sh </span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li><p>A servlet container like <a href="https://glassfish.dev.java.net/" target="_blank" rel="noopener">GlassFish</a> or <strong><a href="http://tomcat.apache.org" target="_blank" rel="noopener">Tomcat</a> 8.0</strong> or later also running with Java at least 1.8 配一个容器</p></li><li><p>下载源码..如有需要, 看第二章</p></li></ol><h3 id="1-2-2-Creating-the-index"><a href="#1-2-2-Creating-the-index" class="headerlink" title="1.2.2 Creating the index"></a>1.2.2 Creating the index</h3><p>总结一下目前情况: Tomcat配置好了, 并且正在运行中; OpenGrok解压好了; universal-ctags安装好了</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 安装辅助工具</span></span><br><span class="line"><span class="built_in">cd</span> /root/MyApp/opengrok-1.3.6/tools/</span><br><span class="line">python3 -m pip install opengrok-tools.tar.gz  <span class="comment"># 必须是python3</span></span><br><span class="line"><span class="comment"># 2 创建两个文件夹</span></span><br><span class="line">mkdir /root/MyApp/opengrok-1.3.6/index  <span class="comment"># 存储索引</span></span><br><span class="line">mkdir /root/MyApp/opengrok-1.3.6/<span class="built_in">source</span>  <span class="comment"># 存储源码软链接</span></span><br><span class="line"><span class="comment"># 3 创建源码软链接</span></span><br><span class="line"><span class="built_in">cd</span> /root/MyApp/opengrok-1.3.6/<span class="built_in">source</span></span><br><span class="line">ln -s /root/FuckSource/android10-release/ android10-release</span><br><span class="line"><span class="comment"># 4 将OpenGrok下lib下的source.war拷贝到Tomcat下webapps下</span></span><br><span class="line">cp /root/MyApp/opengrok-1.3.6/lib/source.war /usr/<span class="built_in">local</span>/apps/apache-tomcat-8.5.45/webapps/  <span class="comment"># 拷贝后会自动解压出一个 source文件夹</span></span><br><span class="line"><span class="comment"># 5 修改配置文件</span></span><br><span class="line">vim /usr/<span class="built_in">local</span>/apps/apache-tomcat-8.5.45/webapps/<span class="built_in">source</span>/WEB-INF/web.xml</span><br><span class="line">    <span class="comment"># 找到这个</span></span><br><span class="line">    <context-param></span><br><span class="line">        <description>Full path to the configuration file <span class="built_in">where</span> OpenGrok can <span class="built_in">read</span> its configuration</description></span><br><span class="line">        <param-name>CONFIGURATION</param-name></span><br><span class="line">        <span class="comment"># 把这个目录修改一下 这是存放配置的 很重要</span></span><br><span class="line">        <param-value>/root/MyApp/opengrok-1.3.6/index/configuration.xml</param-value></span><br><span class="line">    </context-param></span><br><span class="line"><span class="comment"># 6 执行建立索引命令</span></span><br><span class="line">opengrok-indexer \</span><br><span class="line">    -J=-Djava.util.logging.config.file=/root/MyApp/opengrok-1.3.8/doc/logging.properties \</span><br><span class="line">    -a <span class="string">"/root/MyApp/opengrok-1.3.8/lib/opengrok.jar"</span> -- \</span><br><span class="line">    -c <span class="string">"/usr/local/bin/ctags"</span> \</span><br><span class="line">    -s <span class="string">"/root/MyApp/opengrok-1.3.8/source/"</span> \</span><br><span class="line">    -d <span class="string">"/root/MyApp/opengrok-1.3.8/index/"</span> -H -P -S -G -v \</span><br><span class="line">    -W <span class="string">"/root/MyApp/opengrok-1.3.8/index/configuration.xml"</span> \</span><br><span class="line">    -U http://localhost:80/<span class="built_in">source</span></span><br><span class="line"> <span class="comment">## 第一次执行这个命令 时间很长</span></span><br><span class="line"> <span class="comment">## -a 接 opengrok.jar位置</span></span><br><span class="line"> <span class="comment">## -c 接 ctags位置 [可忽略]</span></span><br><span class="line"> <span class="comment">## -s 接 存源码软链接位置</span></span><br><span class="line"> <span class="comment">## -s 接 存索引位置</span></span><br><span class="line"> <span class="comment">## -W 接 存配置文件位置</span></span><br><span class="line"> <span class="comment">## -H -P -S -G -v 就照抄吧</span></span><br><span class="line"> <span class="comment">## 还有更多配置选项</span></span><br><span class="line"> <span class="comment">## 使用 opengrok-indexer -a /root/MyApp/opengrok-1.3.8/lib/opengrok.jar -- -h 查看</span></span><br><span class="line"><span class="comment"># 7 如果以后源码有更新, 可以再次使用该命令进行增量建立索引</span></span><br></pre></td></tr></tbody></table></figure><p>等命令执行完毕后, 就可以访问了, 我这边是没问题的 <a href="http://101.132.124.174/source" target="_blank" rel="noopener">http://101.132.124.174/source</a></p><h1 id="2-下源码"><a href="#2-下源码" class="headerlink" title="2 下源码"></a>2 下源码</h1><p>下Android源码, Android官网上就有, 不过要翻墙, 所以一般用清华源: <a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/</a> 如果要下载完整的源码, 这里写的非常清楚, 但是条件就是Linux, 如果这符合你的需求, 你就可以按照这个方法做了, 下面是我另有所图</p><p>情况1, 我用的是Windows, repo不好用; 情况2, 磁盘容量小, 只想下载自己需要的源码</p><p>首先github上是有aosp镜像仓库的: <a href="https://github.com/aosp-mirror" target="_blank" rel="noopener">https://github.com/aosp-mirror</a></p><p>知道有这么个镜像不是为了下源码, 当然, 也可以, 不过我觉得清华源应该会快一点, 其实我只是为了看有哪些分支, 打开manifest仓库: <a href="https://github.com/aosp-mirror/platform_manifest" target="_blank" rel="noopener">https://github.com/aosp-mirror/platform_manifest</a></p><p><img alt="manifest" data-src="https://raw.githubusercontent.com/SidneyGod/ImagePlace/master/20200101150409.png"></p><p>比如我就选<code>android10-release</code>这个分支了, 那就在本地创建一个文件夹android10-release, 打开git终端</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clone我们想要的分支的manifest文件 不想要全部的 其实也无所谓 只要default.xml就够了 其他可以删了</span></span><br><span class="line">git <span class="built_in">clone</span> -b android10-release --single-branch https://aosp.tuna.tsinghua.edu.cn/platform/manifest.git</span><br></pre></td></tr></tbody></table></figure><p>这一步完成之后, 就会看到一个manifest文件夹, 打开这个文件夹里面的<code>default.xml</code>文件, 大概是这个样子的</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8"?></span></span><br><span class="line"><span class="tag"><<span class="name">manifest</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">remote</span>  <span class="attr">name</span>=<span class="string">"aosp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">fetch</span>=<span class="string">".."</span></span></span><br><span class="line"><span class="tag">           <span class="attr">review</span>=<span class="string">"https://android-review.googlesource.com/"</span> /></span></span><br><span class="line">  <span class="comment"><!-- 这个default应该就是默认配置 revision就是默认分支, 表示下面的所有的project的分支如果没有指定, 就是这个分支 --></span></span><br><span class="line">  <span class="tag"><<span class="name">default</span> <span class="attr">revision</span>=<span class="string">"android10-release"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">remote</span>=<span class="string">"aosp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">sync-j</span>=<span class="string">"4"</span> /></span></span><br><span class="line">  <span class="comment"><!-- 每个project就是一个git, 就是一个目录, 但是显然, 如果仅仅是阅读源码, 并不需要android所有的project, 因为看不过来 --></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"build/make"</span> <span class="attr">name</span>=<span class="string">"platform/build"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> ></span></span><br><span class="line">    <span class="tag"><<span class="name">copyfile</span> <span class="attr">src</span>=<span class="string">"core/root.mk"</span> <span class="attr">dest</span>=<span class="string">"Makefile"</span> /></span></span><br><span class="line">    <span class="tag"><<span class="name">linkfile</span> <span class="attr">src</span>=<span class="string">"CleanSpec.mk"</span> <span class="attr">dest</span>=<span class="string">"build/CleanSpec.mk"</span> /></span></span><br><span class="line">    ...略</span><br><span class="line">  <span class="tag"></<span class="name">project</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"build/blueprint"</span> <span class="attr">name</span>=<span class="string">"platform/build/blueprint"</span> <span class="attr">groups</span>=<span class="string">"pdk,tradefed"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"build/kati"</span> <span class="attr">name</span>=<span class="string">"platform/build/kati"</span> <span class="attr">groups</span>=<span class="string">"pdk,tradefed"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"build/soong"</span> <span class="attr">name</span>=<span class="string">"platform/build/soong"</span> <span class="attr">groups</span>=<span class="string">"pdk,tradefed"</span> ></span></span><br><span class="line">  略.略.略..</span><br></pre></td></tr></tbody></table></figure><p>这些只是Android的源码, 并不包含kernel的源码, 不信你找找kernel的project</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- 编译相关 配置相关 测试相关 源码呢? --></span></span><br><span class="line"><span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"kernel/build"</span> <span class="attr">name</span>=<span class="string">"kernel/build"</span> /></span></span><br><span class="line"><span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"kernel/configs"</span> <span class="attr">name</span>=<span class="string">"kernel/configs"</span> <span class="attr">groups</span>=<span class="string">"vts,pdk"</span> /></span></span><br><span class="line"><span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"kernel/tests"</span> <span class="attr">name</span>=<span class="string">"kernel/tests"</span> <span class="attr">groups</span>=<span class="string">"vts,pdk"</span> /></span></span><br></pre></td></tr></tbody></table></figure><p>其实kernel的源码单独放了, 由于Linux的原因, 各大厂商的内核源码应该是开源的, 于是你想看的</p><p>小米内核: <a href="https://github.com/MiCode/Xiaomi_Kernel_OpenSource" target="_blank" rel="noopener">https://github.com/MiCode/Xiaomi_Kernel_OpenSource</a></p><p>华为: <a href="https://consumer.huawei.com/en/opensource/detail/" target="_blank" rel="noopener">https://consumer.huawei.com/en/opensource/detail/</a></p><p>一加: <a href="https://github.com/OnePlusOSS" target="_blank" rel="noopener">https://github.com/OnePlusOSS</a></p><p>当然了, 是不是真的完全开了, 不得而知..不过Google的common内核应该全开了, 其它的应该都是从这个演化的吧, 只是我的猜测</p><p>再通过github看分支: <a href="https://github.com/aosp-mirror/kernel_common" target="_blank" rel="noopener">https://github.com/aosp-mirror/kernel_common</a></p><p><img alt="kernel_common" data-src="https://raw.githubusercontent.com/SidneyGod/ImagePlace/master/20200101152242.png"></p><p>我选的是<code>android-4.19-q-release</code>分支, 我参考了一下kernel的manifest, 然后融合一下, 得出了下main这个变体</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"kernel/common"</span> <span class="attr">name</span>=<span class="string">"kernel/common"</span> <span class="attr">revision</span>=<span class="string">"q-common-android-4.19"</span> /></span></span><br></pre></td></tr></tbody></table></figure><p>把这一句加到<code>default.xml</code>文件中, 我的大概长这样</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">服了..这hexo有bug吧..再不行 放弃..</span><br><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8"?></span></span><br><span class="line"><span class="tag"><<span class="name">manifest</span>></span></span><br><span class="line"></span><br><span class="line">  <span class="tag"><<span class="name">remote</span>  <span class="attr">name</span>=<span class="string">"aosp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">fetch</span>=<span class="string">".."</span></span></span><br><span class="line"><span class="tag">           <span class="attr">review</span>=<span class="string">"https://android-review.googlesource.com/"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">default</span> <span class="attr">revision</span>=<span class="string">"android10-release"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">remote</span>=<span class="string">"aosp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">sync-j</span>=<span class="string">"4"</span> /></span></span><br><span class="line"></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"art"</span> <span class="attr">name</span>=<span class="string">"platform/art"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"bionic"</span> <span class="attr">name</span>=<span class="string">"platform/bionic"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"bootable/recovery"</span> <span class="attr">name</span>=<span class="string">"platform/bootable/recovery"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/common"</span> <span class="attr">name</span>=<span class="string">"device/common"</span> <span class="attr">groups</span>=<span class="string">"pdk-cw-fs,pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/generic/arm64"</span> <span class="attr">name</span>=<span class="string">"device/generic/arm64"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/generic/armv7-a-neon"</span> <span class="attr">name</span>=<span class="string">"device/generic/armv7-a-neon"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="comment"><!--</span></span><br><span class="line"><span class="comment">  <project path="device/generic/car" name="device/generic/car" groups="pdk" /></span></span><br><span class="line"><span class="comment">  --></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/generic/common"</span> <span class="attr">name</span>=<span class="string">"device/generic/common"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/generic/goldfish"</span> <span class="attr">name</span>=<span class="string">"device/generic/goldfish"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/generic/goldfish-opengl"</span> <span class="attr">name</span>=<span class="string">"device/generic/goldfish-opengl"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/generic/opengl-transport"</span> <span class="attr">name</span>=<span class="string">"device/generic/opengl-transport"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/generic/qemu"</span> <span class="attr">name</span>=<span class="string">"device/generic/qemu"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/generic/trusty"</span> <span class="attr">name</span>=<span class="string">"device/generic/trusty"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/generic/uml"</span> <span class="attr">name</span>=<span class="string">"device/generic/uml"</span> <span class="attr">groups</span>=<span class="string">"device,pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/generic/x86"</span> <span class="attr">name</span>=<span class="string">"device/generic/x86"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/generic/x86_64"</span> <span class="attr">name</span>=<span class="string">"device/generic/x86_64"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/google/contexthub"</span> <span class="attr">name</span>=<span class="string">"device/google/contexthub"</span> <span class="attr">groups</span>=<span class="string">"device,marlin,pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/google/cuttlefish"</span> <span class="attr">name</span>=<span class="string">"device/google/cuttlefish"</span> <span class="attr">groups</span>=<span class="string">"device,pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/google/cuttlefish_common"</span> <span class="attr">name</span>=<span class="string">"device/google/cuttlefish_common"</span> <span class="attr">groups</span>=<span class="string">"device,pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/google/cuttlefish_kernel"</span> <span class="attr">name</span>=<span class="string">"device/google/cuttlefish_kernel"</span> <span class="attr">groups</span>=<span class="string">"device,pdk"</span> <span class="attr">clone-depth</span>=<span class="string">"1"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/google/cuttlefish_vmm"</span> <span class="attr">name</span>=<span class="string">"device/google/cuttlefish_vmm"</span> <span class="attr">groups</span>=<span class="string">"device,pdk"</span> <span class="attr">clone-depth</span>=<span class="string">"1"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"device/google/vrservices"</span> <span class="attr">name</span>=<span class="string">"device/google/vrservices"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> <span class="attr">clone-depth</span>=<span class="string">"1"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"frameworks/av"</span> <span class="attr">name</span>=<span class="string">"platform/frameworks/av"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"frameworks/opt/calendar"</span> <span class="attr">name</span>=<span class="string">"platform/frameworks/opt/calendar"</span> <span class="attr">groups</span>=<span class="string">"pdk-cw-fs,pdk-fs"</span> /></span></span><br><span class="line"> </span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"frameworks/opt/chips"</span> <span class="attr">name</span>=<span class="string">"platform/frameworks/opt/chips"</span> <span class="attr">groups</span>=<span class="string">"pdk-cw-fs,pdk-fs"</span> /></span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"frameworks/rs"</span> <span class="attr">name</span>=<span class="string">"platform/frameworks/rs"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"frameworks/wilhelm"</span> <span class="attr">name</span>=<span class="string">"platform/frameworks/wilhelm"</span> <span class="attr">groups</span>=<span class="string">"pdk-cw-fs,pdk-fs"</span> /></span></span><br><span class="line">  </span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"hardware/google/apf"</span> <span class="attr">name</span>=<span class="string">"platform/hardware/google/apf"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"hardware/qcom/media"</span> <span class="attr">name</span>=<span class="string">"platform/hardware/qcom/media"</span> <span class="attr">groups</span>=<span class="string">"qcom,pdk-qcom"</span> /></span></span><br><span class="line">  </span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"hardware/qcom/neuralnetworks/hvxservice"</span> <span class="attr">name</span>=<span class="string">"platform/hardware/qcom/neuralnetworks/hvxservice"</span> <span class="attr">groups</span>=<span class="string">"wahoo"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"hardware/qcom/power"</span> <span class="attr">name</span>=<span class="string">"platform/hardware/qcom/power"</span> <span class="attr">groups</span>=<span class="string">"qcom,pdk-qcom"</span> /></span></span><br><span class="line">  </span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"hardware/qcom/wlan"</span> <span class="attr">name</span>=<span class="string">"platform/hardware/qcom/wlan"</span> <span class="attr">groups</span>=<span class="string">"qcom_wlan,pdk-qcom"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"hardware/ril"</span> <span class="attr">name</span>=<span class="string">"platform/hardware/ril"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"hardware/ti/am57x"</span> <span class="attr">name</span>=<span class="string">"platform/hardware/ti/am57x"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line"></span><br><span class="line">  添加kernel的代码</span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"kernel/common"</span> <span class="attr">name</span>=<span class="string">"kernel/common"</span> <span class="attr">revision</span>=<span class="string">"android-4.19-q-release"</span>/></span></span><br><span class="line"></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"libcore"</span> <span class="attr">name</span>=<span class="string">"platform/libcore"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"libnativehelper"</span> <span class="attr">name</span>=<span class="string">"platform/libnativehelper"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line"></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"packages/apps/OneTimeInitializer"</span> <span class="attr">name</span>=<span class="string">"platform/packages/apps/OneTimeInitializer"</span> <span class="attr">groups</span>=<span class="string">"pdk-fs"</span> /></span></span><br><span class="line">  为配合下面python脚本这里path最好修改为 packages/apps/PackageInstaller</span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"packages/apps/PermissionController"</span> <span class="attr">name</span>=<span class="string">"platform/packages/apps/PackageInstaller"</span> <span class="attr">groups</span>=<span class="string">"pdk-cw-fs,pdk-fs"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"packages/apps/PhoneCommon"</span> <span class="attr">name</span>=<span class="string">"platform/packages/apps/PhoneCommon"</span> <span class="attr">groups</span>=<span class="string">"pdk-cw-fs,pdk-fs"</span> /></span></span><br><span class="line">  <span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"system/vold"</span> <span class="attr">name</span>=<span class="string">"platform/system/vold"</span> <span class="attr">groups</span>=<span class="string">"pdk"</span> /></span></span><br><span class="line"></span><br><span class="line">  <span class="tag"><<span class="name">repo-hooks</span> <span class="attr">in-project</span>=<span class="string">"platform/tools/repohooks"</span> <span class="attr">enabled-list</span>=<span class="string">"pre-upload"</span> /></span></span><br><span class="line"></span><br><span class="line"><span class="tag"></<span class="name">manifest</span>></span></span><br></pre></td></tr></tbody></table></figure><p>不需要的全部注释掉, 当需要的时候再打开</p><p>然后再配合下面这个python脚本即可完成clone代码和更新代码 <strong>注意: 这是Win下的</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 1 设置源码保存路径</span></span><br><span class="line">rootdir = <span class="string">"E:/FuckSource/android10-release"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2 设置git安装的路径 注意Win上这样最好 否则空格很麻烦的</span></span><br><span class="line">git = <span class="string">'"D:/Program Files/Git/bin/git.exe"'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 设置manifest中default.xml路径</span></span><br><span class="line">manifest = <span class="string">"E:/FuckSource/android10-release/manifest/default.xml"</span></span><br><span class="line">dom = xml.dom.minidom.parse(manifest)</span><br><span class="line">root = dom.documentElement</span><br><span class="line">default_revision = root.getElementsByTagName(<span class="string">"default"</span>)[<span class="number">0</span>].getAttribute(<span class="string">"revision"</span>)</span><br><span class="line">default_revision = default_revision[default_revision.rfind(<span class="string">"/"</span>) + <span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 设置下载源</span></span><br><span class="line">prefix = git + <span class="string">" clone"</span></span><br><span class="line">source = <span class="string">" https://aosp.tuna.tsinghua.edu.cn/"</span></span><br><span class="line"><span class="comment">#source = " https://android.googlesource.com/"</span></span><br><span class="line">suffix = <span class="string">".git"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_dir</span><span class="params">(d)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(d):</span><br><span class="line">        os.makedirs(d)</span><br><span class="line">    os.chdir(d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> root.getElementsByTagName(<span class="string">"project"</span>):</span><br><span class="line">    change_dir(rootdir)</span><br><span class="line">    <span class="comment"># 设置当前project的infix  为了节省空间 只保留最后一次commit --depth=1</span></span><br><span class="line">    current_revision = node.getAttribute(<span class="string">"revision"</span>)</span><br><span class="line">    revision = current_revision <span class="keyword">if</span> current_revision <span class="keyword">else</span> default_revision</span><br><span class="line">    infix = <span class="string">" -b "</span> + revision + <span class="string">" --single-branch --depth=1"</span></span><br><span class="line">    </span><br><span class="line">    path = node.getAttribute(<span class="string">"path"</span>)</span><br><span class="line">    last = path.rfind(<span class="string">"/"</span>)</span><br><span class="line">    <span class="comment"># .git所在目录的上层目录</span></span><br><span class="line">    git_p = rootdir + <span class="string">"/"</span> + path[:last]</span><br><span class="line">    <span class="comment"># .git所在目录</span></span><br><span class="line">    git_d = rootdir + <span class="string">"/"</span> + path</span><br><span class="line">    <span class="keyword">if</span> last != <span class="number">-1</span>:</span><br><span class="line">        change_dir(git_p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(git_d): <span class="comment"># 没有执行过git clone</span></span><br><span class="line">        cmd = prefix + infix + source + node.getAttribute(<span class="string">"name"</span>) + suffix</span><br><span class="line">        print(cmd)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.chdir(git_d)</span><br><span class="line">        cmd = git + <span class="string">" pull --depth=1"</span></span><br><span class="line">        print(cmd, path)</span><br><span class="line">    os.system(cmd)</span><br></pre></td></tr></tbody></table></figure><p>用这个脚本的时候最好修改一个project的path, 因为是根据目录有无来判断是否执行过clone操作的</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- 为配合下面python脚本这里path最好修改为 packages/apps/PackageInstaller --></span></span><br><span class="line"><span class="tag"><<span class="name">project</span> <span class="attr">path</span>=<span class="string">"packages/apps/PermissionController"</span> <span class="attr">name</span>=<span class="string">"platform/packages/apps/PackageInstaller"</span> <span class="attr">groups</span>=<span class="string">"pdk-cw-fs,pdk-fs"</span> /></span></span><br></pre></td></tr></tbody></table></figure><p>当执行完脚本都是git pull时, 表示想要的源码都下载好了, 否则就一直执行脚本, 直至下载完所有源码为止</p><h1 id="3-报错"><a href="#3-报错" class="headerlink" title="3 报错"></a>3 报错</h1><p>完成整个操作可能出现的错误</p><h2 id="3-1-CONFIGURATION-parameter-has-not-been-configured-in-web-xml"><a href="#3-1-CONFIGURATION-parameter-has-not-been-configured-in-web-xml" class="headerlink" title="3.1 CONFIGURATION parameter has not been configured in web.xml"></a>3.1 CONFIGURATION parameter has not been configured in web.xml</h2><p>打开网页报以下错</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">There was an error!</span><br><span class="line">CONFIGURATION parameter has not been configured in web.xml! Please configure your webapp.</span><br><span class="line">Unable to determine source root path. Missing configuration?</span><br><span class="line">java.io.FileNotFoundException: Unable to determine source root path. Missing configuration?</span><br><span class="line">at org.opensolaris.opengrok.web.PageConfig.checkSourceRootExistence(PageConfig.java:1562)</span><br><span class="line">at org.apache.jsp.index_jsp._jspService(index_jsp.java:222)</span><br><span class="line">at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)</span><br><span class="line">at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:443)</span><br><span class="line">at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)</span><br><span class="line">at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)</span><br></pre></td></tr></tbody></table></figure><p>检查一下Tomcat的web.xml文件指定的OpenGrok的配置文件<code>D:/Develop/apache-tomcat/opengrok-1.3.6/index/configuration.xml</code>是否存在, 是否是执行建立索引后生成的</p><h2 id="3-2-Failed-to-get-xref-file"><a href="#3-2-Failed-to-get-xref-file" class="headerlink" title="3.2 Failed to get xref file"></a>3.2 Failed to get xref file</h2><p>我把源码给删了，然后再同步一下源码，建立一次索引，再打开opengrok，页面没代码，就出现这个，这里有个链接或许能解决，<a href="https://github.com/oracle/opengrok/issues/2774" target="_blank" rel="noopener">https://github.com/oracle/opengrok/issues/2774</a></p><p>我没尝试过，我直接重装了Tomcat和OpenGrok..</p><h2 id="3-3-Caused-by-java-net-ConnectException-Connection-refused-Connection-refused"><a href="#3-3-Caused-by-java-net-ConnectException-Connection-refused-Connection-refused" class="headerlink" title="3.3 Caused by: java.net.ConnectException: Connection refused (Connection refused)"></a>3.3 Caused by: java.net.ConnectException: Connection refused (Connection refused)</h2><p>再建立索引的时候报这个错，可能Tomcat挂了，或者OpenGrok挂了？不清楚，重启Tomcat就好了</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;0-缘起&quot;&gt;&lt;a href=&quot;#0-缘起&quot; class=&quot;headerlink&quot; title=&quot;0 缘起&quot;&gt;&lt;/a&gt;0 缘起&lt;/h1&gt;&lt;p&gt;之前看代码都是非常少的, 所以基本就用IDE啦, 还能调试, 后来接触Android, 源码量太大了, 导入IDE去看太慢了..然后开始搜神器, 就有了Source Insight, Understand..说不出来哪不好, 反正就是不爽, 最后觉得还是OpenGrok好用..那就动手搭建一个吧, 官方文档: &lt;a href=&quot;https://github.com/oracle/opengrok/wiki/How-to-setup-OpenGrok&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/oracle/opengrok/wiki/How-to-setup-OpenGrok&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-搭环境&quot;&gt;&lt;a href=&quot;#1-搭环境&quot; class=&quot;headerlink&quot; title=&quot;1 搭环境&quot;&gt;&lt;/a&gt;1 搭环境&lt;/h1&gt;&lt;p&gt;首先, 我在Win10和CentOS7.6上都试验成功了, 但是个人建议看有关Linux的代码还是用Linux比较好, 在后面下源码的时候会说为啥, 但是鉴于Windows用得比较多(我就是..), 所以整理了两份文档, 废话不多说, 开始..&lt;/p&gt;
    
    </summary>
    
    
      <category term="Other" scheme="https://sidneygod.github.io/categories/Other/"/>
    
    
      <category term="OpenGrok" scheme="https://sidneygod.github.io/tags/OpenGrok/"/>
    
      <category term="code" scheme="https://sidneygod.github.io/tags/code/"/>
    
      <category term="Android" scheme="https://sidneygod.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Configure CentOS</title>
    <link href="https://sidneygod.github.io/posts/94e02420/"/>
    <id>https://sidneygod.github.io/posts/94e02420/</id>
    <published>2019-11-30T03:45:46.000Z</published>
    <updated>2019-11-30T04:03:58.148Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS常用软件的安装与配置</p><h1 id="1-卸载软件"><a href="#1-卸载软件" class="headerlink" title="1 卸载软件"></a>1 卸载软件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先列出要卸载的项</span></span><br><span class="line">yum list installed | grep gcc</span><br><span class="line"><span class="comment"># 再逐个卸载</span></span><br><span class="line">yum -y remove libgcc.x86_64</span><br></pre></td></tr></table></figure><h1 id="2-GCC"><a href="#2-GCC" class="headerlink" title="2 GCC"></a>2 GCC</h1><p>升级或安装gcc流程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.ustc.edu.cn/gnu/gcc/gcc-7.3.0/gcc-7.3.0.tar.gz</span><br><span class="line">tar -xf gcc-7.3.0.tar.gz </span><br><span class="line"><span class="built_in">cd</span> gcc-7.3.0</span><br><span class="line">./contrib/download_prerequisites</span><br><span class="line">mkdir gcc-build-7.3.0 </span><br><span class="line"><span class="built_in">cd</span> gcc-build-7.3.0</span><br><span class="line">../configure --<span class="built_in">enable</span>-checking=release --<span class="built_in">enable</span>-languages=c,c++ --<span class="built_in">disable</span>-multilib</span><br><span class="line"><span class="comment"># 时间可能很长 耐心等待就好</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="3-Java"><a href="#3-Java" class="headerlink" title="3 Java"></a>3 Java</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先去下载jdk的压缩包 再解压</span></span><br><span class="line">tar -zxvf jdk.tar.gz</span><br><span class="line">vim /etc/profile</span><br><span class="line">    <span class="comment">#java</span></span><br><span class="line">    <span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_181</span><br><span class="line">    <span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line">    <span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h1 id="4-Tomcat"><a href="#4-Tomcat" class="headerlink" title="4 Tomcat"></a>4 Tomcat</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前提是安装好Java</span></span><br><span class="line">tar -zxvf tomcat.tar.gz</span><br><span class="line">chmod 777 startup.sh</span><br><span class="line"><span class="comment"># only save ROOT 将webapps下所有东西都删了 就留个ROOT就好了</span></span><br></pre></td></tr></table></figure><h1 id="5-MySQL"><a href="#5-MySQL" class="headerlink" title="5 MySQL"></a>5 MySQL</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># download mysql8 source</span></span><br><span class="line">sudo rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</span><br><span class="line"><span class="comment"># install mysql8</span></span><br><span class="line">sudo yum --enablerepo=mysql80-community install mysql-community-server</span><br><span class="line"><span class="comment"># start mysql service</span></span><br><span class="line">sudo service mysqld start</span><br><span class="line"><span class="comment"># check mysql service status</span></span><br><span class="line">service mysqld status</span><br><span class="line"><span class="comment"># get temp pwd of root</span></span><br><span class="line">grep <span class="string">"A temporary password"</span> /var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line"><span class="comment"># enter mysql cmd</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># a policy of pwd validation</span></span><br><span class="line">SHOW VARIABLES LIKE <span class="string">'validate_password.%'</span>;</span><br><span class="line"><span class="built_in">set</span> global validate_password.policy=0;</span><br><span class="line"><span class="comment"># change pwd</span></span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'YourPwd123'</span>;</span><br><span class="line">use mysql;</span><br><span class="line">SELECT host, user, authentication_string, plugin FROM user;</span><br><span class="line">CREATE USER <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'YouPwd123'</span>;</span><br><span class="line">GRANT ALL ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure><h1 id="6-Python"><a href="#6-Python" class="headerlink" title="6 Python"></a>6 Python</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装一些依赖</span></span><br><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span><br><span class="line">yum install libffi-devel -y</span><br><span class="line"><span class="comment"># 下载python源码</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</span><br><span class="line">tar -xf Python-3.7.4.tgz</span><br><span class="line">./configure</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 看下是否安装成功</span></span><br><span class="line">python3 -V</span><br><span class="line">rm -f /usr/bin/python</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/python3 /usr/bin/python</span><br><span class="line">rm -f /usr/bin/pip</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/pip3 /usr/bin/pip</span><br><span class="line"><span class="comment"># 修改一下 以免这些东西不能用了 将python改为python2</span></span><br><span class="line">vim /usr/libexec/urlgrabber-ext-down</span><br><span class="line">vim /usr/bin/yum</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用virtualenv</span></span><br><span class="line">pip install virtualenv</span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">virtualenv --no-site-packages --python=python3 env_1</span><br><span class="line"><span class="built_in">source</span> env_1/bin/activate</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure><h1 id="7-Node-js"><a href="#7-Node-js" class="headerlink" title="7 Node.js"></a>7 Node.js</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">install node.js:</span><br><span class="line">wget https://nodejs.org/dist/v12.11.1/node-v12.11.1-linux-x64.tar.xz</span><br><span class="line">xz -d node-v12.11.1-linux-x64.tar.xz</span><br><span class="line">tar -xvf node-v12.11.1-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">ln -s ~/node-v12.11.1-linux-x64/bin/node /usr/bin/node</span><br><span class="line">ln -s ~/node-v12.11.1-linux-x64/bin/npm /usr/bin/npm</span><br><span class="line">ln -s ~/node-v12.11.1-linux-x64/bin/npm /usr/bin/npx</span><br></pre></td></tr></table></figure><h1 id="8-Vim"><a href="#8-Vim" class="headerlink" title="8 Vim"></a>8 Vim</h1><p>配置Vim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.vimrc</span><br><span class="line"><span class="string">" 256色模式</span></span><br><span class="line"><span class="string">set t_Co=256</span></span><br><span class="line"><span class="string">set term=xterm-256color</span></span><br><span class="line"><span class="string">"</span> 主题</span><br><span class="line">colorscheme desert</span><br><span class="line"><span class="string">" 注释设置成淡灰色</span></span><br><span class="line"><span class="string">highlight Comment ctermfg=202</span></span><br><span class="line"><span class="string">highlight PreProc ctermfg=82</span></span><br><span class="line"><span class="string">set hlsearch "</span> 高亮搜索的词</span><br><span class="line"><span class="built_in">set</span> incsearch <span class="string">" 输入搜索内容时就显示搜索结果</span></span><br><span class="line"><span class="string">"</span> 显示所有字符</span><br><span class="line"><span class="built_in">set</span> list</span><br><span class="line"><span class="built_in">set</span> listchars=eol:$,tab:~~,trail:.,nbsp:.,precedes:^,extends:^</span><br><span class="line">highlight NonText ctermfg=239</span><br><span class="line">highlight SpecialKey ctermfg=239</span><br><span class="line"><span class="string">" 显示行号</span></span><br><span class="line"><span class="string">set number</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 展开tab</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="string">" tab宽度</span></span><br><span class="line"><span class="string">set tabstop=4</span></span><br><span class="line"><span class="string">set softtabstop=4</span></span><br><span class="line"><span class="string">"</span> 自动缩进</span><br><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="built_in">set</span> smartindent</span><br><span class="line"></span><br><span class="line"><span class="string">" 设置编码</span></span><br><span class="line"><span class="string">set encoding=utf-8</span></span><br><span class="line"><span class="string">set termencoding=utf-8</span></span><br><span class="line"><span class="string">set formatoptions+=mM</span></span><br><span class="line"><span class="string">set fencs=utf-8,gbk</span></span><br><span class="line"><span class="string">set fileencodings=utf-8,gbk</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set nocompatible "</span> 关闭vi兼容模式</span><br><span class="line">syntax on <span class="string">" 自动语法高亮</span></span><br><span class="line"><span class="string">set cursorline "</span> 突出当前行</span><br><span class="line"><span class="built_in">set</span> ruler <span class="string">" 打开状态栏标尺</span></span><br><span class="line"><span class="string">set ignorecase smartcase "</span> 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感</span><br><span class="line"><span class="built_in">set</span> incsearch <span class="string">" 输入搜索内容时就显示搜索结果</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS常用软件的安装与配置&lt;/p&gt;
&lt;h1 id=&quot;1-卸载软件&quot;&gt;&lt;a href=&quot;#1-卸载软件&quot; class=&quot;headerlink&quot; title=&quot;1 卸载软件&quot;&gt;&lt;/a&gt;1 卸载软件&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 先列出要卸载的项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum list installed | grep gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 再逐个卸载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum -y remove libgcc.x86_64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;2-GCC&quot;&gt;&lt;a href=&quot;#2-GCC&quot; class=&quot;headerlink&quot; title=&quot;2 GCC&quot;&gt;&lt;/a&gt;2 GCC&lt;/h1&gt;&lt;p&gt;升级或安装gcc流程&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://mirrors.ustc.edu.cn/gnu/gcc/gcc-7.3.0/gcc-7.3.0.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -xf gcc-7.3.0.tar.gz &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; gcc-7.3.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./contrib/download_prerequisites&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir gcc-build-7.3.0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; gcc-build-7.3.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;../configure --&lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;-checking=release --&lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;-languages=c,c++ --&lt;span class=&quot;built_in&quot;&gt;disable&lt;/span&gt;-multilib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 时间可能很长 耐心等待就好&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Other" scheme="https://sidneygod.github.io/categories/Other/"/>
    
    
      <category term="CentOS" scheme="https://sidneygod.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Build image host via PicGo + Github</title>
    <link href="https://sidneygod.github.io/posts/47391a30/"/>
    <id>https://sidneygod.github.io/posts/47391a30/</id>
    <published>2019-11-29T15:12:09.000Z</published>
    <updated>2020-08-23T10:10:41.753Z</updated>
    
    <content type="html"><![CDATA[<p>嗯，比较懒，贴两个链接留作纪念：</p><p>PicGo + GitHub 搭建个人图床工具：<a href="https://blog.csdn.net/yefcion/article/details/88412025" target="_blank" rel="noopener">https://blog.csdn.net/yefcion/article/details/88412025</a></p><p>PicGo + Gitee + Typora: <a href="https://www.cnblogs.com/qtzd/p/12554902.html" target="_blank" rel="noopener">https://www.cnblogs.com/qtzd/p/12554902.html</a></p><p>PicGo： <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></p><p>滥用VPN会导致DNS污染，从而利用github上传的图床都显示不出来了，需要解决一下，</p><p><a href="https://www.ioiox.com/archives/62.html" target="_blank" rel="noopener">https://www.ioiox.com/archives/62.html</a></p><p>通过 <a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a> 查询 raw.githubusercontent.com 的真实ip地址</p><p>再将以下内容保存到hosts文件(Win：<code>C:\Windows\System32\drivers\etc\hosts</code>)中</p><p><code>ip地址 raw.githubusercontent.com</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;嗯，比较懒，贴两个链接留作纪念：&lt;/p&gt;
&lt;p&gt;PicGo + GitHub 搭建个人图床工具：&lt;a href=&quot;https://blog.csdn.net/yefcion/article/details/88412025&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
      <category term="Other" scheme="https://sidneygod.github.io/categories/Other/"/>
    
    
      <category term="图床" scheme="https://sidneygod.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>Hexo&#39;s grammar</title>
    <link href="https://sidneygod.github.io/posts/2b335451/"/>
    <id>https://sidneygod.github.io/posts/2b335451/</id>
    <published>2019-10-13T01:27:08.000Z</published>
    <updated>2019-11-29T15:43:38.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Hexo的语法"><a href="#1-Hexo的语法" class="headerlink" title="1 Hexo的语法"></a>1 Hexo的语法</h1><p>参考官网给的：</p><p><a href="https://hexo.io/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/docs/front-matter</a></p><p><a href="https://hexo.io/docs/tag-plugins" target="_blank" rel="noopener">https://hexo.io/docs/tag-plugins</a></p><p>做好笔记，以便之后寻找方便…</p><h2 id="1-1-文章的meta"><a href="#1-1-文章的meta" class="headerlink" title="1.1 文章的meta"></a>1.1 文章的meta</h2><p>就是这么个东西</p><a id="more"></a><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">article</span> <span class="string">name</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-10</span><span class="bullet">-13</span> <span class="number">09</span><span class="string">:27:08</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Other</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>可以通过yaml语法定义，也可以通过json语法定义，基本没啥好说的，除了tags和categories需要手动添加也就没了，当然了也可以添加自己的meta信息，在article中使用</p><h2 id="1-2-引用"><a href="#1-2-引用" class="headerlink" title="1.2 引用"></a>1.2 引用</h2><p> <a href="https://hexo.io/docs/tag-plugins#Block-Quote" target="_blank" rel="noopener">https://hexo.io/docs/tag-plugins#Block-Quote</a> </p><p>简单一点的引用，直接使用markdown的语法就好了，当然还可以有更强一点的引用，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><p>比如说引用某人书中的一句话, 多个作者的话就比较麻烦，要不用<code>/</code>隔开？</p><blockquote><p>content</p><footer><strong>Sidney / Ding</strong><cite>A book</cite></footer></blockquote><p>还有一种居中引用，不过貌似不能添加作者什么的</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">cq</span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">content</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endcq</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><p>content</p></blockquote><h2 id="1-3-代码块"><a href="#1-3-代码块" class="headerlink" title="1.3 代码块"></a>1.3 代码块</h2><p> <a href="https://hexo.io/docs/tag-plugins#Code-Block" target="_blank" rel="noopener">https://hexo.io/docs/tag-plugins#Code-Block</a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p>感受一下</p><figure class="highlight diff"><figcaption><span>diff.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ code snippet</span></span><br><span class="line"><span class="deletion">- code</span></span><br></pre></td></tr></table></figure><p>将语言设为diff即可看到变色，有点头疼的是，用typro写这个费事，建议直接开启源码模式</p><h2 id="1-4-插入文章链接"><a href="#1-4-插入文章链接" class="headerlink" title="1.4 插入文章链接"></a>1.4 插入文章链接</h2><p> <a href="https://hexo.io/docs/tag-plugins#Include-Posts" target="_blank" rel="noopener">https://hexo.io/docs/tag-plugins#Include-Posts</a> </p><p>插入之前的article</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link filename [optional text] %&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-Read-More"><a href="#1-5-Read-More" class="headerlink" title="1.5 Read More"></a>1.5 Read More</h2><p>read more的位置默认是150字符处，但是有时候前面有个代码块就很长了，这是可以在想分割的地方插入一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-6-Include-Assets"><a href="#1-6-Include-Assets" class="headerlink" title="1.6 Include Assets"></a>1.6 Include Assets</h2><p>好像啥都可以哈</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">asset_path</span> slug %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">asset_img</span> slug [title] %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">asset_link</span> slug [title] %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h1 id="2-NexT的特性"><a href="#2-NexT的特性" class="headerlink" title="2 NexT的特性"></a>2 NexT的特性</h1><p>参考官网</p><p> <a href="https://theme-next.org/docs/third-party-services/math-equations" target="_blank" rel="noopener">https://theme-next.org/docs/third-party-services/math-equations</a> 数学公式基本和markdown差不多</p><p> <a href="https://theme-next.org/docs/tag-plugins/" target="_blank" rel="noopener">https://theme-next.org/docs/tag-plugins/</a> 比较好用的布局</p><p>以下默认插件都安装好了</p><h2 id="2-1-pdf"><a href="#2-1-pdf" class="headerlink" title="2.1 pdf"></a>2.1 pdf</h2><p>插入pdf</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">% pdf url [height] %&#125;</span></span><br><span class="line"></span><br><span class="line">[url]    : <span class="symbol">Relative</span> path to <span class="symbol">PDF</span> file.</span><br><span class="line">[height] : <span class="symbol">Optional</span>. <span class="symbol">Height</span> of the <span class="symbol">PDF</span> display element, e.g. <span class="number">800</span>px.</span><br></pre></td></tr></table></figure><h2 id="2-2-tab"><a href="#2-2-tab" class="headerlink" title="2.2 tab"></a>2.2 tab</h2><p> <a href="https://theme-next.org/docs/tag-plugins/tabs" target="_blank" rel="noopener">https://theme-next.org/docs/tag-plugins/tabs</a> </p><p>可能以后会用</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique <span class="built_in">name</span>, [index] %&#125;</span><br><span class="line">&lt;!<span class="comment">-- tab [Tab caption] [@icon] --&gt;</span></span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!<span class="comment">-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique <span class="built_in">name</span>   : Unique <span class="built_in">name</span> <span class="keyword">of</span> tabs block tag <span class="keyword">without</span> comma.</span><br><span class="line">                Will be used <span class="keyword">in</span> <span class="comment">#id's as prefix for each tab with their index numbers.</span></span><br><span class="line">                If there are whitespaces <span class="keyword">in</span> <span class="built_in">name</span>, <span class="keyword">for</span> generate <span class="comment">#id all whitespaces will replaced by dashes.</span></span><br><span class="line">                Only <span class="keyword">for</span> current url <span class="keyword">of</span> post/page must be unique!</span><br><span class="line">[index]       : Index <span class="built_in">number</span> <span class="keyword">of</span> active <span class="literal">tab</span>.</span><br><span class="line">                If <span class="keyword">not</span> specified, <span class="keyword">first</span> <span class="literal">tab</span> (<span class="number">1</span>) will be selected.</span><br><span class="line">                If index <span class="keyword">is</span> <span class="number">-1</span>, no <span class="literal">tab</span> will be selected. It's will be something like spoiler.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[Tab caption] : Caption <span class="keyword">of</span> current <span class="literal">tab</span>.</span><br><span class="line">                If <span class="keyword">not</span> caption specified, unique <span class="built_in">name</span> <span class="keyword">with</span> <span class="literal">tab</span> index suffix will be used <span class="keyword">as</span> caption <span class="keyword">of</span> <span class="literal">tab</span>.</span><br><span class="line">                If <span class="keyword">not</span> caption specified, <span class="keyword">but</span> specified icon, caption will empty.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[@icon]       : FontAwesome icon <span class="built_in">name</span> (<span class="keyword">without</span> 'fa-' <span class="keyword">at</span> <span class="keyword">the</span> begining).</span><br><span class="line">                Can be specified <span class="keyword">with</span> <span class="keyword">or</span> <span class="keyword">without</span> <span class="literal">space</span>; e.g. 'Tab caption @icon' similar <span class="keyword">to</span> 'Tab caption@icon'.</span><br><span class="line">                Optional parameter.</span><br></pre></td></tr></table></figure><h2 id="2-3-note"><a href="#2-3-note" class="headerlink" title="2.3 note"></a>2.3 note</h2><div class="note success">            <p><strong>Success Header</strong></p><p>Successfully!</p>          </div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>[class] [no-icon] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">[class]   :<span class="built_in"> default </span>| primary | success | <span class="builtin-name">info</span> | <span class="builtin-name">warning</span> | danger.</span><br><span class="line">[no-icon] : <span class="builtin-name">Disable</span> icon <span class="keyword">in</span> note.</span><br><span class="line"></span><br><span class="line">All parameters are optional.</span><br></pre></td></tr></table></figure><h2 id="2-4-label"><a href="#2-4-label" class="headerlink" title="2.4 label"></a>2.4 label</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label [<span class="keyword">class</span>]@<span class="type">Text</span> %&#125;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">class</span>] : <span class="keyword">default</span> | <span class="keyword">primary</span> | success | <span class="keyword">info</span> | <span class="built_in">warning</span> | danger.</span><br><span class="line">          <span class="string">'@Text'</span> can be specified <span class="keyword">with</span> <span class="keyword">or</span> <span class="keyword">without</span> space</span><br><span class="line">          E.g. <span class="string">'success @text'</span> <span class="keyword">similar</span> <span class="keyword">to</span> <span class="string">'success@text'</span>.</span><br><span class="line">          <span class="keyword">If</span> <span class="keyword">not</span> specified, <span class="keyword">default</span> <span class="keyword">class</span> will be selected.</span><br></pre></td></tr></table></figure><p>Ut enim *<span class="label warning">ad</span>* minim veniam, quis <strong><span class="label danger">nostrud</span></strong> exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p><h1 id="3-插入图片的bug"><a href="#3-插入图片的bug" class="headerlink" title="3 插入图片的bug"></a>3 插入图片的bug</h1><p>不知道这个bug是不是因为<a href="https://github.com/Rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a>插件造成的，反正插入图片死活不成功，也不分析怎么造成的了，修改文件：<code>blog/node_modules/hexo/lib/plugins/processor/post.js</code></p><figure class="highlight diff"><figcaption><span>post.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function scanAssetDir(post) &#123;</span><br><span class="line">    ...12 lines</span><br><span class="line">    if (err.cause &amp;&amp; err.cause.code <span class="comment">=== 'ENOENT') return [];</span></span><br><span class="line">      throw err;</span><br><span class="line">    &#125;).filter(item =&gt; !common.isTmpFile(item) &amp;&amp; !common.isHiddenFile(item)).map(item =&gt; &#123;</span><br><span class="line">      const id = join(assetDir, item).substring(baseDirLength).replace(/\\/g, '/');</span><br><span class="line"></span><br><span class="line"><span class="addition">+      // SidneyGod fix bug</span></span><br><span class="line"><span class="addition">+      item = id.replace("source/_posts", ".");</span></span><br><span class="line"><span class="addition">+      console.info&amp;&amp;console.info("SidneyGod---" + item);</span></span><br><span class="line">      const asset = PostAsset.findById(id);</span><br><span class="line">      if (asset) return undefined;</span><br><span class="line">      return PostAsset.save(&#123;</span><br></pre></td></tr></table></figure><p>加上那三句后，因为我是启用了asset folder的</p><figure class="highlight yaml"><figcaption><span>_config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>所以在引用图片的时候，写链接需要这样<code>./articleName/imageName</code>，注意这个<code>./</code>不能少，因为表示相对路径，并且要确保，你的图片真的在<code>articleName</code>目录下</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Hexo的语法&quot;&gt;&lt;a href=&quot;#1-Hexo的语法&quot; class=&quot;headerlink&quot; title=&quot;1 Hexo的语法&quot;&gt;&lt;/a&gt;1 Hexo的语法&lt;/h1&gt;&lt;p&gt;参考官网给的：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/docs/front-matter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/docs/front-matter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/docs/tag-plugins&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/docs/tag-plugins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;做好笔记，以便之后寻找方便…&lt;/p&gt;
&lt;h2 id=&quot;1-1-文章的meta&quot;&gt;&lt;a href=&quot;#1-1-文章的meta&quot; class=&quot;headerlink&quot; title=&quot;1.1 文章的meta&quot;&gt;&lt;/a&gt;1.1 文章的meta&lt;/h2&gt;&lt;p&gt;就是这么个东西&lt;/p&gt;
    
    </summary>
    
    
      <category term="Other" scheme="https://sidneygod.github.io/categories/Other/"/>
    
    
      <category term="hexo" scheme="https://sidneygod.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://sidneygod.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Use hexo + github to build a blog</title>
    <link href="https://sidneygod.github.io/posts/c969bad9/"/>
    <id>https://sidneygod.github.io/posts/c969bad9/</id>
    <published>2019-10-04T01:20:46.000Z</published>
    <updated>2020-05-10T05:12:36.422Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="1-Getting-Started"><a href="#1-Getting-Started" class="headerlink" title="1 Getting Started"></a>1 Getting Started</h1><p>首先跟着hexo官方文档走一遍：<a href="https://hexo.io/docs/" target="_blank" rel="noopener">https://hexo.io/docs/</a></p><ol><li><p>安装git：<a href="https://hexo.io/docs/#Install-Git" target="_blank" rel="noopener">https://hexo.io/docs/#Install-Git</a></p></li><li><p>安装Node.js：<a href="https://hexo.io/docs/#Install-Node-js" target="_blank" rel="noopener">https://hexo.io/docs/#Install-Node-js</a></p></li><li><p>安装hexo</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Win下 找个目录右键 Git Bash Here</span></span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure><a id="more"></a></li><li><p>初始化blog</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建blog目录</span></span><br><span class="line">mkdir blog</span><br><span class="line"><span class="comment"># 进入blog目录</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">hexo init</span><br></pre></td></tr></tbody></table></figure><p>初始化好后，目录下有这么些东西</p><p><code>_config.yml</code>：blog的配置文件，yaml语言</p><p><code>package.json</code>：存储的是一些blog安装信息，比如一些dependencies</p><p><code>scaffolds</code>：存储新建页面的模板</p><p><code>source</code>：blog的主要文件，hexo会渲染这里面的文件，隐藏文件，文件或文件夹名以<code>_</code>开头不会进行渲染，<code>_post</code>文件夹除外</p><p><code>themes</code>：主题文件夹，最需折腾的一个地方</p><p>其实到这里再运行一下<code>hexo g && hexo s</code>就可以在本地欣赏你的blog了，默认地址是：<a href="https://localhost:4000" target="_blank" rel="noopener">https://localhost:4000</a>，但是问题是，样式有点丑，折腾theme吧</p></li><li><p>修改theme</p><p>这里我采用的是既然大家都在用，那我也来用用的NexT主题，是的我们要换一个官方文档了：<a href="https://theme-next.org/docs/" target="_blank" rel="noopener">https://theme-next.org/docs/</a></p><p>安装theme：<a href="https://theme-next.org/docs/getting-started/installation" target="_blank" rel="noopener">https://theme-next.org/docs/getting-started/installation</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可能忘了说了 git安装好了 你要配置一下哈</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></tbody></table></figure><p>好了，准备工作做好了，开始配置吧</p></li></ol><h1 id="2-Configuration"><a href="#2-Configuration" class="headerlink" title="2 Configuration"></a>2 Configuration</h1><h2 id="2-1-hexo"><a href="#2-1-hexo" class="headerlink" title="2.1 hexo"></a>2.1 hexo</h2><p>打开hexo的配置文件我们来欣赏一下配置文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确定当前在blog目录下哈 很少需要切换目录的</span></span><br><span class="line">vim _config.yml</span><br></pre></td></tr></tbody></table></figure><p>欣赏优雅的配置文件，还好这文件不算太长，我就一句一句加注释吧，参考官网：<a href="https://hexo.io/docs/configuration" target="_blank" rel="noopener">https://hexo.io/docs/configuration</a></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Sidney</span> <span class="string">God</span>  <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Keep</span> <span class="string">quiet</span> <span class="string">time</span> <span class="string">for</span> <span class="string">time</span>  <span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">You</span> <span class="string">laugh</span> <span class="string">at</span> <span class="string">me</span> <span class="string">for</span> <span class="string">being</span> <span class="string">different,</span> <span class="string">but</span> <span class="string">I</span> <span class="string">laugh</span> <span class="string">at</span> <span class="string">you</span> <span class="string">for</span> <span class="string">being</span> <span class="string">the</span> <span class="string">same.</span>  <span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Sidney,</span> <span class="string">Ding,</span> <span class="string">Sidney</span> <span class="string">Ding</span>  <span class="comment"># 关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Sidney</span> <span class="string">Ding</span>  <span class="comment"># 您的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span>  <span class="comment"># 网站使用的语言 中文是zh-Hans</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span>  <span class="comment"># 设置时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://sidneygod.coding.me</span>  <span class="comment"># 网址 可以不写</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span>  <span class="comment"># 网站根目录</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span>  <span class="comment"># 文章的永久链接格式 先用默认值 我的做了修改 后来说</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory 下面是默认目录 不要动 没意义</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">README.md</span>  <span class="comment"># 跳过渲染的文件 可以不要</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">auto_spacing:</span> <span class="literal">false</span>  <span class="comment"># 中文和英文之间加空格</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span>  <span class="comment"># 启动asset文件夹 如果文章图片多的话 建议开启</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>  <span class="comment"># 代码块高亮</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span>  <span class="comment"># 显示行号</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span>  <span class="comment"># 自动检测语言</span></span><br><span class="line"><span class="attr">  tab_replace:</span> <span class="literal">true</span>  <span class="comment"># tab自动转空格</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  order_by:</span> <span class="bullet">-date</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Category & Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span>  <span class="comment"># 当前主题名称 当然是要换成刚下载的了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line">    <span class="comment"># 这个部署就按照这个样式 GitHub的仓库 <用户名>.github.io</span></span><br><span class="line"><span class="attr">    github:</span> <span class="string">git@github.com:SidneyGod/SidneyGod.github.io.git</span></span><br><span class="line">    <span class="comment"># 码云的仓库 <用户名> 码云比较坑 需要手动更新</span></span><br><span class="line"><span class="attr">    gitee:</span> <span class="string">git@gitee.com:SidneyGod/SidneyGod.git</span></span><br><span class="line">    <span class="comment"># coding的仓库 <用户名></span></span><br><span class="line"><span class="attr">    coding:</span> <span class="string">git@git.dev.tencent.com:SidneyGod/SidneyGod.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions 下面是一些插件 每个插件我都给了地址 具体怎么安装 可打开那些地址</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">### Feed Atom https://github.com/hexojs/hexo-generator-feed</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">  order_by:</span> <span class="bullet">-date</span></span><br><span class="line"><span class="attr">  icon:</span> <span class="string">icon.png</span></span><br><span class="line"><span class="attr">  autodiscovery:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Local Search https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">999</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### https://github.com/Rozbo/hexo-abbrlink</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line"><span class="attr">  alg:</span> <span class="string">crc32</span>  <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line"><span class="attr">  rep:</span> <span class="string">hex</span>    <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></tbody></table></figure><p>好了，hexo的配置文件完了，再举个例子，怎么安装依赖吧，就举那个abbrlink吧</p><p>先打开上面那个地址：<a href="https://github.com/Rozbo/hexo-abbrlink" target="_blank" rel="noopener">https://github.com/Rozbo/hexo-abbrlink</a></p><p>然后跟着他的步骤走一遍</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install hexo-abbrlink --save</span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim _config.yml</span><br></pre></td></tr></tbody></table></figure><p>一个是<code>permalink: posts/:abbrlink/</code>，如果你把它修改成<code>permalink: p/:abbrlink/</code>和简书的地址长得就很像了:joy:</p><p>另一个就是在下面添加</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line"><span class="attr">  alg:</span> <span class="string">crc32</span>  <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line"><span class="attr">  rep:</span> <span class="string">hex</span>    <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></tbody></table></figure><p>嗯，安装好了，下一个…很简单，对不对，那么问题来了，如果安装了一个插件，然后觉得不好了，咋卸了它呢？直接执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-abbrlink</span><br><span class="line"><span class="comment"># 然后把你修改过的地方 改回来</span></span><br></pre></td></tr></tbody></table></figure><p>要是忘了这个插件名，怎么办？丢个图，自己体会</p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/1570156735242.png"></p><p>好了hexo的配置告一段落</p><p>关于评论的配置，参考：<a href="https://www.jianshu.com/p/f4658df66a15" target="_blank" rel="noopener">https://www.jianshu.com/p/f4658df66a15</a></p><h2 id="2-2-NexT"><a href="#2-2-NexT" class="headerlink" title="2.2 NexT"></a>2.2 NexT</h2><p>接下来看next的配置文件，我们还接着一行一行注释吧，不！我拒绝，1000来行呢，我愿意，这看着也不舒服。丢个网址自己看：<a href="https://theme-next.org/docs/theme-settings/" target="_blank" rel="noopener">https://theme-next.org/docs/theme-settings/</a></p><p>说说插件吧，其实套路都一样</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br><span class="line">  item_text_post: <span class="literal">true</span></span><br><span class="line">  item_text_total: <span class="literal">true</span></span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></tbody></table></figure><p>看到没，上面又有地址，这摆明了让你打开它，不打开它都不对不起它对你招了又招的小手：<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">https://github.com/theme-next/hexo-symbols-count-time</a></p><p>然后你看到了吧，又是安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></tbody></table></figure><p>然后改配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  item_text_post:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  item_text_total:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  awl:</span> <span class="number">4</span>  <span class="comment"># 中文建议改成 2</span></span><br><span class="line"><span class="attr">  wpm:</span> <span class="number">275</span>  <span class="comment"># 中文建议改成 300</span></span><br><span class="line"><span class="attr">  suffix:</span> <span class="string">mins.</span></span><br></pre></td></tr></tbody></table></figure><p>要勇于尝试，还有看到别人家有的特效，都可以找找，不过特效越多，加载可能就会慢一点，毕竟文件多了嘛</p><h1 id="3-Beautify"><a href="#3-Beautify" class="headerlink" title="3 Beautify"></a>3 Beautify</h1><p>有了物质基础，当然要享受了，关于美化NexT的文章多得不得了，但是大多针对的是之前的NexT，有的美化可能需要修改<code>*.styl</code>文件什么的，其实没必要，新版本的NexT已经集成了那些特性，修改配置文件就有了</p><p>我比较懒，推荐几篇文档：</p><p><a href="http://shenzekun.cn/hexo的next主题个性化配置教程.html" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a></p><p><a href="https://blog.csdn.net/u012195214/article/details/79204088" target="_blank" rel="noopener">NexT主题的优化定制修改指南</a></p><p><a href="https://leflacon.github.io/59f6b91c/" target="_blank" rel="noopener">如何给个人博客换上专属免费域名</a></p><p>还有自己搜索去吧…</p><p>对前端有了解的话，肯定知道，静态页面咋改都行，浏览器慢慢调试就是咯，NexT之前是有预留<code>_custom.styl</code>给用户自己修改css样式的，现在需要加点东西</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim themes/next/<span class="built_in">source</span>/css/main.styl</span><br></pre></td></tr></tbody></table></figure><p>首先说明，我并不懂这语法，也不想学，但是按照模样修改还是可以的</p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/1570158669352.png"></p><p>就加了那句红框，然后在这个目录下创建<code>_custom</code>目录，再创建<code>custom.styl</code>文件，下面给出我的自定义css样式</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>{</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &:hover {</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 文章背景半透明</span><br><span class="line"><span class="selector-class">.content</span> {</span><br><span class="line">  border-radius: 20px; //文章背景设置圆角</span><br><span class="line">  <span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span> 50<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 50<span class="selector-tag">px</span>;</span><br><span class="line">  <span class="selector-tag">background</span><span class="selector-pseudo">:rgba(255</span>, 255, 255, 0<span class="selector-class">.8</span>) <span class="selector-tag">none</span> <span class="selector-tag">repeat</span> <span class="selector-tag">scroll</span> !<span class="selector-tag">important</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-block</span> {</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 255, 0) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 255, 0) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0), <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0), <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 255, 0) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0), <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0), <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 去除页面底部页码上面的横线</span><br><span class="line"><span class="selector-class">.pagination</span> {</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">}</span><br><span class="line">// 去掉图片边框</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-body</span> <span class="selector-tag">img</span> {</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.post-gallery</span> <span class="selector-class">.post-gallery-img</span> <span class="selector-tag">img</span> {</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">3px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-title</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">26px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">1px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 去除在页面文章之间的分割线</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-eof</span> {</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 255, 255, 0);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 选中文字部分的样式</span><br><span class="line"><span class="selector-pseudo">::selection</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#222222</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fced6d</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 鼠标样式</span><br><span class="line">* {</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">"/./cursor/pointer.ico"</span>),auto<span class="meta">!important</span></span><br><span class="line">}</span><br><span class="line"><span class="selector-pseudo">:active</span> {</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">"/./cursor/click.ico"</span>),auto<span class="meta">!important</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// fonts</span><br><span class="line">@<span class="keyword">font-face</span> {</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'DFGirlFull'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'/fonts/DFGirlFull.ttf'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">}</span><br><span class="line">@<span class="keyword">font-face</span> {</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'ModernAntiqua'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'/fonts/ModernAntiqua.ttf'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">}</span><br><span class="line">@<span class="keyword">font-face</span> {</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Monaco'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'/fonts/Monaco.ttf'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个文件中的鼠标样式和字体需要自己提供，置于位置，记住<code>blog/themes/next/source</code>就是根目录，然后放哪，你开心就好，这其实就是主题的核心样式位置，还有个布局格式在<code>blog/themes/next/layout</code>，难度不大</p><h1 id="4-Deploy"><a href="#4-Deploy" class="headerlink" title="4 Deploy"></a>4 Deploy</h1><h2 id="4-1-写篇文章"><a href="#4-1-写篇文章" class="headerlink" title="4.1 写篇文章"></a>4.1 写篇文章</h2><p>一切都做好了，终于可以开始愉快的写blog了，新建一篇blog</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"Article Name"</span></span><br></pre></td></tr></tbody></table></figure><p>然后就会在<code>blog/source/_posts</code>新建一个<code>Article Name.md</code>文件，打开这个文件你就可以写blog了。问题来了，这以后blog文章一旦多了，找md文件多费事，能不能在new完自动打开这个文件？当然能！hexo作者这点还是想到了的</p><p>首先在<code>hexo</code>目录的<code>scripts</code>目录中创建一个JavaScript文件，文件名随意，如果没有<code>scripts</code>那就创建一个，然后在js文件中添加这么段代码</p><p>Win：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 3 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">  <span class="comment">// 这是我打开markdown文件软件的路径</span></span><br><span class="line">  spawn(<span class="string">'start  "D:\Program Files\Typora\Typora.exe" '</span> + data.path);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>Mac：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 3 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">    exec(<span class="string">'open -a "markdown编辑器绝对路径.app" '</span> + data.path);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="4-2-发布"><a href="#4-2-发布" class="headerlink" title="4.2 发布"></a>4.2 发布</h2><p>写好了，那就发布吧</p><h3 id="4-2-1-安装插件"><a href="#4-2-1-安装插件" class="headerlink" title="4.2.1 安装插件"></a>4.2.1 安装插件</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="comment"># 修改hexo配置文件</span></span><br><span class="line">vim _config.yml</span><br></pre></td></tr></tbody></table></figure><p>上面说过的</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line">    <span class="comment"># 这个部署就按照这个样式 GitHub的仓库 <用户名>.github.io</span></span><br><span class="line"><span class="attr">    github:</span> <span class="string">git@github.com:SidneyGod/SidneyGod.github.io.git</span></span><br><span class="line">    <span class="comment"># 码云的仓库 <用户名> 码云比较坑 需要手动更新</span></span><br><span class="line"><span class="attr">    gitee:</span> <span class="string">git@gitee.com:SidneyGod/SidneyGod.git</span></span><br><span class="line">    <span class="comment"># coding的仓库 <用户名></span></span><br><span class="line"><span class="attr">    coding:</span> <span class="string">git@git.dev.tencent.com:SidneyGod/SidneyGod.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-2-创建仓库"><a href="#4-2-2-创建仓库" class="headerlink" title="4.2.2 创建仓库"></a>4.2.2 创建仓库</h3><p><strong>github</strong></p><p>创建好<code><用户名>.github.io</code>仓库，git地址也是对的，就可以直接部署了，每次更新，github也会自动更新</p><p>毕竟github不在国内，可能访问速度有点慢</p><p><strong>码云</strong></p><p>创建好同名仓库，然后需要以下操作</p><ol><li><p>进入仓库 > Service > Gitee Pages</p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/1570160301420.png"></p></li><li><p>点击Update</p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/1570160387541.png"></p></li></ol><p><strong>这不是只要做一次，而是你每次更新页面都需要手动去更新!!!</strong></p><p><strong>coding</strong></p><p>创建好同名仓库，只需要做一次，之后会自动同步</p><ol><li><p>进入仓库 > 代码 > Pages 服务</p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/1570160610224.png"></p></li><li><p>一键开启</p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/1570160683781.png"></p></li></ol><p>已经被腾讯买了</p><h3 id="4-2-3-hexo命令"><a href="#4-2-3-hexo命令" class="headerlink" title="4.2.3 hexo命令"></a>4.2.3 hexo命令</h3><p>这个时候就可以通过</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清空public目录 没必要每次都做 除非安装了新插件什么的</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment"># 生成文件</span></span><br><span class="line">hexo g <span class="comment"># hexo generate</span></span><br><span class="line"><span class="comment"># 部署到git仓库</span></span><br><span class="line">hexo d <span class="comment"># hexo deploy</span></span><br></pre></td></tr></tbody></table></figure><p>这时候就可以通过</p><p><a href="https://sidneygod.github.io/">https://sidneygod.github.io/</a></p><p><a href="https://sidneygod.coding.me/" target="_blank" rel="noopener">https://sidneygod.coding.me/</a></p><p><a href="https://sidneygod.gitee.io/" target="_blank" rel="noopener">https://sidneygod.gitee.io/</a></p><p>访问blog了</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;1-Getting-Started&quot;&gt;&lt;a href=&quot;#1-Getting-Started&quot; class=&quot;headerlink&quot; title=&quot;1 Getting Started&quot;&gt;&lt;/a&gt;1 Getting Started&lt;/h1&gt;&lt;p&gt;首先跟着hexo官方文档走一遍：&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/docs/&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装git：&lt;a href=&quot;https://hexo.io/docs/#Install-Git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/docs/#Install-Git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装Node.js：&lt;a href=&quot;https://hexo.io/docs/#Install-Node-js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/docs/#Install-Node-js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装hexo&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Win下 找个目录右键 Git Bash Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Other" scheme="https://sidneygod.github.io/categories/Other/"/>
    
    
      <category term="blog" scheme="https://sidneygod.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Git Learning</title>
    <link href="https://sidneygod.github.io/posts/3ab58e11/"/>
    <id>https://sidneygod.github.io/posts/3ab58e11/</id>
    <published>2019-10-02T13:31:37.000Z</published>
    <updated>2020-05-10T03:25:07.239Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="0-初始化"><a href="#0-初始化" class="headerlink" title="0 初始化"></a>0 初始化</h1><p>每台计算机只需配置一次，升级时会保留配置信息。</p><p>Git自带一个 git config 的工具帮助设置控制Git外观和行为的配置变量，这些变量存在于三个不同的位置：</p><ul><li>/etc/gitconfig：包含系统上每一个用户的及他们仓库的通用配置。如果带有<code>--system</code>选项的git config时，会从此文件读写变量</li><li>~/.gitconfig或~/.config/git/config：只针对当前用户。使用<code>--global</code>选项读写此文件</li><li>当前仓库目录中的config(.git/config)：针对该仓库</li></ul><p>每一级别覆盖上一级别</p><p><strong>基本配置</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置用户名和邮箱</span></span><br><span class="line">git config --global user.name "Sidney Ding"</span><br><span class="line">git config --global user.email "dingfs0527@thundersoft.com"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文本编辑器 根据喜好</span></span><br><span class="line">git config --glonal core.editor vim</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查配置信息</span></span><br><span class="line">git config --list</span><br><span class="line">git config user.name</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取帮助</span></span><br><span class="line">git help <verb></span><br><span class="line">git <verb> --help</span><br><span class="line">man git-<verb></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1 基础"></a>1 基础</h1><p>Git使用基本流程</p><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/git1.png"></p><h2 id="1-1-获取git仓库"><a href="#1-1-获取git仓库" class="headerlink" title="1.1 获取git仓库"></a>1.1 获取git仓库</h2><p>获取仓库的方法有两种</p><h3 id="1-1-1-现有目录初始化"><a href="#1-1-1-现有目录初始化" class="headerlink" title="1.1.1 现有目录初始化"></a>1.1.1 现有目录初始化</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入项目目录</span></span><br><span class="line">cd <ProjectDir></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化 会创建一个.git子目录</span></span><br><span class="line">git init</span><br></pre></td></tr></tbody></table></figure><h3 id="1-1-2-克隆现有仓库"><a href="#1-1-2-克隆现有仓库" class="headerlink" title="1.1.2 克隆现有仓库"></a>1.1.2 克隆现有仓库</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RepoUrl根据协议不同 地址类型也不近相同</span></span><br><span class="line">git clone <RepoUrl></span><br><span class="line"><span class="meta">#</span><span class="bash"> 会在当前目录下创建testRepo目录 并初始化出一个.git文件夹</span></span><br><span class="line">git clone https://github.com/userName/testRepo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建的目录变为MyRepo</span></span><br><span class="line">git clone https://github.com/userName/testRepo MyRepo</span><br></pre></td></tr></tbody></table></figure><h2 id="1-2-忽略文件"><a href="#1-2-忽略文件" class="headerlink" title="1.2 忽略文件"></a>1.2 忽略文件</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat .gitignore</span></span><br><span class="line">*.[oa]</span><br><span class="line">*~</span><br></pre></td></tr></tbody></table></figure><ul><li>所有空行或以<code>#</code>开头的行都会被git忽略</li><li>可以使用标准的glob模式匹配</li><li>匹配模式可以以<code>/</code>开头防止递归</li><li>匹配模式可以以<code>/</code>结尾指定目录</li><li>要忽略指定模式以外的文件或目录，可以在模式前加<code>!</code>取反</li></ul><p>glob模式：shell中简化的正则</p><ul><li><code>*</code>：匹配零个或任意多个字符</li><li><code>[abc]</code>：匹配a,b,c之间任意一个字符</li><li><code>?</code>：匹配任意一个字符</li><li>[0-9]：表示匹配0-9之间人一个数字</li><li><code>a/**/z</code>：匹配任意中间目录，例：a/b/z,/a/b/c/z…</li><li>more: <a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></li></ul><h2 id="1-3-本地文件管理"><a href="#1-3-本地文件管理" class="headerlink" title="1.3 本地文件管理"></a>1.3 本地文件管理</h2><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/git2.png"></p><ul><li>工作区：未隐藏的部分</li><li>版本库：<code>.git</code>目录<ul><li>Index：<code>.git/index</code>，暂存区</li><li>HEAD：<code>.git/HEAD</code>，是一个指针，指向当前分支的版本</li><li>master：只是一个存放40位sha-1的文件而已</li></ul></li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用暂存区的文件替换工作区的文件 撤销修改</span></span><br><span class="line">git checkout -- <file></span><br><span class="line">git checkout .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将文件加到暂存区</span></span><br><span class="line">git add <file></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以查看文件的状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看文件的详细状态</span></span><br><span class="line">git diff</span><br><span class="line">git diff --staged</span><br><span class="line"><span class="meta">#</span><span class="bash"> 撤销暂存区的修改</span></span><br><span class="line">git reset HEAD <file></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除暂存区的文件 工作区的文件不做修改</span></span><br><span class="line">git rm --cached <file></span><br><span class="line"><span class="meta">#</span><span class="bash"> 改名字 等价于三条命令 mv README.md README | git rm README.md | git add README</span></span><br><span class="line">git mv README.md README</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将暂存区的目录树写到版本库中HEAD指向的分支</span></span><br><span class="line">git commit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改commit信息</span></span><br><span class="line">git commit --amend</span><br><span class="line"><span class="meta">#</span><span class="bash"> 撤销上一次提交 其实并不是撤销 其实保留了上一次提交 只是copy了上上次提交的状态</span></span><br><span class="line">git revert -m 1 HEAD</span><br><span class="line">git revert -m commitId</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看提交历史 由近及远</span></span><br><span class="line">git log</span><br><span class="line">git log -p</span><br><span class="line">git log -3</span><br><span class="line">git log --pretty=oneline</span><br><span class="line"><span class="meta">#</span><span class="bash"> 回退到前一个版本 1可以改为任意版本内的数字</span></span><br><span class="line">git reset --hard HEAD~1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 回到任意的提交版本 commitId不必写全 HEAD确实是一个指针</span></span><br><span class="line">git reset --hard <commitId></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令历史</span></span><br><span class="line">git reflog</span><br></pre></td></tr></tbody></table></figure><p>后悔药使用指南:</p><p>git checkout .  还没有add</p><p>git reset</p><h2 id="1-4-远程仓库"><a href="#1-4-远程仓库" class="headerlink" title="1.4 远程仓库"></a>1.4 远程仓库</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示所有的读写远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加一个远程仓库</span></span><br><span class="line">git remote add <shortname> <url></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库获取数据</span></span><br><span class="line">git fetch [remoteName]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 抓取数据并尝试自动合并</span></span><br><span class="line">git pull</span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送到远程仓库</span></span><br><span class="line">git push [remoteName] [branchName]</span><br><span class="line">git push origin master</span><br><span class="line">git push origin HEAD:refs/for/<branchName></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看远程仓库信息</span></span><br><span class="line">git remote show [remoteName]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名远程仓库</span></span><br><span class="line">git remote rename <oldRemoteName> <newRemoteName></span><br><span class="line">git remote rm <remoteName></span><br></pre></td></tr></tbody></table></figure><h2 id="1-5-打标签"><a href="#1-5-打标签" class="headerlink" title="1.5 打标签"></a>1.5 打标签</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有的标签</span></span><br><span class="line">git tag</span><br><span class="line">git tag -l 'v1.8*'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打附注标签</span></span><br><span class="line">git tag -a v1.9 -m 'Version 1.9'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打轻量标签</span></span><br><span class="line">git tag v1.9-lw</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后期打标签</span></span><br><span class="line">git tag -a v1.7 <commitId></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认标签不会传送到远程仓库</span></span><br><span class="line">git push origin [tagname]</span><br><span class="line">git push origin --tags  # 一次性传很多标签</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除tag</span></span><br><span class="line">git tag -d <tagName></span><br></pre></td></tr></tbody></table></figure><h2 id="1-5-别名"><a href="#1-5-别名" class="headerlink" title="1.5 别名"></a>1.5 别名</h2><p>可以给命令起别名 简化操作</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 之后可以用 git co 代替 git checkout</span></span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用git last 查看上一次提交</span></span><br><span class="line">git config --global alias.last 'log -a HEAD'</span><br></pre></td></tr></tbody></table></figure><h2 id="1-7-other"><a href="#1-7-other" class="headerlink" title="1.7 other"></a>1.7 other</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改author</span></span><br><span class="line">git commit --amend --author="author name..."</span><br></pre></td></tr></tbody></table></figure><h1 id="2-分支"><a href="#2-分支" class="headerlink" title="2 分支"></a>2 分支</h1><p>简单来说就是时间线，每条时间线上有很多时间点(commit)</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建分支 dev</span></span><br><span class="line">git branch dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到 dev 分支</span></span><br><span class="line">git checkout dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建并切换到分支 dev</span></span><br><span class="line">git checkout -b dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并制定分支到当前分支 fast-forward 代表只是向上游移动</span></span><br><span class="line">git merge dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支</span></span><br><span class="line">git branch -d dev</span><br></pre></td></tr></tbody></table></figure><h2 id="2-1-冲突"><a href="#2-1-冲突" class="headerlink" title="2.1 冲突"></a>2.1 冲突</h2><p>当合并分支不再是 fast-forward 模式时，Git只是试图将各自修改的部分合并起来，但这种合并会有冲突</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge feature1</span></span><br><span class="line">Auto-merging testFile.txt</span><br><span class="line">CONFLICT (content): Merge conflict in testFile.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></tbody></table></figure><p>Git提示我们需要手动解决冲突后再提交，通过<code>git status</code>也可以知道冲突的文件</p><p>在解决冲突时，可以使用<code>meld fileName</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><<<<<<< HEAD</span><br><span class="line">Creating a new branch is quick & simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line"><span class="meta">></span><span class="bash">>>>>>></span></span><br></pre></td></tr></tbody></table></figure><p><<<<<<<，=======，>>>>>>> 标记出不同分支的内容，需要手动去解决，比如手动修改后：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></tbody></table></figure><p>这样就可以再进行提交了</p><p>通过<code>git log --graph --pretty=oneline --abbrev-commit</code>可以查看分支合并情况</p><p>中断合并<code>git merge --abort</code></p><h2 id="2-2-bug分支"><a href="#2-2-bug分支" class="headerlink" title="2.2 bug分支"></a>2.2 bug分支</h2><p>背景：当前正在<code>dev</code>进行工作，且进行到一半，还没法提交，预计还需要1天完成，此时来了一个bug，这个bug必须在两小时内修复</p><p>Git提供了<code>stash</code>功能，可以把当前工作现场存储起来，等以后恢复后继续工作</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash</span></span><br><span class="line">Saved working directory and index state WIP on dev: f52c633 and merge</span><br></pre></td></tr></tbody></table></figure><p>此时使用<code>git status</code>可以看到工作区是干净的，可以放心创建分支来修复bug。比如现在在master上创建分支修复bug</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git checkout -b issue-101</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进行一系列复杂操作 修复了bug 提交</span></span><br><span class="line">git commit -m "fix bug 101"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换回master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并分支 --no-ff 表示禁用fast-forward模式</span></span><br><span class="line">git merge --no-ff -m "merge bug fix 101" issue-101</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除bug分支</span></span><br><span class="line">git branch -d issue-101</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切回dev分支继续干活</span></span><br><span class="line">git checkout dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看工作现场</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复工作现场同时删除工作现场</span></span><br><span class="line">git stash pop</span><br></pre></td></tr></tbody></table></figure><p>还可以使用<code>git stash apply stash@{0}</code>恢复，然后现场还在，需要通过<code>git stash drop stash@{0}</code>删除</p><blockquote><p>注意：git stash之前，一定要先用git status看一下，是否有Untrackted files。如果有，需要先add。因为git stash不能将untrakcted file压栈</p><p>没有commit切换分支是会报错的</p><p>工作区和暂存区是一个公开的平台，任何一个分支都会用到</p></blockquote><h2 id="2-3-Feature分支"><a href="#2-3-Feature分支" class="headerlink" title="2.3 Feature分支"></a>2.3 Feature分支</h2><p>开发时，每添加一个新功能最好新建一个feature分支，因为这个功能的代码可能是实验性质的，不能把主分支搞乱。</p><p>新建Feature分支，开发，合并，删除Feature分支</p><p>开发到一半，觉得这个不行，可以使用<code>git branch -D fearture</code>进行强行删除</p><h2 id="2-4-多人协作"><a href="#2-4-多人协作" class="headerlink" title="2.4 多人协作"></a>2.4 多人协作</h2><p>首先，试图使用<code>git push origin <branchName></code>推送自己的修改</p><p>如果推送失败，则因为远程分支比你新，需要先用<code>git pull</code>试图合并</p><p>若果有冲突，则解决冲突，并在本地提交</p><p>没有冲突或者解决冲突后，再用<code>git push origin <branchName></code>推送就能成功</p><blockquote><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --setupstream-to=origin/branch-name branch-name</code>建立本地分支与远程分支的关联</p><p>本地新建分支如果不推送到远程，对其他人就是不可见的，于是可以随便玩..</p><p><code>git pull</code> = <code>git fetch</code> + <code>git merge</code></p></blockquote><h2 id="2-5-变基rebase"><a href="#2-5-变基rebase" class="headerlink" title="2.5 变基rebase"></a>2.5 变基rebase</h2><p>合并分支的一种方式</p><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线</li><li>目的是为了我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比</li><li>变基有风险！</li></ul><h1 id="3-Patch"><a href="#3-Patch" class="headerlink" title="3 Patch"></a>3 Patch</h1><ul><li>创建补丁</li></ul><p><code>git diff > my.patch</code></p><p><code>git diff --no-prefix > my.patch</code></p><p><code>git diff master > my.patch</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将最近的三次提交 变为patch文件 -s 表示加上当前用户签名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git format-patch -s HEAD~3..HEAD</span></span><br><span class="line">0001-Fix-typo-help-to-help.patch</span><br><span class="line">0002-Add-I18N-support.patch</span><br><span class="line">0003-Translate-for-Chinese.patch</span><br></pre></td></tr></tbody></table></figure><ul><li>通过邮件发送补丁</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git send-email *.patch</span><br></pre></td></tr></tbody></table></figure><p><code>git am</code>应用来自邮箱的补丁，特别是被mbox格式化过的</p><ul><li>应用补丁</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基于HEAD~3创建一个分支</span></span><br><span class="line">git checkout -b branch1 HEAD~3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 应用补丁</span></span><br><span class="line">git apply *.patch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果apply一个patch出错，报error: patch failed: drivers/usb/host/xhci.c:918之类的错误，那么是因为本地已经有这个patch了，所以不能够apply</span></span><br></pre></td></tr></tbody></table></figure><ul><li>cherry-pick</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 引入特性分支的某个提交</span></span><br><span class="line">git cherry-pick commitId</span><br></pre></td></tr></tbody></table></figure><h1 id="4-Repo"><a href="#4-Repo" class="headerlink" title="4 Repo"></a>4 Repo</h1><p>repo就是通过Python对git的一个封装，用于管理多个Git版本库</p><h2 id="4-1-安装repo"><a href="#4-1-安装repo" class="headerlink" title="4.1 安装repo"></a>4.1 安装repo</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载repo的引导脚本</span></span><br><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将repo脚本设置为可执行</span></span><br><span class="line">chmod a+x ~/bin/repo</span><br></pre></td></tr></tbody></table></figure><h2 id="4-2-初始化"><a href="#4-2-初始化" class="headerlink" title="4.2 初始化"></a>4.2 初始化</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir work-dir</span><br><span class="line">cd work-dir</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化清单文件 就是一个.git文件</span></span><br><span class="line">repo init -u <gitUrl></span><br><span class="line">repo init -u <gitUrl> -b <branchName></span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示优先从本地的mirror同步 提高下载速度</span></span><br><span class="line">repo init -u <gitUrl> -b <branchName> --reference=<localServerMirror></span><br></pre></td></tr></tbody></table></figure><p>此时工作目录就会有个<code>.repo</code>文件夹，其中有个<code>manifest.xml</code>文件，这文件里面包含了Android各项目的信息</p><blockquote><p>代码库本地镜像 <code>repo init --mirror -u <gitUrl></code></p></blockquote><h2 id="4-3-同步"><a href="#4-3-同步" class="headerlink" title="4.3 同步"></a>4.3 同步</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 同步代码到本地</span></span><br><span class="line">repo sync -j6</span><br><span class="line"><span class="meta">#</span><span class="bash"> 其中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -j 多任务 过多会起反作用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -c 只下载当前代码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 让工程回退到manifest制定的版本</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -f 如果某个工程同步失败 继续同步</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以只同步感兴趣的代码</span></span><br><span class="line">repo sync platform/build</span><br></pre></td></tr></tbody></table></figure><h2 id="4-4-常用命令"><a href="#4-4-常用命令" class="headerlink" title="4.4 常用命令"></a>4.4 常用命令</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取帮助</span></span><br><span class="line">repo help <command></span><br></pre></td></tr></tbody></table></figure><ul><li><p>repo init</p></li><li><p>repo sync</p><p>相当于<code>git clone</code>或<code>git update</code> + <code>git rebase origin/branch</code></p></li><li><p>repo start</p><p>对<code>git checkout -b</code>的封装</p><p><code>repo start <newBranchName> [--all | <project>...]</code></p></li><li><p>repo checkout</p><p>对<code>git checkout</code>的封装</p></li><li><p>repo status</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">project system/core/                            (*** NO BRANCH ***)</span><br><span class="line"> -m     fs_mgr/fs_mgr_fstab.cpp</span><br></pre></td></tr></tbody></table></figure></li></ul><p>每个小节的首行显示项目名称,以及所在分支名称</p><p>之后显示该项目中文件变更状态。头两个字母显示变更状态,后面显示文件名或者其<br>  他变更信息</p><p>第一个字母表示暂存区的文件修改状态</p><ul><li>- :没有改变<ul><li>A :添加 (不在HEAD中, 在暂存区)</li><li>M :修改 (在HEAD中, 在暂存区, 内容不同)</li><li>D :删除 (在HEAD中, 不在暂存区)</li><li>R :重命名 (不在HEAD中, 在暂存区, 路径修改 )</li><li>C :拷贝 (不在HEAD中, 在暂存区, 从其他文件拷贝)</li><li>T :文件状态改变 (在HEAD中, 在暂存区, 内容相同)</li><li>U :未合并, 需要冲突解决</li></ul></li></ul><p>第二个字母表示工作区文件的更改状态</p><ul><li>- :新/未知 (不在暂存区, 在工作区)<ul><li>m :修改 (在暂存区, 在工作区,被修改)</li><li>d :删除 (在暂存区,不在工作区)</li></ul></li></ul><p>两个表示状态的字母后面,显示文件名信息。如果有文件重命名还会显示改变前后的<br>  文件名以及文件的相似度</p><ul><li><p>repo diff [<project>…]</p><p>是对<code>git diff</code>命令的封装,用以分别显示各个项目工作区下的文件差异</p></li></ul><p><img alt data-src="https://gitee.com/SidneyGod/ImagePlace/raw/master/1562563963220.png"></p><h1 id="5-Gerrit"><a href="#5-Gerrit" class="headerlink" title="5 Gerrit"></a>5 Gerrit</h1><p>先加ssh-key</p><p>Gerrit下的Git服务器只允许用户向特殊的引用<code>ref/for/<branchName></code>推送，这样才会创建一个reviewId</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;0-初始化&quot;&gt;&lt;a href=&quot;#0-初始化&quot; class=&quot;headerlink&quot; title=&quot;0 初始化&quot;&gt;&lt;/a&gt;0 初始化&lt;/h1&gt;&lt;p&gt;每台计算机只需配置一次，升级时会保留配置信息。&lt;/p&gt;
&lt;p&gt;Git自带一个 git config 的工具帮助设置控制Git外观和行为的配置变量，这些变量存在于三个不同的位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/gitconfig：包含系统上每一个用户的及他们仓库的通用配置。如果带有&lt;code&gt;--system&lt;/code&gt;选项的git config时，会从此文件读写变量&lt;/li&gt;
&lt;li&gt;~/.gitconfig或~/.config/git/config：只针对当前用户。使用&lt;code&gt;--global&lt;/code&gt;选项读写此文件&lt;/li&gt;
&lt;li&gt;当前仓库目录中的config(.git/config)：针对该仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一级别覆盖上一级别&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本配置&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 配置用户名和邮箱&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &quot;Sidney Ding&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &quot;dingfs0527@thundersoft.com&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 文本编辑器 根据喜好&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --glonal core.editor vim&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 检查配置信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config user.name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 获取帮助&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git help &lt;verb&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;verb&gt; --help&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;man git-&lt;verb&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Other" scheme="https://sidneygod.github.io/categories/Other/"/>
    
    
      <category term="git" scheme="https://sidneygod.github.io/tags/git/"/>
    
      <category term="repo" scheme="https://sidneygod.github.io/tags/repo/"/>
    
      <category term="gerrit" scheme="https://sidneygod.github.io/tags/gerrit/"/>
    
  </entry>
  
</feed>
