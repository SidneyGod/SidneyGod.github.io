<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sidney God</title>
  <icon>https://sidneygod.coding.me/icon.png</icon>
  <subtitle>Keep quiet time for time</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sidneygod.coding.me/"/>
  <updated>2019-10-02T16:43:35.923Z</updated>
  <id>https://sidneygod.coding.me/</id>
  
  <author>
    <name>Sidney Ding</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git Learning</title>
    <link href="https://sidneygod.coding.me/posts/3ab58e11/"/>
    <id>https://sidneygod.coding.me/posts/3ab58e11/</id>
    <published>2019-10-02T13:31:37.000Z</published>
    <updated>2019-10-02T16:43:35.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-初始化"><a href="#0-初始化" class="headerlink" title="0 初始化"></a>0 初始化</h1><p>每台计算机只需配置一次，升级时会保留配置信息。</p><p>Git自带一个 git config 的工具帮助设置控制Git外观和行为的配置变量，这些变量存在于三个不同的位置：</p><ul><li>/etc/gitconfig：包含系统上每一个用户的及他们仓库的通用配置。如果带有<code>--system</code>选项的git config时，会从此文件读写变量</li><li>~/.gitconfig或~/.config/git/config：只针对当前用户。使用<code>--global</code>选项读写此文件</li><li>当前仓库目录中的config(.git/config)：针对该仓库</li></ul><a id="more"></a><p>每一级别覆盖上一级别</p><p><strong>基本配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 配置用户名和邮箱</span><br><span class="line">git config --global user.name "Sidney Ding"</span><br><span class="line">git config --global user.email "dingfs0527@thundersoft.com"</span><br><span class="line"><span class="meta">#</span> 文本编辑器 根据喜好</span><br><span class="line">git config --glonal core.editor vim</span><br><span class="line"><span class="meta">#</span> 检查配置信息</span><br><span class="line">git config --list</span><br><span class="line">git config user.name</span><br><span class="line"><span class="meta">#</span> 获取帮助</span><br><span class="line">git help &lt;verb&gt;</span><br><span class="line">git &lt;verb&gt; --help</span><br><span class="line">man git-&lt;verb&gt;</span><br></pre></td></tr></table></figure><h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1 基础"></a>1 基础</h1><p>Git使用基本流程</p><p><img alt="git1" data-src="Git-Learning/git1.png"></p><h2 id="1-1-获取git仓库"><a href="#1-1-获取git仓库" class="headerlink" title="1.1 获取git仓库"></a>1.1 获取git仓库</h2><p>获取仓库的方法有两种</p><h3 id="1-1-1-现有目录初始化"><a href="#1-1-1-现有目录初始化" class="headerlink" title="1.1.1 现有目录初始化"></a>1.1.1 现有目录初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进入项目目录</span><br><span class="line">cd &lt;ProjectDir&gt;</span><br><span class="line"><span class="meta">#</span> 初始化 会创建一个.git子目录</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="1-1-2-克隆现有仓库"><a href="#1-1-2-克隆现有仓库" class="headerlink" title="1.1.2 克隆现有仓库"></a>1.1.2 克隆现有仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> RepoUrl根据协议不同 地址类型也不近相同</span><br><span class="line">git clone &lt;RepoUrl&gt;</span><br><span class="line"><span class="meta">#</span> 会在当前目录下创建testRepo目录 并初始化出一个.git文件夹</span><br><span class="line">git clone https://github.com/userName/testRepo</span><br><span class="line"><span class="meta">#</span> 创建的目录变为MyRepo</span><br><span class="line">git clone https://github.com/userName/testRepo MyRepo</span><br></pre></td></tr></table></figure><h2 id="1-2-忽略文件"><a href="#1-2-忽略文件" class="headerlink" title="1.2 忽略文件"></a>1.2 忽略文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat .gitignore</span><br><span class="line">*.[oa]</span><br><span class="line">*~</span><br></pre></td></tr></table></figure><ul><li>所有空行或以<code>#</code>开头的行都会被git忽略</li><li>可以使用标准的glob模式匹配</li><li>匹配模式可以以<code>/</code>开头防止递归</li><li>匹配模式可以以<code>/</code>结尾指定目录</li><li>要忽略指定模式以外的文件或目录，可以在模式前加<code>!</code>取反</li></ul><p>glob模式：shell中简化的正则</p><ul><li><code>*</code>：匹配零个或任意多个字符</li><li><code>[abc]</code>：匹配a,b,c之间任意一个字符</li><li><code>?</code>：匹配任意一个字符</li><li>[0-9]：表示匹配0-9之间人一个数字</li><li><code>a/**/z</code>：匹配任意中间目录，例：a/b/z,/a/b/c/z…</li><li>more: <a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></li></ul><h2 id="1-3-本地文件管理"><a href="#1-3-本地文件管理" class="headerlink" title="1.3 本地文件管理"></a>1.3 本地文件管理</h2><p><img alt="git2" data-src="/Git-Learning/git2.png"></p><ul><li>工作区：未隐藏的部分</li><li>版本库：<code>.git</code>目录<ul><li>Index：<code>.git/index</code>，暂存区</li><li>HEAD：<code>.git/HEAD</code>，是一个指针，指向当前分支的版本</li><li>master：只是一个存放40位sha-1的文件而已</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 用暂存区的文件替换工作区的文件 撤销修改</span><br><span class="line">git checkout -- &lt;file&gt;</span><br><span class="line">git checkout .</span><br><span class="line"><span class="meta">#</span> 将文件加到暂存区</span><br><span class="line">git add &lt;file&gt;</span><br><span class="line"><span class="meta">#</span> 可以查看文件的状态</span><br><span class="line">git status</span><br><span class="line"><span class="meta">#</span> 查看文件的详细状态</span><br><span class="line">git diff</span><br><span class="line">git diff --staged</span><br><span class="line"><span class="meta">#</span> 撤销暂存区的修改</span><br><span class="line">git reset HEAD &lt;file&gt;</span><br><span class="line"><span class="meta">#</span> 删除暂存区的文件 工作区的文件不做修改</span><br><span class="line">git rm --cached &lt;file&gt;</span><br><span class="line"><span class="meta">#</span> 改名字 等价于三条命令 mv README.md README | git rm README.md | git add README</span><br><span class="line">git mv README.md README</span><br><span class="line"><span class="meta">#</span> 将暂存区的目录树写到版本库中HEAD指向的分支</span><br><span class="line">git commit</span><br><span class="line"><span class="meta">#</span> 修改commit信息</span><br><span class="line">git commit --amend</span><br><span class="line"><span class="meta">#</span> 撤销上一次提交 其实并不是撤销 其实保留了上一次提交 只是copy了上上次提交的状态</span><br><span class="line">git revert -m 1 HEAD</span><br><span class="line">git revert -m commitId</span><br><span class="line"><span class="meta">#</span> 查看提交历史 由近及远</span><br><span class="line">git log</span><br><span class="line">git log -p</span><br><span class="line">git log -3</span><br><span class="line">git log --pretty=oneline</span><br><span class="line"><span class="meta">#</span> 回退到前一个版本 1可以改为任意版本内的数字</span><br><span class="line">git reset --hard HEAD~1</span><br><span class="line"><span class="meta">#</span> 回到任意的提交版本 commitId不必写全 HEAD确实是一个指针</span><br><span class="line">git reset --hard &lt;commitId&gt;</span><br><span class="line"><span class="meta">#</span> 命令历史</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>后悔药使用指南:</p><p>git checkout .  还没有add</p><p>git reset</p><h2 id="1-4-远程仓库"><a href="#1-4-远程仓库" class="headerlink" title="1.4 远程仓库"></a>1.4 远程仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 显示所有的读写远程仓库</span><br><span class="line">git remote -v</span><br><span class="line"><span class="meta">#</span> 添加一个远程仓库</span><br><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;</span><br><span class="line"><span class="meta">#</span> 从远程仓库获取数据</span><br><span class="line">git fetch [remoteName]</span><br><span class="line"><span class="meta">#</span> 抓取数据并尝试自动合并</span><br><span class="line">git pull</span><br><span class="line"><span class="meta">#</span> 推送到远程仓库</span><br><span class="line">git push [remoteName] [branchName]</span><br><span class="line">git push origin master</span><br><span class="line">git push origin HEAD:refs/for/&lt;branchName&gt;</span><br><span class="line"><span class="meta">#</span> 查看远程仓库信息</span><br><span class="line">git remote show [remoteName]</span><br><span class="line"><span class="meta">#</span> 重命名远程仓库</span><br><span class="line">git remote rename &lt;oldRemoteName&gt; &lt;newRemoteName&gt;</span><br><span class="line">git remote rm &lt;remoteName&gt;</span><br></pre></td></tr></table></figure><h2 id="1-5-打标签"><a href="#1-5-打标签" class="headerlink" title="1.5 打标签"></a>1.5 打标签</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 列出所有的标签</span><br><span class="line">git tag</span><br><span class="line">git tag -l 'v1.8*'</span><br><span class="line"><span class="meta">#</span> 打附注标签</span><br><span class="line">git tag -a v1.9 -m 'Version 1.9'</span><br><span class="line"><span class="meta">#</span> 打轻量标签</span><br><span class="line">git tag v1.9-lw</span><br><span class="line"><span class="meta">#</span> 后期打标签</span><br><span class="line">git tag -a v1.7 &lt;commitId&gt;</span><br><span class="line"><span class="meta">#</span> 默认标签不会传送到远程仓库</span><br><span class="line">git push origin [tagname]</span><br><span class="line">git push origin --tags  # 一次性传很多标签</span><br><span class="line"><span class="meta">#</span> 删除tag</span><br><span class="line">git tag -d &lt;tagName&gt;</span><br></pre></td></tr></table></figure><h2 id="1-6-别名"><a href="#1-6-别名" class="headerlink" title="1.6 别名"></a>1.6 别名</h2><p>可以给命令起别名 简化操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 之后可以用 git co 代替 git checkout</span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br><span class="line"><span class="meta">#</span> 使用git last 查看上一次提交</span><br><span class="line">git config --global alias.last 'log -a HEAD'</span><br></pre></td></tr></table></figure><h2 id="1-7-other"><a href="#1-7-other" class="headerlink" title="1.7 other"></a>1.7 other</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改author</span><br><span class="line">git commit --amend --author="author name..."</span><br></pre></td></tr></table></figure><h1 id="2-分支"><a href="#2-分支" class="headerlink" title="2 分支"></a>2 分支</h1><p>简单来说就是时间线，每条时间线上有很多时间点(commit)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建分支 dev</span><br><span class="line">git branch dev</span><br><span class="line"><span class="meta">#</span> 切换到 dev 分支</span><br><span class="line">git checkout dev</span><br><span class="line"><span class="meta">#</span> 创建并切换到分支 dev</span><br><span class="line">git checkout -b dev</span><br><span class="line"><span class="meta">#</span> 查看当前分支</span><br><span class="line">git branch</span><br><span class="line"><span class="meta">#</span> 查看所有分支</span><br><span class="line">git branch -a</span><br><span class="line"><span class="meta">#</span> 合并制定分支到当前分支 fast-forward 代表只是向上游移动</span><br><span class="line">git merge dev</span><br><span class="line"><span class="meta">#</span> 删除分支</span><br><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><h2 id="2-1-冲突"><a href="#2-1-冲突" class="headerlink" title="2.1 冲突"></a>2.1 冲突</h2><p>当合并分支不再是 fast-forward 模式时，Git只是试图将各自修改的部分合并起来，但这种合并会有冲突</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git merge feature1</span><br><span class="line">Auto-merging testFile.txt</span><br><span class="line">CONFLICT (content): Merge conflict in testFile.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>Git提示我们需要手动解决冲突后再提交，通过<code>git status</code>也可以知道冲突的文件</p><p>在解决冲突时，可以使用<code>meld fileName</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line"><span class="meta">&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt; 标记出不同分支的内容，需要手动去解决，比如手动修改后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></table></figure><p>这样就可以再进行提交了</p><p>通过<code>git log --graph --pretty=oneline --abbrev-commit</code>可以查看分支合并情况</p><p>中断合并<code>git merge --abort</code></p><h2 id="2-2-bug分支"><a href="#2-2-bug分支" class="headerlink" title="2.2 bug分支"></a>2.2 bug分支</h2><p>背景：当前正在<code>dev</code>进行工作，且进行到一半，还没法提交，预计还需要1天完成，此时来了一个bug，这个bug必须在两小时内修复</p><p>Git提供了<code>stash</code>功能，可以把当前工作现场存储起来，等以后恢复后继续工作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git stash</span><br><span class="line">Saved working directory and index state WIP on dev: f52c633 and merge</span><br></pre></td></tr></table></figure><p>此时使用<code>git status</code>可以看到工作区是干净的，可以放心创建分支来修复bug。比如现在在master上创建分支修复bug</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git checkout -b issue-101</span><br><span class="line"><span class="meta">#</span> 进行一系列复杂操作 修复了bug 提交</span><br><span class="line">git commit -m "fix bug 101"</span><br><span class="line"><span class="meta">#</span> 切换回master分支</span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta">#</span> 合并分支 --no-ff 表示禁用fast-forward模式</span><br><span class="line">git merge --no-ff -m "merge bug fix 101" issue-101</span><br><span class="line"><span class="meta">#</span> 删除bug分支</span><br><span class="line">git branch -d issue-101</span><br><span class="line"><span class="meta">#</span> 切回dev分支继续干活</span><br><span class="line">git checkout dev</span><br><span class="line"><span class="meta">#</span> 查看工作现场</span><br><span class="line">git stash list</span><br><span class="line"><span class="meta">#</span> 恢复工作现场同时删除工作现场</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>还可以使用<code>git stash apply stash@{0}</code>恢复，然后现场还在，需要通过<code>git stash drop stash@{0}</code>删除</p><blockquote><p>注意：git stash之前，一定要先用git status看一下，是否有Untrackted files。如果有，需要先add。因为git stash不能将untrakcted file压栈</p><p>没有commit切换分支是会报错的</p><p>工作区和暂存区是一个公开的平台，任何一个分支都会用到</p></blockquote><h2 id="2-3-Feature分支"><a href="#2-3-Feature分支" class="headerlink" title="2.3 Feature分支"></a>2.3 Feature分支</h2><p>开发时，每添加一个新功能最好新建一个feature分支，因为这个功能的代码可能是实验性质的，不能把主分支搞乱。</p><p>新建Feature分支，开发，合并，删除Feature分支</p><p>开发到一半，觉得这个不行，可以使用<code>git branch -D fearture</code>进行强行删除</p><h2 id="2-4-多人协作"><a href="#2-4-多人协作" class="headerlink" title="2.4 多人协作"></a>2.4 多人协作</h2><p>首先，试图使用<code>git push origin &lt;branchName&gt;</code>推送自己的修改</p><p>如果推送失败，则因为远程分支比你新，需要先用<code>git pull</code>试图合并</p><p>若果有冲突，则解决冲突，并在本地提交</p><p>没有冲突或者解决冲突后，再用<code>git push origin &lt;branchName&gt;</code>推送就能成功</p><blockquote><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --setupstream-to=origin/branch-name branch-name</code>建立本地分支与远程分支的关联</p><p>本地新建分支如果不推送到远程，对其他人就是不可见的，于是可以随便玩..</p><p><code>git pull</code> = <code>git fetch</code> + <code>git merge</code></p></blockquote><h2 id="2-5-变基rebase"><a href="#2-5-变基rebase" class="headerlink" title="2.5 变基rebase"></a>2.5 变基rebase</h2><p>合并分支的一种方式</p><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线</li><li>目的是为了我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比</li><li>变基有风险！</li></ul><h1 id="3-补丁"><a href="#3-补丁" class="headerlink" title="3 补丁"></a>3 补丁</h1><ul><li>创建补丁</li></ul><p><code>git diff &gt; my.patch</code></p><p><code>git diff --no-prefix &gt; my.patch</code></p><p><code>git diff master &gt; my.patch</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 将最近的三次提交 变为patch文件 -s 表示加上当前用户签名</span><br><span class="line"><span class="meta">$</span> git format-patch -s HEAD~3..HEAD</span><br><span class="line">0001-Fix-typo-help-to-help.patch</span><br><span class="line">0002-Add-I18N-support.patch</span><br><span class="line">0003-Translate-for-Chinese.patch</span><br></pre></td></tr></table></figure><ul><li>通过邮件发送补丁</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git send-email *.patch</span><br></pre></td></tr></table></figure><p><code>git am</code>应用来自邮箱的补丁，特别是被mbox格式化过的</p><ul><li>应用补丁</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 基于HEAD~3创建一个分支</span><br><span class="line">git checkout -b branch1 HEAD~3</span><br><span class="line"><span class="meta">#</span> 应用补丁</span><br><span class="line">git apply *.patch</span><br><span class="line"><span class="meta">#</span> 如果apply一个patch出错，报error: patch failed: drivers/usb/host/xhci.c:918之类的错误，那么是因为本地已经有这个patch了，所以不能够apply</span><br></pre></td></tr></table></figure><ul><li>cherry-pick</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 引入特性分支的某个提交</span><br><span class="line">git cherry-pick commitId</span><br></pre></td></tr></table></figure><h1 id="4-Repo"><a href="#4-Repo" class="headerlink" title="4 Repo"></a>4 Repo</h1><p>repo就是通过Python对git的一个封装，用于管理多个Git版本库</p><h2 id="4-1-安装repo"><a href="#4-1-安装repo" class="headerlink" title="4.1 安装repo"></a>4.1 安装repo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 下载repo的引导脚本</span><br><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class="line"><span class="meta">#</span> 将repo脚本设置为可执行</span><br><span class="line">chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure><h2 id="4-2-初始化"><a href="#4-2-初始化" class="headerlink" title="4.2 初始化"></a>4.2 初始化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir work-dir</span><br><span class="line">cd work-dir</span><br><span class="line"><span class="meta">#</span> 初始化清单文件 就是一个.git文件</span><br><span class="line">repo init -u &lt;gitUrl&gt;</span><br><span class="line">repo init -u &lt;gitUrl&gt; -b &lt;branchName&gt;</span><br><span class="line"><span class="meta">#</span> 表示优先从本地的mirror同步 提高下载速度</span><br><span class="line">repo init -u &lt;gitUrl&gt; -b &lt;branchName&gt; --reference=&lt;localServerMirror&gt;</span><br></pre></td></tr></table></figure><p>此时工作目录就会有个<code>.repo</code>文件夹，其中有个<code>manifest.xml</code>文件，这文件里面包含了Android各项目的信息</p><blockquote><p>代码库本地镜像 <code>repo init --mirror -u &lt;gitUrl&gt;</code></p></blockquote><h2 id="4-3-同步"><a href="#4-3-同步" class="headerlink" title="4.3 同步"></a>4.3 同步</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 同步代码到本地</span><br><span class="line">repo sync -j6</span><br><span class="line"><span class="meta">#</span> 其中</span><br><span class="line"><span class="meta">#</span> -j 多任务 过多会起反作用</span><br><span class="line"><span class="meta">#</span> -c 只下载当前代码</span><br><span class="line"><span class="meta">#</span> -d 让工程回退到manifest制定的版本</span><br><span class="line"><span class="meta">#</span> -f 如果某个工程同步失败 继续同步</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 也可以只同步感兴趣的代码</span><br><span class="line">repo sync platform/build</span><br></pre></td></tr></table></figure><h2 id="4-4-常用命令"><a href="#4-4-常用命令" class="headerlink" title="4.4 常用命令"></a>4.4 常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 获取帮助</span><br><span class="line">repo help &lt;command&gt;</span><br></pre></td></tr></table></figure><ul><li><p>repo init</p></li><li><p>repo sync</p><p>相当于<code>git clone</code>或<code>git update</code> + <code>git rebase origin/branch</code></p></li><li><p>repo start</p><p>对<code>git checkout -b</code>的封装</p><p><code>repo start &lt;newBranchName&gt; [--all | &lt;project&gt;...]</code></p></li><li><p>repo checkout</p><p>对<code>git checkout</code>的封装</p></li><li><p>repo status</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">project system/core/                            (*** NO BRANCH ***)</span><br><span class="line"> -m     fs_mgr/fs_mgr_fstab.cpp</span><br></pre></td></tr></table></figure></li></ul><p>每个小节的首行显示项目名称,以及所在分支名称</p><p>之后显示该项目中文件变更状态。头两个字母显示变更状态,后面显示文件名或者其<br>  他变更信息</p><p>第一个字母表示暂存区的文件修改状态</p><ul><li>- :没有改变<ul><li>A :添加 (不在HEAD中, 在暂存区)</li><li>M :修改 (在HEAD中, 在暂存区, 内容不同)</li><li>D :删除 (在HEAD中, 不在暂存区)</li><li>R :重命名 (不在HEAD中, 在暂存区, 路径修改 )</li><li>C :拷贝 (不在HEAD中, 在暂存区, 从其他文件拷贝)</li><li>T :文件状态改变 (在HEAD中, 在暂存区, 内容相同)</li><li>U :未合并, 需要冲突解决</li></ul></li></ul><p>第二个字母表示工作区文件的更改状态</p><ul><li>- :新/未知 (不在暂存区, 在工作区)<ul><li>m :修改 (在暂存区, 在工作区,被修改)</li><li>d :删除 (在暂存区,不在工作区)</li></ul></li></ul><p>两个表示状态的字母后面,显示文件名信息。如果有文件重命名还会显示改变前后的<br>  文件名以及文件的相似度</p><ul><li><p>repo diff [&lt;project&gt;…]</p><p>是对<code>git diff</code>命令的封装,用以分别显示各个项目工作区下的文件差异</p></li></ul><p><img alt="1562563963220" data-src="/Git-Learning/1562563963220.png"></p><h1 id="5-Gerrit"><a href="#5-Gerrit" class="headerlink" title="5 Gerrit"></a>5 Gerrit</h1><p>先加ssh-key</p><p>Gerrit下的Git服务器只允许用户向特殊的引用<code>ref/for/&lt;branchName&gt;</code>推送，这样才会创建一个reviewId</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-初始化&quot;&gt;&lt;a href=&quot;#0-初始化&quot; class=&quot;headerlink&quot; title=&quot;0 初始化&quot;&gt;&lt;/a&gt;0 初始化&lt;/h1&gt;&lt;p&gt;每台计算机只需配置一次，升级时会保留配置信息。&lt;/p&gt;&lt;p&gt;Git自带一个 git config 的工具帮助设置控制Git外观和行为的配置变量，这些变量存在于三个不同的位置：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;/etc/gitconfig：包含系统上每一个用户的及他们仓库的通用配置。如果带有&lt;code&gt;--system&lt;/code&gt;选项的git config时，会从此文件读写变量&lt;/li&gt;
&lt;li&gt;~/.gitconfig或~/.config/git/config：只针对当前用户。使用&lt;code&gt;--global&lt;/code&gt;选项读写此文件&lt;/li&gt;
&lt;li&gt;当前仓库目录中的config(.git/config)：针对该仓库&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Other" scheme="https://sidneygod.coding.me/categories/Other/"/>
    
    
      <category term="git" scheme="https://sidneygod.coding.me/tags/git/"/>
    
      <category term="repo" scheme="https://sidneygod.coding.me/tags/repo/"/>
    
      <category term="gerrit" scheme="https://sidneygod.coding.me/tags/gerrit/"/>
    
  </entry>
  
</feed>
